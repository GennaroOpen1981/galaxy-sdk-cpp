#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Statistics_TYPES_H
#define Statistics_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Common_types.h"
#include "Queue_types.h"


namespace emq { namespace statistics {

struct ALERT_TYPE {
  enum type {
    SEND_REQUEST = 0,
    RECEIVE_REQUEST = 1,
    CHANGE_REQUEST = 2,
    DELETE_REQUEST = 3,
    SINGLE_SEND_REQUEST = 4,
    BATCH_SEND_REQUEST = 5,
    SHORT_RECEIVE_REQUEST = 6,
    LONG_RECEIVE_REQUEST = 7,
    QUEUE_MESSAGE_NUMBER = 8
  };
};

extern const std::map<int, const char*> _ALERT_TYPE_VALUES_TO_NAMES;

struct MEASUREMENT {
  enum type {
    LATENCY = 0,
    LATENCY_P999 = 1,
    COUNT = 2
  };
};

extern const std::map<int, const char*> _MEASUREMENT_VALUES_TO_NAMES;

class UserQuota;

class SetUserQuotaRequest;

class GetUserQuotaRequest;

class GetUserQuotaResponse;

class GetUserUsedQuotaRequest;

class SetUserInfoRequest;

class GetUserInfoRequest;

class GetUserInfoResponse;

class AlertPolicy;

class AddQueueAlertPolicyRequest;

class AddTagAlertPolicyRequest;

class DeleteQueueAlertPolicyRequest;

class DeleteTagAlertPolicyRequest;

class ListQueueAlertPoliciesRequest;

class ListTagAlertPoliciesRequest;

class ListQueueAlertPoliciesResponse;

class ListTagAlertPoliciesResponse;

class SetQueueDailyStatisticsStateRequest;

class GetQueueDailyStatisticsStateRequest;

class GetQueueDailyStatisticsStateResponse;

typedef struct _UserQuota__isset {
  _UserQuota__isset() : throughput(false), queueNumber(false) {}
  bool throughput :1;
  bool queueNumber :1;
} _UserQuota__isset;

class UserQuota {
 public:

  static const char* ascii_fingerprint; // = "A4F1236A747B75995C40BEB78CEE236F";
  static const uint8_t binary_fingerprint[16]; // = {0xA4,0xF1,0x23,0x6A,0x74,0x7B,0x75,0x99,0x5C,0x40,0xBE,0xB7,0x8C,0xEE,0x23,0x6F};

  UserQuota(const UserQuota&);
  UserQuota& operator=(const UserQuota&);
  UserQuota() : queueNumber(0) {
  }

  virtual ~UserQuota() throw();
   ::emq::queue::Throughput throughput;
  int64_t queueNumber;

  _UserQuota__isset __isset;

  void __set_throughput(const  ::emq::queue::Throughput& val);

  void __set_queueNumber(const int64_t val);

  bool operator == (const UserQuota & rhs) const
  {
    if (__isset.throughput != rhs.__isset.throughput)
      return false;
    else if (__isset.throughput && !(throughput == rhs.throughput))
      return false;
    if (__isset.queueNumber != rhs.__isset.queueNumber)
      return false;
    else if (__isset.queueNumber && !(queueNumber == rhs.queueNumber))
      return false;
    return true;
  }
  bool operator != (const UserQuota &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserQuota & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserQuota& obj);
};

void swap(UserQuota &a, UserQuota &b);


class SetUserQuotaRequest {
 public:

  static const char* ascii_fingerprint; // = "3BCCAE0F1DF0E22133EFF24E57487296";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0xCC,0xAE,0x0F,0x1D,0xF0,0xE2,0x21,0x33,0xEF,0xF2,0x4E,0x57,0x48,0x72,0x96};

  SetUserQuotaRequest(const SetUserQuotaRequest&);
  SetUserQuotaRequest& operator=(const SetUserQuotaRequest&);
  SetUserQuotaRequest() : developerId() {
  }

  virtual ~SetUserQuotaRequest() throw();
  std::string developerId;
  UserQuota userQuota;

  void __set_developerId(const std::string& val);

  void __set_userQuota(const UserQuota& val);

  bool operator == (const SetUserQuotaRequest & rhs) const
  {
    if (!(developerId == rhs.developerId))
      return false;
    if (!(userQuota == rhs.userQuota))
      return false;
    return true;
  }
  bool operator != (const SetUserQuotaRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetUserQuotaRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SetUserQuotaRequest& obj);
};

void swap(SetUserQuotaRequest &a, SetUserQuotaRequest &b);

typedef struct _GetUserQuotaRequest__isset {
  _GetUserQuotaRequest__isset() : developerId(false) {}
  bool developerId :1;
} _GetUserQuotaRequest__isset;

class GetUserQuotaRequest {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  GetUserQuotaRequest(const GetUserQuotaRequest&);
  GetUserQuotaRequest& operator=(const GetUserQuotaRequest&);
  GetUserQuotaRequest() : developerId() {
  }

  virtual ~GetUserQuotaRequest() throw();
  std::string developerId;

  _GetUserQuotaRequest__isset __isset;

  void __set_developerId(const std::string& val);

  bool operator == (const GetUserQuotaRequest & rhs) const
  {
    if (__isset.developerId != rhs.__isset.developerId)
      return false;
    else if (__isset.developerId && !(developerId == rhs.developerId))
      return false;
    return true;
  }
  bool operator != (const GetUserQuotaRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetUserQuotaRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetUserQuotaRequest& obj);
};

void swap(GetUserQuotaRequest &a, GetUserQuotaRequest &b);


class GetUserQuotaResponse {
 public:

  static const char* ascii_fingerprint; // = "3BCCAE0F1DF0E22133EFF24E57487296";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0xCC,0xAE,0x0F,0x1D,0xF0,0xE2,0x21,0x33,0xEF,0xF2,0x4E,0x57,0x48,0x72,0x96};

  GetUserQuotaResponse(const GetUserQuotaResponse&);
  GetUserQuotaResponse& operator=(const GetUserQuotaResponse&);
  GetUserQuotaResponse() : developerId() {
  }

  virtual ~GetUserQuotaResponse() throw();
  std::string developerId;
  UserQuota userQuota;

  void __set_developerId(const std::string& val);

  void __set_userQuota(const UserQuota& val);

  bool operator == (const GetUserQuotaResponse & rhs) const
  {
    if (!(developerId == rhs.developerId))
      return false;
    if (!(userQuota == rhs.userQuota))
      return false;
    return true;
  }
  bool operator != (const GetUserQuotaResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetUserQuotaResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetUserQuotaResponse& obj);
};

void swap(GetUserQuotaResponse &a, GetUserQuotaResponse &b);

typedef struct _GetUserUsedQuotaRequest__isset {
  _GetUserUsedQuotaRequest__isset() : developerId(false) {}
  bool developerId :1;
} _GetUserUsedQuotaRequest__isset;

class GetUserUsedQuotaRequest {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  GetUserUsedQuotaRequest(const GetUserUsedQuotaRequest&);
  GetUserUsedQuotaRequest& operator=(const GetUserUsedQuotaRequest&);
  GetUserUsedQuotaRequest() : developerId() {
  }

  virtual ~GetUserUsedQuotaRequest() throw();
  std::string developerId;

  _GetUserUsedQuotaRequest__isset __isset;

  void __set_developerId(const std::string& val);

  bool operator == (const GetUserUsedQuotaRequest & rhs) const
  {
    if (__isset.developerId != rhs.__isset.developerId)
      return false;
    else if (__isset.developerId && !(developerId == rhs.developerId))
      return false;
    return true;
  }
  bool operator != (const GetUserUsedQuotaRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetUserUsedQuotaRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetUserUsedQuotaRequest& obj);
};

void swap(GetUserUsedQuotaRequest &a, GetUserUsedQuotaRequest &b);

typedef struct _SetUserInfoRequest__isset {
  _SetUserInfoRequest__isset() : developerId(false), userName(false), email(false), sms(false) {}
  bool developerId :1;
  bool userName :1;
  bool email :1;
  bool sms :1;
} _SetUserInfoRequest__isset;

class SetUserInfoRequest {
 public:

  static const char* ascii_fingerprint; // = "7F96769A10DED7E9839D38968220F75A";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0x96,0x76,0x9A,0x10,0xDE,0xD7,0xE9,0x83,0x9D,0x38,0x96,0x82,0x20,0xF7,0x5A};

  SetUserInfoRequest(const SetUserInfoRequest&);
  SetUserInfoRequest& operator=(const SetUserInfoRequest&);
  SetUserInfoRequest() : developerId(), userName(), email(), sms() {
  }

  virtual ~SetUserInfoRequest() throw();
  std::string developerId;
  std::string userName;
  std::string email;
  std::string sms;

  _SetUserInfoRequest__isset __isset;

  void __set_developerId(const std::string& val);

  void __set_userName(const std::string& val);

  void __set_email(const std::string& val);

  void __set_sms(const std::string& val);

  bool operator == (const SetUserInfoRequest & rhs) const
  {
    if (__isset.developerId != rhs.__isset.developerId)
      return false;
    else if (__isset.developerId && !(developerId == rhs.developerId))
      return false;
    if (__isset.userName != rhs.__isset.userName)
      return false;
    else if (__isset.userName && !(userName == rhs.userName))
      return false;
    if (__isset.email != rhs.__isset.email)
      return false;
    else if (__isset.email && !(email == rhs.email))
      return false;
    if (__isset.sms != rhs.__isset.sms)
      return false;
    else if (__isset.sms && !(sms == rhs.sms))
      return false;
    return true;
  }
  bool operator != (const SetUserInfoRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetUserInfoRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SetUserInfoRequest& obj);
};

void swap(SetUserInfoRequest &a, SetUserInfoRequest &b);

typedef struct _GetUserInfoRequest__isset {
  _GetUserInfoRequest__isset() : developerId(false) {}
  bool developerId :1;
} _GetUserInfoRequest__isset;

class GetUserInfoRequest {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  GetUserInfoRequest(const GetUserInfoRequest&);
  GetUserInfoRequest& operator=(const GetUserInfoRequest&);
  GetUserInfoRequest() : developerId() {
  }

  virtual ~GetUserInfoRequest() throw();
  std::string developerId;

  _GetUserInfoRequest__isset __isset;

  void __set_developerId(const std::string& val);

  bool operator == (const GetUserInfoRequest & rhs) const
  {
    if (__isset.developerId != rhs.__isset.developerId)
      return false;
    else if (__isset.developerId && !(developerId == rhs.developerId))
      return false;
    return true;
  }
  bool operator != (const GetUserInfoRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetUserInfoRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetUserInfoRequest& obj);
};

void swap(GetUserInfoRequest &a, GetUserInfoRequest &b);

typedef struct _GetUserInfoResponse__isset {
  _GetUserInfoResponse__isset() : userName(false), email(false), sms(false) {}
  bool userName :1;
  bool email :1;
  bool sms :1;
} _GetUserInfoResponse__isset;

class GetUserInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "6BA700CA2E5FC52A8DA5ADCF811DC8DA";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0xA7,0x00,0xCA,0x2E,0x5F,0xC5,0x2A,0x8D,0xA5,0xAD,0xCF,0x81,0x1D,0xC8,0xDA};

  GetUserInfoResponse(const GetUserInfoResponse&);
  GetUserInfoResponse& operator=(const GetUserInfoResponse&);
  GetUserInfoResponse() : developerId(), userName(), email(), sms() {
  }

  virtual ~GetUserInfoResponse() throw();
  std::string developerId;
  std::string userName;
  std::string email;
  std::string sms;

  _GetUserInfoResponse__isset __isset;

  void __set_developerId(const std::string& val);

  void __set_userName(const std::string& val);

  void __set_email(const std::string& val);

  void __set_sms(const std::string& val);

  bool operator == (const GetUserInfoResponse & rhs) const
  {
    if (!(developerId == rhs.developerId))
      return false;
    if (__isset.userName != rhs.__isset.userName)
      return false;
    else if (__isset.userName && !(userName == rhs.userName))
      return false;
    if (__isset.email != rhs.__isset.email)
      return false;
    else if (__isset.email && !(email == rhs.email))
      return false;
    if (__isset.sms != rhs.__isset.sms)
      return false;
    else if (__isset.sms && !(sms == rhs.sms))
      return false;
    return true;
  }
  bool operator != (const GetUserInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetUserInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetUserInfoResponse& obj);
};

void swap(GetUserInfoResponse &a, GetUserInfoResponse &b);

typedef struct _AlertPolicy__isset {
  _AlertPolicy__isset() : threshold(false) {}
  bool threshold :1;
} _AlertPolicy__isset;

class AlertPolicy {
 public:

  static const char* ascii_fingerprint; // = "EDABF4344F13686F552E82EB23B25CB4";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0xAB,0xF4,0x34,0x4F,0x13,0x68,0x6F,0x55,0x2E,0x82,0xEB,0x23,0xB2,0x5C,0xB4};

  AlertPolicy(const AlertPolicy&);
  AlertPolicy& operator=(const AlertPolicy&);
  AlertPolicy() : type((ALERT_TYPE::type)0), measurement((MEASUREMENT::type)0), threshold(0) {
  }

  virtual ~AlertPolicy() throw();
  ALERT_TYPE::type type;
  MEASUREMENT::type measurement;
  double threshold;

  _AlertPolicy__isset __isset;

  void __set_type(const ALERT_TYPE::type val);

  void __set_measurement(const MEASUREMENT::type val);

  void __set_threshold(const double val);

  bool operator == (const AlertPolicy & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(measurement == rhs.measurement))
      return false;
    if (__isset.threshold != rhs.__isset.threshold)
      return false;
    else if (__isset.threshold && !(threshold == rhs.threshold))
      return false;
    return true;
  }
  bool operator != (const AlertPolicy &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlertPolicy & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AlertPolicy& obj);
};

void swap(AlertPolicy &a, AlertPolicy &b);


class AddQueueAlertPolicyRequest {
 public:

  static const char* ascii_fingerprint; // = "DA15389740368E74ADDCB1FFC7913A0B";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0x15,0x38,0x97,0x40,0x36,0x8E,0x74,0xAD,0xDC,0xB1,0xFF,0xC7,0x91,0x3A,0x0B};

  AddQueueAlertPolicyRequest(const AddQueueAlertPolicyRequest&);
  AddQueueAlertPolicyRequest& operator=(const AddQueueAlertPolicyRequest&);
  AddQueueAlertPolicyRequest() : queueName() {
  }

  virtual ~AddQueueAlertPolicyRequest() throw();
  std::string queueName;
  AlertPolicy alertPolicy;

  void __set_queueName(const std::string& val);

  void __set_alertPolicy(const AlertPolicy& val);

  bool operator == (const AddQueueAlertPolicyRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(alertPolicy == rhs.alertPolicy))
      return false;
    return true;
  }
  bool operator != (const AddQueueAlertPolicyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddQueueAlertPolicyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AddQueueAlertPolicyRequest& obj);
};

void swap(AddQueueAlertPolicyRequest &a, AddQueueAlertPolicyRequest &b);

typedef struct _AddTagAlertPolicyRequest__isset {
  _AddTagAlertPolicyRequest__isset() : tagName(false) {}
  bool tagName :1;
} _AddTagAlertPolicyRequest__isset;

class AddTagAlertPolicyRequest {
 public:

  static const char* ascii_fingerprint; // = "C90CF61D96A5CBF437AE3E217046FCCB";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x0C,0xF6,0x1D,0x96,0xA5,0xCB,0xF4,0x37,0xAE,0x3E,0x21,0x70,0x46,0xFC,0xCB};

  AddTagAlertPolicyRequest(const AddTagAlertPolicyRequest&);
  AddTagAlertPolicyRequest& operator=(const AddTagAlertPolicyRequest&);
  AddTagAlertPolicyRequest() : queueName(), tagName() {
  }

  virtual ~AddTagAlertPolicyRequest() throw();
  std::string queueName;
  std::string tagName;
  AlertPolicy alertPolicy;

  _AddTagAlertPolicyRequest__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_tagName(const std::string& val);

  void __set_alertPolicy(const AlertPolicy& val);

  bool operator == (const AddTagAlertPolicyRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (__isset.tagName != rhs.__isset.tagName)
      return false;
    else if (__isset.tagName && !(tagName == rhs.tagName))
      return false;
    if (!(alertPolicy == rhs.alertPolicy))
      return false;
    return true;
  }
  bool operator != (const AddTagAlertPolicyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddTagAlertPolicyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AddTagAlertPolicyRequest& obj);
};

void swap(AddTagAlertPolicyRequest &a, AddTagAlertPolicyRequest &b);


class DeleteQueueAlertPolicyRequest {
 public:

  static const char* ascii_fingerprint; // = "DA15389740368E74ADDCB1FFC7913A0B";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0x15,0x38,0x97,0x40,0x36,0x8E,0x74,0xAD,0xDC,0xB1,0xFF,0xC7,0x91,0x3A,0x0B};

  DeleteQueueAlertPolicyRequest(const DeleteQueueAlertPolicyRequest&);
  DeleteQueueAlertPolicyRequest& operator=(const DeleteQueueAlertPolicyRequest&);
  DeleteQueueAlertPolicyRequest() : queueName() {
  }

  virtual ~DeleteQueueAlertPolicyRequest() throw();
  std::string queueName;
  AlertPolicy alertPolicy;

  void __set_queueName(const std::string& val);

  void __set_alertPolicy(const AlertPolicy& val);

  bool operator == (const DeleteQueueAlertPolicyRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(alertPolicy == rhs.alertPolicy))
      return false;
    return true;
  }
  bool operator != (const DeleteQueueAlertPolicyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteQueueAlertPolicyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeleteQueueAlertPolicyRequest& obj);
};

void swap(DeleteQueueAlertPolicyRequest &a, DeleteQueueAlertPolicyRequest &b);

typedef struct _DeleteTagAlertPolicyRequest__isset {
  _DeleteTagAlertPolicyRequest__isset() : tagName(false) {}
  bool tagName :1;
} _DeleteTagAlertPolicyRequest__isset;

class DeleteTagAlertPolicyRequest {
 public:

  static const char* ascii_fingerprint; // = "C90CF61D96A5CBF437AE3E217046FCCB";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x0C,0xF6,0x1D,0x96,0xA5,0xCB,0xF4,0x37,0xAE,0x3E,0x21,0x70,0x46,0xFC,0xCB};

  DeleteTagAlertPolicyRequest(const DeleteTagAlertPolicyRequest&);
  DeleteTagAlertPolicyRequest& operator=(const DeleteTagAlertPolicyRequest&);
  DeleteTagAlertPolicyRequest() : queueName(), tagName() {
  }

  virtual ~DeleteTagAlertPolicyRequest() throw();
  std::string queueName;
  std::string tagName;
  AlertPolicy alertPolicy;

  _DeleteTagAlertPolicyRequest__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_tagName(const std::string& val);

  void __set_alertPolicy(const AlertPolicy& val);

  bool operator == (const DeleteTagAlertPolicyRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (__isset.tagName != rhs.__isset.tagName)
      return false;
    else if (__isset.tagName && !(tagName == rhs.tagName))
      return false;
    if (!(alertPolicy == rhs.alertPolicy))
      return false;
    return true;
  }
  bool operator != (const DeleteTagAlertPolicyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteTagAlertPolicyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeleteTagAlertPolicyRequest& obj);
};

void swap(DeleteTagAlertPolicyRequest &a, DeleteTagAlertPolicyRequest &b);


class ListQueueAlertPoliciesRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ListQueueAlertPoliciesRequest(const ListQueueAlertPoliciesRequest&);
  ListQueueAlertPoliciesRequest& operator=(const ListQueueAlertPoliciesRequest&);
  ListQueueAlertPoliciesRequest() : queueName() {
  }

  virtual ~ListQueueAlertPoliciesRequest() throw();
  std::string queueName;

  void __set_queueName(const std::string& val);

  bool operator == (const ListQueueAlertPoliciesRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const ListQueueAlertPoliciesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListQueueAlertPoliciesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ListQueueAlertPoliciesRequest& obj);
};

void swap(ListQueueAlertPoliciesRequest &a, ListQueueAlertPoliciesRequest &b);

typedef struct _ListTagAlertPoliciesRequest__isset {
  _ListTagAlertPoliciesRequest__isset() : tagName(false) {}
  bool tagName :1;
} _ListTagAlertPoliciesRequest__isset;

class ListTagAlertPoliciesRequest {
 public:

  static const char* ascii_fingerprint; // = "5B708A954C550ECA9C1A49D3C5CAFAB9";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

  ListTagAlertPoliciesRequest(const ListTagAlertPoliciesRequest&);
  ListTagAlertPoliciesRequest& operator=(const ListTagAlertPoliciesRequest&);
  ListTagAlertPoliciesRequest() : queueName(), tagName() {
  }

  virtual ~ListTagAlertPoliciesRequest() throw();
  std::string queueName;
  std::string tagName;

  _ListTagAlertPoliciesRequest__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_tagName(const std::string& val);

  bool operator == (const ListTagAlertPoliciesRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (__isset.tagName != rhs.__isset.tagName)
      return false;
    else if (__isset.tagName && !(tagName == rhs.tagName))
      return false;
    return true;
  }
  bool operator != (const ListTagAlertPoliciesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListTagAlertPoliciesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ListTagAlertPoliciesRequest& obj);
};

void swap(ListTagAlertPoliciesRequest &a, ListTagAlertPoliciesRequest &b);


class ListQueueAlertPoliciesResponse {
 public:

  static const char* ascii_fingerprint; // = "F1A17D3AF39EBA746EE167BB954BC653";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0xA1,0x7D,0x3A,0xF3,0x9E,0xBA,0x74,0x6E,0xE1,0x67,0xBB,0x95,0x4B,0xC6,0x53};

  ListQueueAlertPoliciesResponse(const ListQueueAlertPoliciesResponse&);
  ListQueueAlertPoliciesResponse& operator=(const ListQueueAlertPoliciesResponse&);
  ListQueueAlertPoliciesResponse() : queueName() {
  }

  virtual ~ListQueueAlertPoliciesResponse() throw();
  std::string queueName;
  std::vector<AlertPolicy>  alertPolicies;

  void __set_queueName(const std::string& val);

  void __set_alertPolicies(const std::vector<AlertPolicy> & val);

  bool operator == (const ListQueueAlertPoliciesResponse & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(alertPolicies == rhs.alertPolicies))
      return false;
    return true;
  }
  bool operator != (const ListQueueAlertPoliciesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListQueueAlertPoliciesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ListQueueAlertPoliciesResponse& obj);
};

void swap(ListQueueAlertPoliciesResponse &a, ListQueueAlertPoliciesResponse &b);

typedef struct _ListTagAlertPoliciesResponse__isset {
  _ListTagAlertPoliciesResponse__isset() : tagName(false) {}
  bool tagName :1;
} _ListTagAlertPoliciesResponse__isset;

class ListTagAlertPoliciesResponse {
 public:

  static const char* ascii_fingerprint; // = "5DAFDD7273B44E4371DCB6C8F2F01148";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xAF,0xDD,0x72,0x73,0xB4,0x4E,0x43,0x71,0xDC,0xB6,0xC8,0xF2,0xF0,0x11,0x48};

  ListTagAlertPoliciesResponse(const ListTagAlertPoliciesResponse&);
  ListTagAlertPoliciesResponse& operator=(const ListTagAlertPoliciesResponse&);
  ListTagAlertPoliciesResponse() : queueName(), tagName() {
  }

  virtual ~ListTagAlertPoliciesResponse() throw();
  std::string queueName;
  std::string tagName;
  std::vector<AlertPolicy>  alertPolicies;

  _ListTagAlertPoliciesResponse__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_tagName(const std::string& val);

  void __set_alertPolicies(const std::vector<AlertPolicy> & val);

  bool operator == (const ListTagAlertPoliciesResponse & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (__isset.tagName != rhs.__isset.tagName)
      return false;
    else if (__isset.tagName && !(tagName == rhs.tagName))
      return false;
    if (!(alertPolicies == rhs.alertPolicies))
      return false;
    return true;
  }
  bool operator != (const ListTagAlertPoliciesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListTagAlertPoliciesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ListTagAlertPoliciesResponse& obj);
};

void swap(ListTagAlertPoliciesResponse &a, ListTagAlertPoliciesResponse &b);


class SetQueueDailyStatisticsStateRequest {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

  SetQueueDailyStatisticsStateRequest(const SetQueueDailyStatisticsStateRequest&);
  SetQueueDailyStatisticsStateRequest& operator=(const SetQueueDailyStatisticsStateRequest&);
  SetQueueDailyStatisticsStateRequest() : queueName(), enabled(0) {
  }

  virtual ~SetQueueDailyStatisticsStateRequest() throw();
  std::string queueName;
  bool enabled;

  void __set_queueName(const std::string& val);

  void __set_enabled(const bool val);

  bool operator == (const SetQueueDailyStatisticsStateRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(enabled == rhs.enabled))
      return false;
    return true;
  }
  bool operator != (const SetQueueDailyStatisticsStateRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetQueueDailyStatisticsStateRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SetQueueDailyStatisticsStateRequest& obj);
};

void swap(SetQueueDailyStatisticsStateRequest &a, SetQueueDailyStatisticsStateRequest &b);


class GetQueueDailyStatisticsStateRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  GetQueueDailyStatisticsStateRequest(const GetQueueDailyStatisticsStateRequest&);
  GetQueueDailyStatisticsStateRequest& operator=(const GetQueueDailyStatisticsStateRequest&);
  GetQueueDailyStatisticsStateRequest() : queueName() {
  }

  virtual ~GetQueueDailyStatisticsStateRequest() throw();
  std::string queueName;

  void __set_queueName(const std::string& val);

  bool operator == (const GetQueueDailyStatisticsStateRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const GetQueueDailyStatisticsStateRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetQueueDailyStatisticsStateRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetQueueDailyStatisticsStateRequest& obj);
};

void swap(GetQueueDailyStatisticsStateRequest &a, GetQueueDailyStatisticsStateRequest &b);


class GetQueueDailyStatisticsStateResponse {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

  GetQueueDailyStatisticsStateResponse(const GetQueueDailyStatisticsStateResponse&);
  GetQueueDailyStatisticsStateResponse& operator=(const GetQueueDailyStatisticsStateResponse&);
  GetQueueDailyStatisticsStateResponse() : queueName(), enabled(0) {
  }

  virtual ~GetQueueDailyStatisticsStateResponse() throw();
  std::string queueName;
  bool enabled;

  void __set_queueName(const std::string& val);

  void __set_enabled(const bool val);

  bool operator == (const GetQueueDailyStatisticsStateResponse & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(enabled == rhs.enabled))
      return false;
    return true;
  }
  bool operator != (const GetQueueDailyStatisticsStateResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetQueueDailyStatisticsStateResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetQueueDailyStatisticsStateResponse& obj);
};

void swap(GetQueueDailyStatisticsStateResponse &a, GetQueueDailyStatisticsStateResponse &b);

}} // namespace

#endif
