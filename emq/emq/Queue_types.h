#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Queue_TYPES_H
#define Queue_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Common_types.h"
#include "Message_types.h"


namespace emq { namespace queue {

struct Permission {
  enum type {
    NONE = 0,
    SEND_MESSAGE = 1,
    RECEIVE_MESSAGE = 2,
    SEND_RECEIVE_MESSAGE = 3,
    HANDLE_MESSAGE = 4,
    SEND_HANDLE_MESSAGE = 5,
    GET_QUEUE_INFO = 6,
    USE_QUEUE = 7,
    ADMIN_QUEUE = 8,
    PEEK_MESSAGE = 9,
    DELETE_PEEK_MESSAGE = 10,
    FULL_CONTROL = 11
  };
};

extern const std::map<int, const char*> _Permission_VALUES_TO_NAMES;

struct LogicalOperator {
  enum type {
    AND = 0,
    OR = 1
  };
};

extern const std::map<int, const char*> _LogicalOperator_VALUES_TO_NAMES;

class QueueAttribute;

class QueueState;

class Throughput;

class QueueQuota;

class RedrivePolicy;

class CreateQueueRequest;

class CreateQueueResponse;

class DeleteQueueRequest;

class PurgeQueueRequest;

class SetQueueAttributesRequest;

class SetQueueAttributesResponse;

class SetQueueQuotaRequest;

class SetQueueQuotaResponse;

class GetQueueInfoRequest;

class GetQueueInfoResponse;

class SetQueueRedrivePolicyRequest;

class SetQueueRedrivePolicyResponse;

class RemoveQueueRedrivePolicyRequest;

class ListQueueRequest;

class ListQueueResponse;

class QueryPrivilegedQueueRequest;

class QueryPrivilegedQueueResponseEntry;

class QueryPrivilegedQueueResponse;

class SetPermissionRequest;

class RevokePermissionRequest;

class QueryPermissionRequest;

class QueryPermissionResponse;

class QueryPermissionForIdRequest;

class QueryPermissionForIdResponse;

class ListPermissionsRequest;

class ListPermissionsResponse;

class AttributesFilter;

class CreateTagRequest;

class CreateTagResponse;

class DeleteTagRequest;

class GetTagInfoRequest;

class GetTagInfoResponse;

class ListTagRequest;

class ListTagResponse;

class QueryMetricRequest;

class TimeSeriesData;

class VerifyEMQAdminResponse;

class VerifyEMQAdminRoleRequest;

class VerifyEMQAdminRoleResponse;

class QueueTag;

class QueueMeta;

class GetQueueMetaResponse;

class CopyQueueRequest;

typedef struct _QueueAttribute__isset {
  _QueueAttribute__isset() : delaySeconds(false), invisibilitySeconds(false), receiveMessageWaitSeconds(false), receiveMessageMaximumNumber(false), messageRetentionSeconds(false), messageMaximumBytes(false), partitionNumber(false), userAttributes(false) {}
  bool delaySeconds :1;
  bool invisibilitySeconds :1;
  bool receiveMessageWaitSeconds :1;
  bool receiveMessageMaximumNumber :1;
  bool messageRetentionSeconds :1;
  bool messageMaximumBytes :1;
  bool partitionNumber :1;
  bool userAttributes :1;
} _QueueAttribute__isset;

class QueueAttribute {
 public:

  static const char* ascii_fingerprint; // = "EB6B718E469DA022D510505529AF6B0E";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x6B,0x71,0x8E,0x46,0x9D,0xA0,0x22,0xD5,0x10,0x50,0x55,0x29,0xAF,0x6B,0x0E};

  QueueAttribute(const QueueAttribute&);
  QueueAttribute& operator=(const QueueAttribute&);
  QueueAttribute() : delaySeconds(0), invisibilitySeconds(0), receiveMessageWaitSeconds(0), receiveMessageMaximumNumber(0), messageRetentionSeconds(0), messageMaximumBytes(0), partitionNumber(0) {
  }

  virtual ~QueueAttribute() throw();
  int32_t delaySeconds;
  int32_t invisibilitySeconds;
  int32_t receiveMessageWaitSeconds;
  int32_t receiveMessageMaximumNumber;
  int32_t messageRetentionSeconds;
  int32_t messageMaximumBytes;
  int32_t partitionNumber;
  std::map<std::string, std::string>  userAttributes;

  _QueueAttribute__isset __isset;

  void __set_delaySeconds(const int32_t val);

  void __set_invisibilitySeconds(const int32_t val);

  void __set_receiveMessageWaitSeconds(const int32_t val);

  void __set_receiveMessageMaximumNumber(const int32_t val);

  void __set_messageRetentionSeconds(const int32_t val);

  void __set_messageMaximumBytes(const int32_t val);

  void __set_partitionNumber(const int32_t val);

  void __set_userAttributes(const std::map<std::string, std::string> & val);

  bool operator == (const QueueAttribute & rhs) const
  {
    if (__isset.delaySeconds != rhs.__isset.delaySeconds)
      return false;
    else if (__isset.delaySeconds && !(delaySeconds == rhs.delaySeconds))
      return false;
    if (__isset.invisibilitySeconds != rhs.__isset.invisibilitySeconds)
      return false;
    else if (__isset.invisibilitySeconds && !(invisibilitySeconds == rhs.invisibilitySeconds))
      return false;
    if (__isset.receiveMessageWaitSeconds != rhs.__isset.receiveMessageWaitSeconds)
      return false;
    else if (__isset.receiveMessageWaitSeconds && !(receiveMessageWaitSeconds == rhs.receiveMessageWaitSeconds))
      return false;
    if (__isset.receiveMessageMaximumNumber != rhs.__isset.receiveMessageMaximumNumber)
      return false;
    else if (__isset.receiveMessageMaximumNumber && !(receiveMessageMaximumNumber == rhs.receiveMessageMaximumNumber))
      return false;
    if (__isset.messageRetentionSeconds != rhs.__isset.messageRetentionSeconds)
      return false;
    else if (__isset.messageRetentionSeconds && !(messageRetentionSeconds == rhs.messageRetentionSeconds))
      return false;
    if (__isset.messageMaximumBytes != rhs.__isset.messageMaximumBytes)
      return false;
    else if (__isset.messageMaximumBytes && !(messageMaximumBytes == rhs.messageMaximumBytes))
      return false;
    if (__isset.partitionNumber != rhs.__isset.partitionNumber)
      return false;
    else if (__isset.partitionNumber && !(partitionNumber == rhs.partitionNumber))
      return false;
    if (__isset.userAttributes != rhs.__isset.userAttributes)
      return false;
    else if (__isset.userAttributes && !(userAttributes == rhs.userAttributes))
      return false;
    return true;
  }
  bool operator != (const QueueAttribute &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueAttribute & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueAttribute& obj);
};

void swap(QueueAttribute &a, QueueAttribute &b);


class QueueState {
 public:

  static const char* ascii_fingerprint; // = "BCB041239CCFE5D7E7A92C7567D1A23C";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0xB0,0x41,0x23,0x9C,0xCF,0xE5,0xD7,0xE7,0xA9,0x2C,0x75,0x67,0xD1,0xA2,0x3C};

  QueueState(const QueueState&);
  QueueState& operator=(const QueueState&);
  QueueState() : createTimestamp(0), lastModifiedTimestamp(0), approximateMessageNumber(0), approximateAvailableMessageNumber(0), approximateInvisibilityMessageNumber(0) {
  }

  virtual ~QueueState() throw();
  int64_t createTimestamp;
  int64_t lastModifiedTimestamp;
  int64_t approximateMessageNumber;
  int64_t approximateAvailableMessageNumber;
  int64_t approximateInvisibilityMessageNumber;

  void __set_createTimestamp(const int64_t val);

  void __set_lastModifiedTimestamp(const int64_t val);

  void __set_approximateMessageNumber(const int64_t val);

  void __set_approximateAvailableMessageNumber(const int64_t val);

  void __set_approximateInvisibilityMessageNumber(const int64_t val);

  bool operator == (const QueueState & rhs) const
  {
    if (!(createTimestamp == rhs.createTimestamp))
      return false;
    if (!(lastModifiedTimestamp == rhs.lastModifiedTimestamp))
      return false;
    if (!(approximateMessageNumber == rhs.approximateMessageNumber))
      return false;
    if (!(approximateAvailableMessageNumber == rhs.approximateAvailableMessageNumber))
      return false;
    if (!(approximateInvisibilityMessageNumber == rhs.approximateInvisibilityMessageNumber))
      return false;
    return true;
  }
  bool operator != (const QueueState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueState& obj);
};

void swap(QueueState &a, QueueState &b);

typedef struct _Throughput__isset {
  _Throughput__isset() : readQps(false), writeQps(false) {}
  bool readQps :1;
  bool writeQps :1;
} _Throughput__isset;

class Throughput {
 public:

  static const char* ascii_fingerprint; // = "0354D07C94CB8542872CA1277008860A";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0x54,0xD0,0x7C,0x94,0xCB,0x85,0x42,0x87,0x2C,0xA1,0x27,0x70,0x08,0x86,0x0A};

  Throughput(const Throughput&);
  Throughput& operator=(const Throughput&);
  Throughput() : readQps(0), writeQps(0) {
  }

  virtual ~Throughput() throw();
  int64_t readQps;
  int64_t writeQps;

  _Throughput__isset __isset;

  void __set_readQps(const int64_t val);

  void __set_writeQps(const int64_t val);

  bool operator == (const Throughput & rhs) const
  {
    if (__isset.readQps != rhs.__isset.readQps)
      return false;
    else if (__isset.readQps && !(readQps == rhs.readQps))
      return false;
    if (__isset.writeQps != rhs.__isset.writeQps)
      return false;
    else if (__isset.writeQps && !(writeQps == rhs.writeQps))
      return false;
    return true;
  }
  bool operator != (const Throughput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Throughput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Throughput& obj);
};

void swap(Throughput &a, Throughput &b);

typedef struct _QueueQuota__isset {
  _QueueQuota__isset() : throughput(false) {}
  bool throughput :1;
} _QueueQuota__isset;

class QueueQuota {
 public:

  static const char* ascii_fingerprint; // = "1AAAF2325C6BD82802A98815F973A26D";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0xAA,0xF2,0x32,0x5C,0x6B,0xD8,0x28,0x02,0xA9,0x88,0x15,0xF9,0x73,0xA2,0x6D};

  QueueQuota(const QueueQuota&);
  QueueQuota& operator=(const QueueQuota&);
  QueueQuota() {
  }

  virtual ~QueueQuota() throw();
  Throughput throughput;

  _QueueQuota__isset __isset;

  void __set_throughput(const Throughput& val);

  bool operator == (const QueueQuota & rhs) const
  {
    if (__isset.throughput != rhs.__isset.throughput)
      return false;
    else if (__isset.throughput && !(throughput == rhs.throughput))
      return false;
    return true;
  }
  bool operator != (const QueueQuota &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueQuota & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueQuota& obj);
};

void swap(QueueQuota &a, QueueQuota &b);


class RedrivePolicy {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  RedrivePolicy(const RedrivePolicy&);
  RedrivePolicy& operator=(const RedrivePolicy&);
  RedrivePolicy() : dlqName(), maxReceiveTime(0) {
  }

  virtual ~RedrivePolicy() throw();
  std::string dlqName;
  int32_t maxReceiveTime;

  void __set_dlqName(const std::string& val);

  void __set_maxReceiveTime(const int32_t val);

  bool operator == (const RedrivePolicy & rhs) const
  {
    if (!(dlqName == rhs.dlqName))
      return false;
    if (!(maxReceiveTime == rhs.maxReceiveTime))
      return false;
    return true;
  }
  bool operator != (const RedrivePolicy &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RedrivePolicy & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RedrivePolicy& obj);
};

void swap(RedrivePolicy &a, RedrivePolicy &b);

typedef struct _CreateQueueRequest__isset {
  _CreateQueueRequest__isset() : queueAttribute(false), queueQuota(false), deadLetterQueue(false), enablePriority(false), topicQueue(false), deleteMessageForce(true), defaultTagName(false), redrivePolicy(false) {}
  bool queueAttribute :1;
  bool queueQuota :1;
  bool deadLetterQueue :1;
  bool enablePriority :1;
  bool topicQueue :1;
  bool deleteMessageForce :1;
  bool defaultTagName :1;
  bool redrivePolicy :1;
} _CreateQueueRequest__isset;

class CreateQueueRequest {
 public:

  static const char* ascii_fingerprint; // = "B54538E825B9342B141496FB4D95CB59";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0x45,0x38,0xE8,0x25,0xB9,0x34,0x2B,0x14,0x14,0x96,0xFB,0x4D,0x95,0xCB,0x59};

  CreateQueueRequest(const CreateQueueRequest&);
  CreateQueueRequest& operator=(const CreateQueueRequest&);
  CreateQueueRequest() : queueName(), deadLetterQueue(0), enablePriority(0), topicQueue(0), deleteMessageForce(true), defaultTagName() {
  }

  virtual ~CreateQueueRequest() throw();
  std::string queueName;
  QueueAttribute queueAttribute;
  QueueQuota queueQuota;
  bool deadLetterQueue;
  bool enablePriority;
  bool topicQueue;
  bool deleteMessageForce;
  std::string defaultTagName;
  RedrivePolicy redrivePolicy;

  _CreateQueueRequest__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_queueAttribute(const QueueAttribute& val);

  void __set_queueQuota(const QueueQuota& val);

  void __set_deadLetterQueue(const bool val);

  void __set_enablePriority(const bool val);

  void __set_topicQueue(const bool val);

  void __set_deleteMessageForce(const bool val);

  void __set_defaultTagName(const std::string& val);

  void __set_redrivePolicy(const RedrivePolicy& val);

  bool operator == (const CreateQueueRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (__isset.queueAttribute != rhs.__isset.queueAttribute)
      return false;
    else if (__isset.queueAttribute && !(queueAttribute == rhs.queueAttribute))
      return false;
    if (__isset.queueQuota != rhs.__isset.queueQuota)
      return false;
    else if (__isset.queueQuota && !(queueQuota == rhs.queueQuota))
      return false;
    if (__isset.deadLetterQueue != rhs.__isset.deadLetterQueue)
      return false;
    else if (__isset.deadLetterQueue && !(deadLetterQueue == rhs.deadLetterQueue))
      return false;
    if (__isset.enablePriority != rhs.__isset.enablePriority)
      return false;
    else if (__isset.enablePriority && !(enablePriority == rhs.enablePriority))
      return false;
    if (__isset.topicQueue != rhs.__isset.topicQueue)
      return false;
    else if (__isset.topicQueue && !(topicQueue == rhs.topicQueue))
      return false;
    if (__isset.deleteMessageForce != rhs.__isset.deleteMessageForce)
      return false;
    else if (__isset.deleteMessageForce && !(deleteMessageForce == rhs.deleteMessageForce))
      return false;
    if (__isset.defaultTagName != rhs.__isset.defaultTagName)
      return false;
    else if (__isset.defaultTagName && !(defaultTagName == rhs.defaultTagName))
      return false;
    if (__isset.redrivePolicy != rhs.__isset.redrivePolicy)
      return false;
    else if (__isset.redrivePolicy && !(redrivePolicy == rhs.redrivePolicy))
      return false;
    return true;
  }
  bool operator != (const CreateQueueRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateQueueRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateQueueRequest& obj);
};

void swap(CreateQueueRequest &a, CreateQueueRequest &b);

typedef struct _CreateQueueResponse__isset {
  _CreateQueueResponse__isset() : queueQuota(false), deadLetterQueue(false), enablePriority(false), topicQueue(false), deleteMessageForce(false), defaultTagName(false), redrivePolicy(false) {}
  bool queueQuota :1;
  bool deadLetterQueue :1;
  bool enablePriority :1;
  bool topicQueue :1;
  bool deleteMessageForce :1;
  bool defaultTagName :1;
  bool redrivePolicy :1;
} _CreateQueueResponse__isset;

class CreateQueueResponse {
 public:

  static const char* ascii_fingerprint; // = "52AAEF8D94141ADAAD00A7A2C29642D7";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0xAA,0xEF,0x8D,0x94,0x14,0x1A,0xDA,0xAD,0x00,0xA7,0xA2,0xC2,0x96,0x42,0xD7};

  CreateQueueResponse(const CreateQueueResponse&);
  CreateQueueResponse& operator=(const CreateQueueResponse&);
  CreateQueueResponse() : queueName(), deadLetterQueue(0), enablePriority(0), topicQueue(0), deleteMessageForce(0), defaultTagName() {
  }

  virtual ~CreateQueueResponse() throw();
  std::string queueName;
  QueueAttribute queueAttribute;
  QueueQuota queueQuota;
  bool deadLetterQueue;
  bool enablePriority;
  bool topicQueue;
  bool deleteMessageForce;
  std::string defaultTagName;
  RedrivePolicy redrivePolicy;

  _CreateQueueResponse__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_queueAttribute(const QueueAttribute& val);

  void __set_queueQuota(const QueueQuota& val);

  void __set_deadLetterQueue(const bool val);

  void __set_enablePriority(const bool val);

  void __set_topicQueue(const bool val);

  void __set_deleteMessageForce(const bool val);

  void __set_defaultTagName(const std::string& val);

  void __set_redrivePolicy(const RedrivePolicy& val);

  bool operator == (const CreateQueueResponse & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(queueAttribute == rhs.queueAttribute))
      return false;
    if (__isset.queueQuota != rhs.__isset.queueQuota)
      return false;
    else if (__isset.queueQuota && !(queueQuota == rhs.queueQuota))
      return false;
    if (__isset.deadLetterQueue != rhs.__isset.deadLetterQueue)
      return false;
    else if (__isset.deadLetterQueue && !(deadLetterQueue == rhs.deadLetterQueue))
      return false;
    if (__isset.enablePriority != rhs.__isset.enablePriority)
      return false;
    else if (__isset.enablePriority && !(enablePriority == rhs.enablePriority))
      return false;
    if (__isset.topicQueue != rhs.__isset.topicQueue)
      return false;
    else if (__isset.topicQueue && !(topicQueue == rhs.topicQueue))
      return false;
    if (__isset.deleteMessageForce != rhs.__isset.deleteMessageForce)
      return false;
    else if (__isset.deleteMessageForce && !(deleteMessageForce == rhs.deleteMessageForce))
      return false;
    if (__isset.defaultTagName != rhs.__isset.defaultTagName)
      return false;
    else if (__isset.defaultTagName && !(defaultTagName == rhs.defaultTagName))
      return false;
    if (__isset.redrivePolicy != rhs.__isset.redrivePolicy)
      return false;
    else if (__isset.redrivePolicy && !(redrivePolicy == rhs.redrivePolicy))
      return false;
    return true;
  }
  bool operator != (const CreateQueueResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateQueueResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateQueueResponse& obj);
};

void swap(CreateQueueResponse &a, CreateQueueResponse &b);


class DeleteQueueRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  DeleteQueueRequest(const DeleteQueueRequest&);
  DeleteQueueRequest& operator=(const DeleteQueueRequest&);
  DeleteQueueRequest() : queueName() {
  }

  virtual ~DeleteQueueRequest() throw();
  std::string queueName;

  void __set_queueName(const std::string& val);

  bool operator == (const DeleteQueueRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const DeleteQueueRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteQueueRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeleteQueueRequest& obj);
};

void swap(DeleteQueueRequest &a, DeleteQueueRequest &b);


class PurgeQueueRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  PurgeQueueRequest(const PurgeQueueRequest&);
  PurgeQueueRequest& operator=(const PurgeQueueRequest&);
  PurgeQueueRequest() : queueName() {
  }

  virtual ~PurgeQueueRequest() throw();
  std::string queueName;

  void __set_queueName(const std::string& val);

  bool operator == (const PurgeQueueRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const PurgeQueueRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PurgeQueueRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PurgeQueueRequest& obj);
};

void swap(PurgeQueueRequest &a, PurgeQueueRequest &b);

typedef struct _SetQueueAttributesRequest__isset {
  _SetQueueAttributesRequest__isset() : queueAttribute(false) {}
  bool queueAttribute :1;
} _SetQueueAttributesRequest__isset;

class SetQueueAttributesRequest {
 public:

  static const char* ascii_fingerprint; // = "C8E36B95EF63F65F277F0448CCA51641";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0xE3,0x6B,0x95,0xEF,0x63,0xF6,0x5F,0x27,0x7F,0x04,0x48,0xCC,0xA5,0x16,0x41};

  SetQueueAttributesRequest(const SetQueueAttributesRequest&);
  SetQueueAttributesRequest& operator=(const SetQueueAttributesRequest&);
  SetQueueAttributesRequest() : queueName() {
  }

  virtual ~SetQueueAttributesRequest() throw();
  std::string queueName;
  QueueAttribute queueAttribute;

  _SetQueueAttributesRequest__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_queueAttribute(const QueueAttribute& val);

  bool operator == (const SetQueueAttributesRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (__isset.queueAttribute != rhs.__isset.queueAttribute)
      return false;
    else if (__isset.queueAttribute && !(queueAttribute == rhs.queueAttribute))
      return false;
    return true;
  }
  bool operator != (const SetQueueAttributesRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetQueueAttributesRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SetQueueAttributesRequest& obj);
};

void swap(SetQueueAttributesRequest &a, SetQueueAttributesRequest &b);


class SetQueueAttributesResponse {
 public:

  static const char* ascii_fingerprint; // = "5BCA56CB1583F97B95297BE21187BE74";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0xCA,0x56,0xCB,0x15,0x83,0xF9,0x7B,0x95,0x29,0x7B,0xE2,0x11,0x87,0xBE,0x74};

  SetQueueAttributesResponse(const SetQueueAttributesResponse&);
  SetQueueAttributesResponse& operator=(const SetQueueAttributesResponse&);
  SetQueueAttributesResponse() : queueName() {
  }

  virtual ~SetQueueAttributesResponse() throw();
  std::string queueName;
  QueueAttribute queueAttribute;

  void __set_queueName(const std::string& val);

  void __set_queueAttribute(const QueueAttribute& val);

  bool operator == (const SetQueueAttributesResponse & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(queueAttribute == rhs.queueAttribute))
      return false;
    return true;
  }
  bool operator != (const SetQueueAttributesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetQueueAttributesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SetQueueAttributesResponse& obj);
};

void swap(SetQueueAttributesResponse &a, SetQueueAttributesResponse &b);

typedef struct _SetQueueQuotaRequest__isset {
  _SetQueueQuotaRequest__isset() : queueQuota(false) {}
  bool queueQuota :1;
} _SetQueueQuotaRequest__isset;

class SetQueueQuotaRequest {
 public:

  static const char* ascii_fingerprint; // = "8A73A101E00D11AFCF38176BA0A929BB";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0x73,0xA1,0x01,0xE0,0x0D,0x11,0xAF,0xCF,0x38,0x17,0x6B,0xA0,0xA9,0x29,0xBB};

  SetQueueQuotaRequest(const SetQueueQuotaRequest&);
  SetQueueQuotaRequest& operator=(const SetQueueQuotaRequest&);
  SetQueueQuotaRequest() : queueName() {
  }

  virtual ~SetQueueQuotaRequest() throw();
  std::string queueName;
  QueueQuota queueQuota;

  _SetQueueQuotaRequest__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_queueQuota(const QueueQuota& val);

  bool operator == (const SetQueueQuotaRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (__isset.queueQuota != rhs.__isset.queueQuota)
      return false;
    else if (__isset.queueQuota && !(queueQuota == rhs.queueQuota))
      return false;
    return true;
  }
  bool operator != (const SetQueueQuotaRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetQueueQuotaRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SetQueueQuotaRequest& obj);
};

void swap(SetQueueQuotaRequest &a, SetQueueQuotaRequest &b);

typedef struct _SetQueueQuotaResponse__isset {
  _SetQueueQuotaResponse__isset() : queueQuota(false) {}
  bool queueQuota :1;
} _SetQueueQuotaResponse__isset;

class SetQueueQuotaResponse {
 public:

  static const char* ascii_fingerprint; // = "8A73A101E00D11AFCF38176BA0A929BB";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0x73,0xA1,0x01,0xE0,0x0D,0x11,0xAF,0xCF,0x38,0x17,0x6B,0xA0,0xA9,0x29,0xBB};

  SetQueueQuotaResponse(const SetQueueQuotaResponse&);
  SetQueueQuotaResponse& operator=(const SetQueueQuotaResponse&);
  SetQueueQuotaResponse() : queueName() {
  }

  virtual ~SetQueueQuotaResponse() throw();
  std::string queueName;
  QueueQuota queueQuota;

  _SetQueueQuotaResponse__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_queueQuota(const QueueQuota& val);

  bool operator == (const SetQueueQuotaResponse & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (__isset.queueQuota != rhs.__isset.queueQuota)
      return false;
    else if (__isset.queueQuota && !(queueQuota == rhs.queueQuota))
      return false;
    return true;
  }
  bool operator != (const SetQueueQuotaResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetQueueQuotaResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SetQueueQuotaResponse& obj);
};

void swap(SetQueueQuotaResponse &a, SetQueueQuotaResponse &b);


class GetQueueInfoRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  GetQueueInfoRequest(const GetQueueInfoRequest&);
  GetQueueInfoRequest& operator=(const GetQueueInfoRequest&);
  GetQueueInfoRequest() : queueName() {
  }

  virtual ~GetQueueInfoRequest() throw();
  std::string queueName;

  void __set_queueName(const std::string& val);

  bool operator == (const GetQueueInfoRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const GetQueueInfoRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetQueueInfoRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetQueueInfoRequest& obj);
};

void swap(GetQueueInfoRequest &a, GetQueueInfoRequest &b);

typedef struct _GetQueueInfoResponse__isset {
  _GetQueueInfoResponse__isset() : queueQuota(false), isDeadLetterQueue(false), redrivePolicy(false), enablePriority(false), topicQueue(false), deleteMessageForce(false), defaultTagName(false), sourceQueues(false) {}
  bool queueQuota :1;
  bool isDeadLetterQueue :1;
  bool redrivePolicy :1;
  bool enablePriority :1;
  bool topicQueue :1;
  bool deleteMessageForce :1;
  bool defaultTagName :1;
  bool sourceQueues :1;
} _GetQueueInfoResponse__isset;

class GetQueueInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "570DE9048FD7DFC39857E0A74A0363E2";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0x0D,0xE9,0x04,0x8F,0xD7,0xDF,0xC3,0x98,0x57,0xE0,0xA7,0x4A,0x03,0x63,0xE2};

  GetQueueInfoResponse(const GetQueueInfoResponse&);
  GetQueueInfoResponse& operator=(const GetQueueInfoResponse&);
  GetQueueInfoResponse() : queueName(), isDeadLetterQueue(0), enablePriority(0), topicQueue(0), deleteMessageForce(0), defaultTagName() {
  }

  virtual ~GetQueueInfoResponse() throw();
  std::string queueName;
  QueueAttribute queueAttribute;
  QueueState queueState;
  QueueQuota queueQuota;
  bool isDeadLetterQueue;
  RedrivePolicy redrivePolicy;
  bool enablePriority;
  bool topicQueue;
  bool deleteMessageForce;
  std::string defaultTagName;
  std::vector<std::string>  sourceQueues;

  _GetQueueInfoResponse__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_queueAttribute(const QueueAttribute& val);

  void __set_queueState(const QueueState& val);

  void __set_queueQuota(const QueueQuota& val);

  void __set_isDeadLetterQueue(const bool val);

  void __set_redrivePolicy(const RedrivePolicy& val);

  void __set_enablePriority(const bool val);

  void __set_topicQueue(const bool val);

  void __set_deleteMessageForce(const bool val);

  void __set_defaultTagName(const std::string& val);

  void __set_sourceQueues(const std::vector<std::string> & val);

  bool operator == (const GetQueueInfoResponse & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(queueAttribute == rhs.queueAttribute))
      return false;
    if (!(queueState == rhs.queueState))
      return false;
    if (__isset.queueQuota != rhs.__isset.queueQuota)
      return false;
    else if (__isset.queueQuota && !(queueQuota == rhs.queueQuota))
      return false;
    if (__isset.isDeadLetterQueue != rhs.__isset.isDeadLetterQueue)
      return false;
    else if (__isset.isDeadLetterQueue && !(isDeadLetterQueue == rhs.isDeadLetterQueue))
      return false;
    if (__isset.redrivePolicy != rhs.__isset.redrivePolicy)
      return false;
    else if (__isset.redrivePolicy && !(redrivePolicy == rhs.redrivePolicy))
      return false;
    if (__isset.enablePriority != rhs.__isset.enablePriority)
      return false;
    else if (__isset.enablePriority && !(enablePriority == rhs.enablePriority))
      return false;
    if (__isset.topicQueue != rhs.__isset.topicQueue)
      return false;
    else if (__isset.topicQueue && !(topicQueue == rhs.topicQueue))
      return false;
    if (__isset.deleteMessageForce != rhs.__isset.deleteMessageForce)
      return false;
    else if (__isset.deleteMessageForce && !(deleteMessageForce == rhs.deleteMessageForce))
      return false;
    if (__isset.defaultTagName != rhs.__isset.defaultTagName)
      return false;
    else if (__isset.defaultTagName && !(defaultTagName == rhs.defaultTagName))
      return false;
    if (__isset.sourceQueues != rhs.__isset.sourceQueues)
      return false;
    else if (__isset.sourceQueues && !(sourceQueues == rhs.sourceQueues))
      return false;
    return true;
  }
  bool operator != (const GetQueueInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetQueueInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetQueueInfoResponse& obj);
};

void swap(GetQueueInfoResponse &a, GetQueueInfoResponse &b);


class SetQueueRedrivePolicyRequest {
 public:

  static const char* ascii_fingerprint; // = "8A6FE535189D3403D9FD6C98A103F76F";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0x6F,0xE5,0x35,0x18,0x9D,0x34,0x03,0xD9,0xFD,0x6C,0x98,0xA1,0x03,0xF7,0x6F};

  SetQueueRedrivePolicyRequest(const SetQueueRedrivePolicyRequest&);
  SetQueueRedrivePolicyRequest& operator=(const SetQueueRedrivePolicyRequest&);
  SetQueueRedrivePolicyRequest() : queueName() {
  }

  virtual ~SetQueueRedrivePolicyRequest() throw();
  std::string queueName;
  RedrivePolicy redrivePolicy;

  void __set_queueName(const std::string& val);

  void __set_redrivePolicy(const RedrivePolicy& val);

  bool operator == (const SetQueueRedrivePolicyRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(redrivePolicy == rhs.redrivePolicy))
      return false;
    return true;
  }
  bool operator != (const SetQueueRedrivePolicyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetQueueRedrivePolicyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SetQueueRedrivePolicyRequest& obj);
};

void swap(SetQueueRedrivePolicyRequest &a, SetQueueRedrivePolicyRequest &b);


class SetQueueRedrivePolicyResponse {
 public:

  static const char* ascii_fingerprint; // = "8A6FE535189D3403D9FD6C98A103F76F";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0x6F,0xE5,0x35,0x18,0x9D,0x34,0x03,0xD9,0xFD,0x6C,0x98,0xA1,0x03,0xF7,0x6F};

  SetQueueRedrivePolicyResponse(const SetQueueRedrivePolicyResponse&);
  SetQueueRedrivePolicyResponse& operator=(const SetQueueRedrivePolicyResponse&);
  SetQueueRedrivePolicyResponse() : queueName() {
  }

  virtual ~SetQueueRedrivePolicyResponse() throw();
  std::string queueName;
  RedrivePolicy redrivePolicy;

  void __set_queueName(const std::string& val);

  void __set_redrivePolicy(const RedrivePolicy& val);

  bool operator == (const SetQueueRedrivePolicyResponse & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(redrivePolicy == rhs.redrivePolicy))
      return false;
    return true;
  }
  bool operator != (const SetQueueRedrivePolicyResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetQueueRedrivePolicyResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SetQueueRedrivePolicyResponse& obj);
};

void swap(SetQueueRedrivePolicyResponse &a, SetQueueRedrivePolicyResponse &b);


class RemoveQueueRedrivePolicyRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  RemoveQueueRedrivePolicyRequest(const RemoveQueueRedrivePolicyRequest&);
  RemoveQueueRedrivePolicyRequest& operator=(const RemoveQueueRedrivePolicyRequest&);
  RemoveQueueRedrivePolicyRequest() : queueName() {
  }

  virtual ~RemoveQueueRedrivePolicyRequest() throw();
  std::string queueName;

  void __set_queueName(const std::string& val);

  bool operator == (const RemoveQueueRedrivePolicyRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const RemoveQueueRedrivePolicyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveQueueRedrivePolicyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RemoveQueueRedrivePolicyRequest& obj);
};

void swap(RemoveQueueRedrivePolicyRequest &a, RemoveQueueRedrivePolicyRequest &b);

typedef struct _ListQueueRequest__isset {
  _ListQueueRequest__isset() : queueNamePrefix(true) {}
  bool queueNamePrefix :1;
} _ListQueueRequest__isset;

class ListQueueRequest {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  ListQueueRequest(const ListQueueRequest&);
  ListQueueRequest& operator=(const ListQueueRequest&);
  ListQueueRequest() : queueNamePrefix("") {
  }

  virtual ~ListQueueRequest() throw();
  std::string queueNamePrefix;

  _ListQueueRequest__isset __isset;

  void __set_queueNamePrefix(const std::string& val);

  bool operator == (const ListQueueRequest & rhs) const
  {
    if (__isset.queueNamePrefix != rhs.__isset.queueNamePrefix)
      return false;
    else if (__isset.queueNamePrefix && !(queueNamePrefix == rhs.queueNamePrefix))
      return false;
    return true;
  }
  bool operator != (const ListQueueRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListQueueRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ListQueueRequest& obj);
};

void swap(ListQueueRequest &a, ListQueueRequest &b);


class ListQueueResponse {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  ListQueueResponse(const ListQueueResponse&);
  ListQueueResponse& operator=(const ListQueueResponse&);
  ListQueueResponse() {
  }

  virtual ~ListQueueResponse() throw();
  std::vector<std::string>  queueName;

  void __set_queueName(const std::vector<std::string> & val);

  bool operator == (const ListQueueResponse & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const ListQueueResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListQueueResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ListQueueResponse& obj);
};

void swap(ListQueueResponse &a, ListQueueResponse &b);

typedef struct _QueryPrivilegedQueueRequest__isset {
  _QueryPrivilegedQueueRequest__isset() : queueNamePrefix(true) {}
  bool queueNamePrefix :1;
} _QueryPrivilegedQueueRequest__isset;

class QueryPrivilegedQueueRequest {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  QueryPrivilegedQueueRequest(const QueryPrivilegedQueueRequest&);
  QueryPrivilegedQueueRequest& operator=(const QueryPrivilegedQueueRequest&);
  QueryPrivilegedQueueRequest() : queueNamePrefix("") {
  }

  virtual ~QueryPrivilegedQueueRequest() throw();
  std::string queueNamePrefix;

  _QueryPrivilegedQueueRequest__isset __isset;

  void __set_queueNamePrefix(const std::string& val);

  bool operator == (const QueryPrivilegedQueueRequest & rhs) const
  {
    if (__isset.queueNamePrefix != rhs.__isset.queueNamePrefix)
      return false;
    else if (__isset.queueNamePrefix && !(queueNamePrefix == rhs.queueNamePrefix))
      return false;
    return true;
  }
  bool operator != (const QueryPrivilegedQueueRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryPrivilegedQueueRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueryPrivilegedQueueRequest& obj);
};

void swap(QueryPrivilegedQueueRequest &a, QueryPrivilegedQueueRequest &b);


class QueryPrivilegedQueueResponseEntry {
 public:

  static const char* ascii_fingerprint; // = "01233FF45FD1A48AF6DDBF39A5D0547E";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0x23,0x3F,0xF4,0x5F,0xD1,0xA4,0x8A,0xF6,0xDD,0xBF,0x39,0xA5,0xD0,0x54,0x7E};

  QueryPrivilegedQueueResponseEntry(const QueryPrivilegedQueueResponseEntry&);
  QueryPrivilegedQueueResponseEntry& operator=(const QueryPrivilegedQueueResponseEntry&);
  QueryPrivilegedQueueResponseEntry() : queueName(), approximateMessageNumber(0), approximateAvailableMessageNumber(0), approximateInvisibilityMessageNumber(0) {
  }

  virtual ~QueryPrivilegedQueueResponseEntry() throw();
  std::string queueName;
  int64_t approximateMessageNumber;
  int64_t approximateAvailableMessageNumber;
  int64_t approximateInvisibilityMessageNumber;

  void __set_queueName(const std::string& val);

  void __set_approximateMessageNumber(const int64_t val);

  void __set_approximateAvailableMessageNumber(const int64_t val);

  void __set_approximateInvisibilityMessageNumber(const int64_t val);

  bool operator == (const QueryPrivilegedQueueResponseEntry & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(approximateMessageNumber == rhs.approximateMessageNumber))
      return false;
    if (!(approximateAvailableMessageNumber == rhs.approximateAvailableMessageNumber))
      return false;
    if (!(approximateInvisibilityMessageNumber == rhs.approximateInvisibilityMessageNumber))
      return false;
    return true;
  }
  bool operator != (const QueryPrivilegedQueueResponseEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryPrivilegedQueueResponseEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueryPrivilegedQueueResponseEntry& obj);
};

void swap(QueryPrivilegedQueueResponseEntry &a, QueryPrivilegedQueueResponseEntry &b);


class QueryPrivilegedQueueResponse {
 public:

  static const char* ascii_fingerprint; // = "0442637B87B5E23BF7E06AE1D56D1080";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x42,0x63,0x7B,0x87,0xB5,0xE2,0x3B,0xF7,0xE0,0x6A,0xE1,0xD5,0x6D,0x10,0x80};

  QueryPrivilegedQueueResponse(const QueryPrivilegedQueueResponse&);
  QueryPrivilegedQueueResponse& operator=(const QueryPrivilegedQueueResponse&);
  QueryPrivilegedQueueResponse() {
  }

  virtual ~QueryPrivilegedQueueResponse() throw();
  std::vector<QueryPrivilegedQueueResponseEntry>  queueList;

  void __set_queueList(const std::vector<QueryPrivilegedQueueResponseEntry> & val);

  bool operator == (const QueryPrivilegedQueueResponse & rhs) const
  {
    if (!(queueList == rhs.queueList))
      return false;
    return true;
  }
  bool operator != (const QueryPrivilegedQueueResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryPrivilegedQueueResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueryPrivilegedQueueResponse& obj);
};

void swap(QueryPrivilegedQueueResponse &a, QueryPrivilegedQueueResponse &b);


class SetPermissionRequest {
 public:

  static const char* ascii_fingerprint; // = "4F8ABE747D9A2DF14F7E84DDBE60D55C";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x8A,0xBE,0x74,0x7D,0x9A,0x2D,0xF1,0x4F,0x7E,0x84,0xDD,0xBE,0x60,0xD5,0x5C};

  SetPermissionRequest(const SetPermissionRequest&);
  SetPermissionRequest& operator=(const SetPermissionRequest&);
  SetPermissionRequest() : queueName(), developerId(), permission((Permission::type)0) {
  }

  virtual ~SetPermissionRequest() throw();
  std::string queueName;
  std::string developerId;
  Permission::type permission;

  void __set_queueName(const std::string& val);

  void __set_developerId(const std::string& val);

  void __set_permission(const Permission::type val);

  bool operator == (const SetPermissionRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(developerId == rhs.developerId))
      return false;
    if (!(permission == rhs.permission))
      return false;
    return true;
  }
  bool operator != (const SetPermissionRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetPermissionRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SetPermissionRequest& obj);
};

void swap(SetPermissionRequest &a, SetPermissionRequest &b);


class RevokePermissionRequest {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  RevokePermissionRequest(const RevokePermissionRequest&);
  RevokePermissionRequest& operator=(const RevokePermissionRequest&);
  RevokePermissionRequest() : queueName(), developerId() {
  }

  virtual ~RevokePermissionRequest() throw();
  std::string queueName;
  std::string developerId;

  void __set_queueName(const std::string& val);

  void __set_developerId(const std::string& val);

  bool operator == (const RevokePermissionRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(developerId == rhs.developerId))
      return false;
    return true;
  }
  bool operator != (const RevokePermissionRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RevokePermissionRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RevokePermissionRequest& obj);
};

void swap(RevokePermissionRequest &a, RevokePermissionRequest &b);


class QueryPermissionRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  QueryPermissionRequest(const QueryPermissionRequest&);
  QueryPermissionRequest& operator=(const QueryPermissionRequest&);
  QueryPermissionRequest() : queueName() {
  }

  virtual ~QueryPermissionRequest() throw();
  std::string queueName;

  void __set_queueName(const std::string& val);

  bool operator == (const QueryPermissionRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const QueryPermissionRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryPermissionRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueryPermissionRequest& obj);
};

void swap(QueryPermissionRequest &a, QueryPermissionRequest &b);


class QueryPermissionResponse {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  QueryPermissionResponse(const QueryPermissionResponse&);
  QueryPermissionResponse& operator=(const QueryPermissionResponse&);
  QueryPermissionResponse() : permission((Permission::type)0) {
  }

  virtual ~QueryPermissionResponse() throw();
  Permission::type permission;

  void __set_permission(const Permission::type val);

  bool operator == (const QueryPermissionResponse & rhs) const
  {
    if (!(permission == rhs.permission))
      return false;
    return true;
  }
  bool operator != (const QueryPermissionResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryPermissionResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueryPermissionResponse& obj);
};

void swap(QueryPermissionResponse &a, QueryPermissionResponse &b);


class QueryPermissionForIdRequest {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  QueryPermissionForIdRequest(const QueryPermissionForIdRequest&);
  QueryPermissionForIdRequest& operator=(const QueryPermissionForIdRequest&);
  QueryPermissionForIdRequest() : queueName(), developerId() {
  }

  virtual ~QueryPermissionForIdRequest() throw();
  std::string queueName;
  std::string developerId;

  void __set_queueName(const std::string& val);

  void __set_developerId(const std::string& val);

  bool operator == (const QueryPermissionForIdRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(developerId == rhs.developerId))
      return false;
    return true;
  }
  bool operator != (const QueryPermissionForIdRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryPermissionForIdRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueryPermissionForIdRequest& obj);
};

void swap(QueryPermissionForIdRequest &a, QueryPermissionForIdRequest &b);


class QueryPermissionForIdResponse {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  QueryPermissionForIdResponse(const QueryPermissionForIdResponse&);
  QueryPermissionForIdResponse& operator=(const QueryPermissionForIdResponse&);
  QueryPermissionForIdResponse() : permission((Permission::type)0) {
  }

  virtual ~QueryPermissionForIdResponse() throw();
  Permission::type permission;

  void __set_permission(const Permission::type val);

  bool operator == (const QueryPermissionForIdResponse & rhs) const
  {
    if (!(permission == rhs.permission))
      return false;
    return true;
  }
  bool operator != (const QueryPermissionForIdResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryPermissionForIdResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueryPermissionForIdResponse& obj);
};

void swap(QueryPermissionForIdResponse &a, QueryPermissionForIdResponse &b);


class ListPermissionsRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ListPermissionsRequest(const ListPermissionsRequest&);
  ListPermissionsRequest& operator=(const ListPermissionsRequest&);
  ListPermissionsRequest() : queueName() {
  }

  virtual ~ListPermissionsRequest() throw();
  std::string queueName;

  void __set_queueName(const std::string& val);

  bool operator == (const ListPermissionsRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const ListPermissionsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListPermissionsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ListPermissionsRequest& obj);
};

void swap(ListPermissionsRequest &a, ListPermissionsRequest &b);

typedef struct _ListPermissionsResponse__isset {
  _ListPermissionsResponse__isset() : permissionList(false) {}
  bool permissionList :1;
} _ListPermissionsResponse__isset;

class ListPermissionsResponse {
 public:

  static const char* ascii_fingerprint; // = "73D477D74DAA37CC52A78FF87985BD65";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0xD4,0x77,0xD7,0x4D,0xAA,0x37,0xCC,0x52,0xA7,0x8F,0xF8,0x79,0x85,0xBD,0x65};

  ListPermissionsResponse(const ListPermissionsResponse&);
  ListPermissionsResponse& operator=(const ListPermissionsResponse&);
  ListPermissionsResponse() {
  }

  virtual ~ListPermissionsResponse() throw();
  std::map<std::string, Permission::type>  permissionList;

  _ListPermissionsResponse__isset __isset;

  void __set_permissionList(const std::map<std::string, Permission::type> & val);

  bool operator == (const ListPermissionsResponse & rhs) const
  {
    if (!(permissionList == rhs.permissionList))
      return false;
    return true;
  }
  bool operator != (const ListPermissionsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListPermissionsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ListPermissionsResponse& obj);
};

void swap(ListPermissionsResponse &a, ListPermissionsResponse &b);


class AttributesFilter {
 public:

  static const char* ascii_fingerprint; // = "A13C9967A448848359F04C07CE766ADD";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0x3C,0x99,0x67,0xA4,0x48,0x84,0x83,0x59,0xF0,0x4C,0x07,0xCE,0x76,0x6A,0xDD};

  AttributesFilter(const AttributesFilter&);
  AttributesFilter& operator=(const AttributesFilter&);
  AttributesFilter() : logicalOperator((LogicalOperator::type)0) {
  }

  virtual ~AttributesFilter() throw();
  std::map<std::string,  ::emq::message::MessageAttribute>  attributes;
  LogicalOperator::type logicalOperator;

  void __set_attributes(const std::map<std::string,  ::emq::message::MessageAttribute> & val);

  void __set_logicalOperator(const LogicalOperator::type val);

  bool operator == (const AttributesFilter & rhs) const
  {
    if (!(attributes == rhs.attributes))
      return false;
    if (!(logicalOperator == rhs.logicalOperator))
      return false;
    return true;
  }
  bool operator != (const AttributesFilter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AttributesFilter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AttributesFilter& obj);
};

void swap(AttributesFilter &a, AttributesFilter &b);

typedef struct _CreateTagRequest__isset {
  _CreateTagRequest__isset() : startTimestamp(false), readQPSQuota(false), attributeName(false), attributeValue(false), userAttributes(false), attributesFilter(false) {}
  bool startTimestamp :1;
  bool readQPSQuota :1;
  bool attributeName :1;
  bool attributeValue :1;
  bool userAttributes :1;
  bool attributesFilter :1;
} _CreateTagRequest__isset;

class CreateTagRequest {
 public:

  static const char* ascii_fingerprint; // = "CF26B7CF5932C065283F30EA1ABD3D8C";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0x26,0xB7,0xCF,0x59,0x32,0xC0,0x65,0x28,0x3F,0x30,0xEA,0x1A,0xBD,0x3D,0x8C};

  CreateTagRequest(const CreateTagRequest&);
  CreateTagRequest& operator=(const CreateTagRequest&);
  CreateTagRequest() : queueName(), tagName(), startTimestamp(0), readQPSQuota(0), attributeName() {
  }

  virtual ~CreateTagRequest() throw();
  std::string queueName;
  std::string tagName;
  int64_t startTimestamp;
  int64_t readQPSQuota;
  std::string attributeName;
   ::emq::message::MessageAttribute attributeValue;
  std::map<std::string, std::string>  userAttributes;
  AttributesFilter attributesFilter;

  _CreateTagRequest__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_tagName(const std::string& val);

  void __set_startTimestamp(const int64_t val);

  void __set_readQPSQuota(const int64_t val);

  void __set_attributeName(const std::string& val);

  void __set_attributeValue(const  ::emq::message::MessageAttribute& val);

  void __set_userAttributes(const std::map<std::string, std::string> & val);

  void __set_attributesFilter(const AttributesFilter& val);

  bool operator == (const CreateTagRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(tagName == rhs.tagName))
      return false;
    if (__isset.startTimestamp != rhs.__isset.startTimestamp)
      return false;
    else if (__isset.startTimestamp && !(startTimestamp == rhs.startTimestamp))
      return false;
    if (__isset.readQPSQuota != rhs.__isset.readQPSQuota)
      return false;
    else if (__isset.readQPSQuota && !(readQPSQuota == rhs.readQPSQuota))
      return false;
    if (__isset.attributeName != rhs.__isset.attributeName)
      return false;
    else if (__isset.attributeName && !(attributeName == rhs.attributeName))
      return false;
    if (__isset.attributeValue != rhs.__isset.attributeValue)
      return false;
    else if (__isset.attributeValue && !(attributeValue == rhs.attributeValue))
      return false;
    if (__isset.userAttributes != rhs.__isset.userAttributes)
      return false;
    else if (__isset.userAttributes && !(userAttributes == rhs.userAttributes))
      return false;
    if (__isset.attributesFilter != rhs.__isset.attributesFilter)
      return false;
    else if (__isset.attributesFilter && !(attributesFilter == rhs.attributesFilter))
      return false;
    return true;
  }
  bool operator != (const CreateTagRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateTagRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateTagRequest& obj);
};

void swap(CreateTagRequest &a, CreateTagRequest &b);

typedef struct _CreateTagResponse__isset {
  _CreateTagResponse__isset() : readQPSQuota(false) {}
  bool readQPSQuota :1;
} _CreateTagResponse__isset;

class CreateTagResponse {
 public:

  static const char* ascii_fingerprint; // = "65193E50F85A313DBF87744ADE3A1FBA";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0x19,0x3E,0x50,0xF8,0x5A,0x31,0x3D,0xBF,0x87,0x74,0x4A,0xDE,0x3A,0x1F,0xBA};

  CreateTagResponse(const CreateTagResponse&);
  CreateTagResponse& operator=(const CreateTagResponse&);
  CreateTagResponse() : queueName(), tagName(), startTimestamp(0), readQPSQuota(0) {
  }

  virtual ~CreateTagResponse() throw();
  std::string queueName;
  std::string tagName;
  int64_t startTimestamp;
  int64_t readQPSQuota;

  _CreateTagResponse__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_tagName(const std::string& val);

  void __set_startTimestamp(const int64_t val);

  void __set_readQPSQuota(const int64_t val);

  bool operator == (const CreateTagResponse & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(tagName == rhs.tagName))
      return false;
    if (!(startTimestamp == rhs.startTimestamp))
      return false;
    if (__isset.readQPSQuota != rhs.__isset.readQPSQuota)
      return false;
    else if (__isset.readQPSQuota && !(readQPSQuota == rhs.readQPSQuota))
      return false;
    return true;
  }
  bool operator != (const CreateTagResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateTagResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CreateTagResponse& obj);
};

void swap(CreateTagResponse &a, CreateTagResponse &b);


class DeleteTagRequest {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  DeleteTagRequest(const DeleteTagRequest&);
  DeleteTagRequest& operator=(const DeleteTagRequest&);
  DeleteTagRequest() : queueName(), tagName() {
  }

  virtual ~DeleteTagRequest() throw();
  std::string queueName;
  std::string tagName;

  void __set_queueName(const std::string& val);

  void __set_tagName(const std::string& val);

  bool operator == (const DeleteTagRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(tagName == rhs.tagName))
      return false;
    return true;
  }
  bool operator != (const DeleteTagRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteTagRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeleteTagRequest& obj);
};

void swap(DeleteTagRequest &a, DeleteTagRequest &b);

typedef struct _GetTagInfoRequest__isset {
  _GetTagInfoRequest__isset() : tagName(false) {}
  bool tagName :1;
} _GetTagInfoRequest__isset;

class GetTagInfoRequest {
 public:

  static const char* ascii_fingerprint; // = "5B708A954C550ECA9C1A49D3C5CAFAB9";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

  GetTagInfoRequest(const GetTagInfoRequest&);
  GetTagInfoRequest& operator=(const GetTagInfoRequest&);
  GetTagInfoRequest() : queueName(), tagName() {
  }

  virtual ~GetTagInfoRequest() throw();
  std::string queueName;
  std::string tagName;

  _GetTagInfoRequest__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_tagName(const std::string& val);

  bool operator == (const GetTagInfoRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (__isset.tagName != rhs.__isset.tagName)
      return false;
    else if (__isset.tagName && !(tagName == rhs.tagName))
      return false;
    return true;
  }
  bool operator != (const GetTagInfoRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetTagInfoRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetTagInfoRequest& obj);
};

void swap(GetTagInfoRequest &a, GetTagInfoRequest &b);

typedef struct _GetTagInfoResponse__isset {
  _GetTagInfoResponse__isset() : tagName(false), readQPSQuota(false), attributeName(false), attributeValue(false), userAttributes(false), attributesFilter(false) {}
  bool tagName :1;
  bool readQPSQuota :1;
  bool attributeName :1;
  bool attributeValue :1;
  bool userAttributes :1;
  bool attributesFilter :1;
} _GetTagInfoResponse__isset;

class GetTagInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "29B66DD1039353508F488DFA5F153C35";
  static const uint8_t binary_fingerprint[16]; // = {0x29,0xB6,0x6D,0xD1,0x03,0x93,0x53,0x50,0x8F,0x48,0x8D,0xFA,0x5F,0x15,0x3C,0x35};

  GetTagInfoResponse(const GetTagInfoResponse&);
  GetTagInfoResponse& operator=(const GetTagInfoResponse&);
  GetTagInfoResponse() : queueName(), tagName(), startTimestamp(0), readQPSQuota(0), attributeName() {
  }

  virtual ~GetTagInfoResponse() throw();
  std::string queueName;
  std::string tagName;
  QueueState tagState;
  int64_t startTimestamp;
  int64_t readQPSQuota;
  std::string attributeName;
   ::emq::message::MessageAttribute attributeValue;
  std::map<std::string, std::string>  userAttributes;
  AttributesFilter attributesFilter;

  _GetTagInfoResponse__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_tagName(const std::string& val);

  void __set_tagState(const QueueState& val);

  void __set_startTimestamp(const int64_t val);

  void __set_readQPSQuota(const int64_t val);

  void __set_attributeName(const std::string& val);

  void __set_attributeValue(const  ::emq::message::MessageAttribute& val);

  void __set_userAttributes(const std::map<std::string, std::string> & val);

  void __set_attributesFilter(const AttributesFilter& val);

  bool operator == (const GetTagInfoResponse & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (__isset.tagName != rhs.__isset.tagName)
      return false;
    else if (__isset.tagName && !(tagName == rhs.tagName))
      return false;
    if (!(tagState == rhs.tagState))
      return false;
    if (!(startTimestamp == rhs.startTimestamp))
      return false;
    if (__isset.readQPSQuota != rhs.__isset.readQPSQuota)
      return false;
    else if (__isset.readQPSQuota && !(readQPSQuota == rhs.readQPSQuota))
      return false;
    if (__isset.attributeName != rhs.__isset.attributeName)
      return false;
    else if (__isset.attributeName && !(attributeName == rhs.attributeName))
      return false;
    if (__isset.attributeValue != rhs.__isset.attributeValue)
      return false;
    else if (__isset.attributeValue && !(attributeValue == rhs.attributeValue))
      return false;
    if (__isset.userAttributes != rhs.__isset.userAttributes)
      return false;
    else if (__isset.userAttributes && !(userAttributes == rhs.userAttributes))
      return false;
    if (__isset.attributesFilter != rhs.__isset.attributesFilter)
      return false;
    else if (__isset.attributesFilter && !(attributesFilter == rhs.attributesFilter))
      return false;
    return true;
  }
  bool operator != (const GetTagInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetTagInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetTagInfoResponse& obj);
};

void swap(GetTagInfoResponse &a, GetTagInfoResponse &b);


class ListTagRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ListTagRequest(const ListTagRequest&);
  ListTagRequest& operator=(const ListTagRequest&);
  ListTagRequest() : queueName() {
  }

  virtual ~ListTagRequest() throw();
  std::string queueName;

  void __set_queueName(const std::string& val);

  bool operator == (const ListTagRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const ListTagRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListTagRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ListTagRequest& obj);
};

void swap(ListTagRequest &a, ListTagRequest &b);


class ListTagResponse {
 public:

  static const char* ascii_fingerprint; // = "25702B8D5E28AA39160F267DABBC8446";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

  ListTagResponse(const ListTagResponse&);
  ListTagResponse& operator=(const ListTagResponse&);
  ListTagResponse() : queueName() {
  }

  virtual ~ListTagResponse() throw();
  std::string queueName;
  std::vector<std::string>  tagName;

  void __set_queueName(const std::string& val);

  void __set_tagName(const std::vector<std::string> & val);

  bool operator == (const ListTagResponse & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(tagName == rhs.tagName))
      return false;
    return true;
  }
  bool operator != (const ListTagResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListTagResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ListTagResponse& obj);
};

void swap(ListTagResponse &a, ListTagResponse &b);

typedef struct _QueryMetricRequest__isset {
  _QueryMetricRequest__isset() : queueName(false), startTime(false), endTime(false), metrics(false), tags(false), aggregator(false), downsampleAggregator(false), downsampleInterval(false), downsampleTimeUnit(false), calRate(false), tagName(false) {}
  bool queueName :1;
  bool startTime :1;
  bool endTime :1;
  bool metrics :1;
  bool tags :1;
  bool aggregator :1;
  bool downsampleAggregator :1;
  bool downsampleInterval :1;
  bool downsampleTimeUnit :1;
  bool calRate :1;
  bool tagName :1;
} _QueryMetricRequest__isset;

class QueryMetricRequest {
 public:

  static const char* ascii_fingerprint; // = "B3A5A30E20C33B08F68E0C6DDCDDA594";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xA5,0xA3,0x0E,0x20,0xC3,0x3B,0x08,0xF6,0x8E,0x0C,0x6D,0xDC,0xDD,0xA5,0x94};

  QueryMetricRequest(const QueryMetricRequest&);
  QueryMetricRequest& operator=(const QueryMetricRequest&);
  QueryMetricRequest() : queueName(), startTime(0), endTime(0), metrics(), aggregator(), downsampleAggregator(), downsampleInterval(0), downsampleTimeUnit(), calRate(0), tagName() {
  }

  virtual ~QueryMetricRequest() throw();
  std::string queueName;
  int64_t startTime;
  int64_t endTime;
  std::string metrics;
  std::map<std::string, std::string>  tags;
  std::string aggregator;
  std::string downsampleAggregator;
  int32_t downsampleInterval;
  std::string downsampleTimeUnit;
  bool calRate;
  std::string tagName;

  _QueryMetricRequest__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_startTime(const int64_t val);

  void __set_endTime(const int64_t val);

  void __set_metrics(const std::string& val);

  void __set_tags(const std::map<std::string, std::string> & val);

  void __set_aggregator(const std::string& val);

  void __set_downsampleAggregator(const std::string& val);

  void __set_downsampleInterval(const int32_t val);

  void __set_downsampleTimeUnit(const std::string& val);

  void __set_calRate(const bool val);

  void __set_tagName(const std::string& val);

  bool operator == (const QueryMetricRequest & rhs) const
  {
    if (__isset.queueName != rhs.__isset.queueName)
      return false;
    else if (__isset.queueName && !(queueName == rhs.queueName))
      return false;
    if (__isset.startTime != rhs.__isset.startTime)
      return false;
    else if (__isset.startTime && !(startTime == rhs.startTime))
      return false;
    if (__isset.endTime != rhs.__isset.endTime)
      return false;
    else if (__isset.endTime && !(endTime == rhs.endTime))
      return false;
    if (__isset.metrics != rhs.__isset.metrics)
      return false;
    else if (__isset.metrics && !(metrics == rhs.metrics))
      return false;
    if (__isset.tags != rhs.__isset.tags)
      return false;
    else if (__isset.tags && !(tags == rhs.tags))
      return false;
    if (__isset.aggregator != rhs.__isset.aggregator)
      return false;
    else if (__isset.aggregator && !(aggregator == rhs.aggregator))
      return false;
    if (__isset.downsampleAggregator != rhs.__isset.downsampleAggregator)
      return false;
    else if (__isset.downsampleAggregator && !(downsampleAggregator == rhs.downsampleAggregator))
      return false;
    if (__isset.downsampleInterval != rhs.__isset.downsampleInterval)
      return false;
    else if (__isset.downsampleInterval && !(downsampleInterval == rhs.downsampleInterval))
      return false;
    if (__isset.downsampleTimeUnit != rhs.__isset.downsampleTimeUnit)
      return false;
    else if (__isset.downsampleTimeUnit && !(downsampleTimeUnit == rhs.downsampleTimeUnit))
      return false;
    if (__isset.calRate != rhs.__isset.calRate)
      return false;
    else if (__isset.calRate && !(calRate == rhs.calRate))
      return false;
    if (__isset.tagName != rhs.__isset.tagName)
      return false;
    else if (__isset.tagName && !(tagName == rhs.tagName))
      return false;
    return true;
  }
  bool operator != (const QueryMetricRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryMetricRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueryMetricRequest& obj);
};

void swap(QueryMetricRequest &a, QueryMetricRequest &b);

typedef struct _TimeSeriesData__isset {
  _TimeSeriesData__isset() : metric(false), tags(false), data(false) {}
  bool metric :1;
  bool tags :1;
  bool data :1;
} _TimeSeriesData__isset;

class TimeSeriesData {
 public:

  static const char* ascii_fingerprint; // = "4B2F41264B8DD5DA4E9A150854D611F0";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x2F,0x41,0x26,0x4B,0x8D,0xD5,0xDA,0x4E,0x9A,0x15,0x08,0x54,0xD6,0x11,0xF0};

  TimeSeriesData(const TimeSeriesData&);
  TimeSeriesData& operator=(const TimeSeriesData&);
  TimeSeriesData() : metric() {
  }

  virtual ~TimeSeriesData() throw();
  std::string metric;
  std::map<std::string, std::string>  tags;
  std::map<int64_t, double>  data;

  _TimeSeriesData__isset __isset;

  void __set_metric(const std::string& val);

  void __set_tags(const std::map<std::string, std::string> & val);

  void __set_data(const std::map<int64_t, double> & val);

  bool operator == (const TimeSeriesData & rhs) const
  {
    if (__isset.metric != rhs.__isset.metric)
      return false;
    else if (__isset.metric && !(metric == rhs.metric))
      return false;
    if (__isset.tags != rhs.__isset.tags)
      return false;
    else if (__isset.tags && !(tags == rhs.tags))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TimeSeriesData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimeSeriesData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TimeSeriesData& obj);
};

void swap(TimeSeriesData &a, TimeSeriesData &b);


class VerifyEMQAdminResponse {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  VerifyEMQAdminResponse(const VerifyEMQAdminResponse&);
  VerifyEMQAdminResponse& operator=(const VerifyEMQAdminResponse&);
  VerifyEMQAdminResponse() : prefix() {
  }

  virtual ~VerifyEMQAdminResponse() throw();
  std::string prefix;

  void __set_prefix(const std::string& val);

  bool operator == (const VerifyEMQAdminResponse & rhs) const
  {
    if (!(prefix == rhs.prefix))
      return false;
    return true;
  }
  bool operator != (const VerifyEMQAdminResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VerifyEMQAdminResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VerifyEMQAdminResponse& obj);
};

void swap(VerifyEMQAdminResponse &a, VerifyEMQAdminResponse &b);

typedef struct _VerifyEMQAdminRoleRequest__isset {
  _VerifyEMQAdminRoleRequest__isset() : granteeId(false) {}
  bool granteeId :1;
} _VerifyEMQAdminRoleRequest__isset;

class VerifyEMQAdminRoleRequest {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  VerifyEMQAdminRoleRequest(const VerifyEMQAdminRoleRequest&);
  VerifyEMQAdminRoleRequest& operator=(const VerifyEMQAdminRoleRequest&);
  VerifyEMQAdminRoleRequest() : granteeId() {
  }

  virtual ~VerifyEMQAdminRoleRequest() throw();
  std::string granteeId;

  _VerifyEMQAdminRoleRequest__isset __isset;

  void __set_granteeId(const std::string& val);

  bool operator == (const VerifyEMQAdminRoleRequest & rhs) const
  {
    if (__isset.granteeId != rhs.__isset.granteeId)
      return false;
    else if (__isset.granteeId && !(granteeId == rhs.granteeId))
      return false;
    return true;
  }
  bool operator != (const VerifyEMQAdminRoleRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VerifyEMQAdminRoleRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VerifyEMQAdminRoleRequest& obj);
};

void swap(VerifyEMQAdminRoleRequest &a, VerifyEMQAdminRoleRequest &b);


class VerifyEMQAdminRoleResponse {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  VerifyEMQAdminRoleResponse(const VerifyEMQAdminRoleResponse&);
  VerifyEMQAdminRoleResponse& operator=(const VerifyEMQAdminRoleResponse&);
  VerifyEMQAdminRoleResponse() : isAdminRole(0) {
  }

  virtual ~VerifyEMQAdminRoleResponse() throw();
  bool isAdminRole;

  void __set_isAdminRole(const bool val);

  bool operator == (const VerifyEMQAdminRoleResponse & rhs) const
  {
    if (!(isAdminRole == rhs.isAdminRole))
      return false;
    return true;
  }
  bool operator != (const VerifyEMQAdminRoleResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VerifyEMQAdminRoleResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const VerifyEMQAdminRoleResponse& obj);
};

void swap(VerifyEMQAdminRoleResponse &a, VerifyEMQAdminRoleResponse &b);

typedef struct _QueueTag__isset {
  _QueueTag__isset() : startTimestamp(false), createTimestamp(false), attributeName(false), attributeValue(false), userAttributes(false) {}
  bool startTimestamp :1;
  bool createTimestamp :1;
  bool attributeName :1;
  bool attributeValue :1;
  bool userAttributes :1;
} _QueueTag__isset;

class QueueTag {
 public:

  static const char* ascii_fingerprint; // = "EA9615B148D62A0CBF8725733B801C40";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x96,0x15,0xB1,0x48,0xD6,0x2A,0x0C,0xBF,0x87,0x25,0x73,0x3B,0x80,0x1C,0x40};

  QueueTag(const QueueTag&);
  QueueTag& operator=(const QueueTag&);
  QueueTag() : queueName(), tagName(), tagId(0), startTimestamp(0), createTimestamp(0), attributeName() {
  }

  virtual ~QueueTag() throw();
  std::string queueName;
  std::string tagName;
  int32_t tagId;
  int64_t startTimestamp;
  int64_t createTimestamp;
  std::string attributeName;
   ::emq::message::MessageAttribute attributeValue;
  std::map<std::string, std::string>  userAttributes;

  _QueueTag__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_tagName(const std::string& val);

  void __set_tagId(const int32_t val);

  void __set_startTimestamp(const int64_t val);

  void __set_createTimestamp(const int64_t val);

  void __set_attributeName(const std::string& val);

  void __set_attributeValue(const  ::emq::message::MessageAttribute& val);

  void __set_userAttributes(const std::map<std::string, std::string> & val);

  bool operator == (const QueueTag & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(tagName == rhs.tagName))
      return false;
    if (!(tagId == rhs.tagId))
      return false;
    if (__isset.startTimestamp != rhs.__isset.startTimestamp)
      return false;
    else if (__isset.startTimestamp && !(startTimestamp == rhs.startTimestamp))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.attributeName != rhs.__isset.attributeName)
      return false;
    else if (__isset.attributeName && !(attributeName == rhs.attributeName))
      return false;
    if (__isset.attributeValue != rhs.__isset.attributeValue)
      return false;
    else if (__isset.attributeValue && !(attributeValue == rhs.attributeValue))
      return false;
    if (__isset.userAttributes != rhs.__isset.userAttributes)
      return false;
    else if (__isset.userAttributes && !(userAttributes == rhs.userAttributes))
      return false;
    return true;
  }
  bool operator != (const QueueTag &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueTag & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueTag& obj);
};

void swap(QueueTag &a, QueueTag &b);

typedef struct _QueueMeta__isset {
  _QueueMeta__isset() : queueQuota(false), enablePriority(false), topicQueue(false), deleteMessageForce(true), defaultTagName(false), permissionList(false), redrivePolicy(false), sourceQueues(false), createTimestamp(false), lastModifiedTimestamp(false), queueTagMap(false) {}
  bool queueQuota :1;
  bool enablePriority :1;
  bool topicQueue :1;
  bool deleteMessageForce :1;
  bool defaultTagName :1;
  bool permissionList :1;
  bool redrivePolicy :1;
  bool sourceQueues :1;
  bool createTimestamp :1;
  bool lastModifiedTimestamp :1;
  bool queueTagMap :1;
} _QueueMeta__isset;

class QueueMeta {
 public:

  static const char* ascii_fingerprint; // = "5DD9809F708D2B5B86147BB44BE0CCDF";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xD9,0x80,0x9F,0x70,0x8D,0x2B,0x5B,0x86,0x14,0x7B,0xB4,0x4B,0xE0,0xCC,0xDF};

  QueueMeta(const QueueMeta&);
  QueueMeta& operator=(const QueueMeta&);
  QueueMeta() : queueName(), enablePriority(0), topicQueue(0), deleteMessageForce(true), defaultTagName(), createTimestamp(0), lastModifiedTimestamp(0) {
  }

  virtual ~QueueMeta() throw();
  std::string queueName;
  QueueAttribute queueAttribute;
  QueueQuota queueQuota;
  bool enablePriority;
  bool topicQueue;
  bool deleteMessageForce;
  std::string defaultTagName;
  std::map<std::string, Permission::type>  permissionList;
  RedrivePolicy redrivePolicy;
  std::vector<std::string>  sourceQueues;
  int64_t createTimestamp;
  int64_t lastModifiedTimestamp;
  std::map<std::string, QueueTag>  queueTagMap;

  _QueueMeta__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_queueAttribute(const QueueAttribute& val);

  void __set_queueQuota(const QueueQuota& val);

  void __set_enablePriority(const bool val);

  void __set_topicQueue(const bool val);

  void __set_deleteMessageForce(const bool val);

  void __set_defaultTagName(const std::string& val);

  void __set_permissionList(const std::map<std::string, Permission::type> & val);

  void __set_redrivePolicy(const RedrivePolicy& val);

  void __set_sourceQueues(const std::vector<std::string> & val);

  void __set_createTimestamp(const int64_t val);

  void __set_lastModifiedTimestamp(const int64_t val);

  void __set_queueTagMap(const std::map<std::string, QueueTag> & val);

  bool operator == (const QueueMeta & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(queueAttribute == rhs.queueAttribute))
      return false;
    if (__isset.queueQuota != rhs.__isset.queueQuota)
      return false;
    else if (__isset.queueQuota && !(queueQuota == rhs.queueQuota))
      return false;
    if (__isset.enablePriority != rhs.__isset.enablePriority)
      return false;
    else if (__isset.enablePriority && !(enablePriority == rhs.enablePriority))
      return false;
    if (__isset.topicQueue != rhs.__isset.topicQueue)
      return false;
    else if (__isset.topicQueue && !(topicQueue == rhs.topicQueue))
      return false;
    if (__isset.deleteMessageForce != rhs.__isset.deleteMessageForce)
      return false;
    else if (__isset.deleteMessageForce && !(deleteMessageForce == rhs.deleteMessageForce))
      return false;
    if (__isset.defaultTagName != rhs.__isset.defaultTagName)
      return false;
    else if (__isset.defaultTagName && !(defaultTagName == rhs.defaultTagName))
      return false;
    if (__isset.permissionList != rhs.__isset.permissionList)
      return false;
    else if (__isset.permissionList && !(permissionList == rhs.permissionList))
      return false;
    if (__isset.redrivePolicy != rhs.__isset.redrivePolicy)
      return false;
    else if (__isset.redrivePolicy && !(redrivePolicy == rhs.redrivePolicy))
      return false;
    if (__isset.sourceQueues != rhs.__isset.sourceQueues)
      return false;
    else if (__isset.sourceQueues && !(sourceQueues == rhs.sourceQueues))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastModifiedTimestamp != rhs.__isset.lastModifiedTimestamp)
      return false;
    else if (__isset.lastModifiedTimestamp && !(lastModifiedTimestamp == rhs.lastModifiedTimestamp))
      return false;
    if (__isset.queueTagMap != rhs.__isset.queueTagMap)
      return false;
    else if (__isset.queueTagMap && !(queueTagMap == rhs.queueTagMap))
      return false;
    return true;
  }
  bool operator != (const QueueMeta &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueMeta & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueMeta& obj);
};

void swap(QueueMeta &a, QueueMeta &b);


class GetQueueMetaResponse {
 public:

  static const char* ascii_fingerprint; // = "44BA6CC774C2644C839E85ADCD070E22";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0xBA,0x6C,0xC7,0x74,0xC2,0x64,0x4C,0x83,0x9E,0x85,0xAD,0xCD,0x07,0x0E,0x22};

  GetQueueMetaResponse(const GetQueueMetaResponse&);
  GetQueueMetaResponse& operator=(const GetQueueMetaResponse&);
  GetQueueMetaResponse() {
  }

  virtual ~GetQueueMetaResponse() throw();
  QueueMeta queueMeta;

  void __set_queueMeta(const QueueMeta& val);

  bool operator == (const GetQueueMetaResponse & rhs) const
  {
    if (!(queueMeta == rhs.queueMeta))
      return false;
    return true;
  }
  bool operator != (const GetQueueMetaResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetQueueMetaResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GetQueueMetaResponse& obj);
};

void swap(GetQueueMetaResponse &a, GetQueueMetaResponse &b);


class CopyQueueRequest {
 public:

  static const char* ascii_fingerprint; // = "44BA6CC774C2644C839E85ADCD070E22";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0xBA,0x6C,0xC7,0x74,0xC2,0x64,0x4C,0x83,0x9E,0x85,0xAD,0xCD,0x07,0x0E,0x22};

  CopyQueueRequest(const CopyQueueRequest&);
  CopyQueueRequest& operator=(const CopyQueueRequest&);
  CopyQueueRequest() {
  }

  virtual ~CopyQueueRequest() throw();
  QueueMeta queueMeta;

  void __set_queueMeta(const QueueMeta& val);

  bool operator == (const CopyQueueRequest & rhs) const
  {
    if (!(queueMeta == rhs.queueMeta))
      return false;
    return true;
  }
  bool operator != (const CopyQueueRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CopyQueueRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const CopyQueueRequest& obj);
};

void swap(CopyQueueRequest &a, CopyQueueRequest &b);

}} // namespace

#endif
