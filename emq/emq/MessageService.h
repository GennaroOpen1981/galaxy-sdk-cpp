#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MessageService_H
#define MessageService_H

#include <thrift/TDispatchProcessor.h>
#include "Message_types.h"
#include "EMQBaseService.h"

namespace emq { namespace message {

class MessageServiceIf : virtual public  ::emq::common::EMQBaseServiceIf {
 public:
  virtual ~MessageServiceIf() {}

  /**
   * Send message;
   * 
   * 
   * @param sendMessageRequest
   */
  virtual void sendMessage(SendMessageResponse& _return, const SendMessageRequest& sendMessageRequest) = 0;

  /**
   * Send message batch;
   * 
   * 
   * @param sendMessageBatchRequest
   */
  virtual void sendMessageBatch(SendMessageBatchResponse& _return, const SendMessageBatchRequest& sendMessageBatchRequest) = 0;

  /**
   * Receive message;
   * 
   * 
   * @param receiveMessageRequest
   */
  virtual void receiveMessage(std::vector<ReceiveMessageResponse> & _return, const ReceiveMessageRequest& receiveMessageRequest) = 0;

  /**
   * Change message invisibility seconds;
   * 
   * 
   * @param changeMessageVisibilityRequest
   */
  virtual void changeMessageVisibilitySeconds(const ChangeMessageVisibilityRequest& changeMessageVisibilityRequest) = 0;

  /**
   * Change message invisibility seconds batch;
   * 
   * 
   * @param changeMessageVisibilityBatchRequest
   */
  virtual void changeMessageVisibilitySecondsBatch(ChangeMessageVisibilityBatchResponse& _return, const ChangeMessageVisibilityBatchRequest& changeMessageVisibilityBatchRequest) = 0;

  /**
   * Delete message;
   * 
   * 
   * @param deleteMessageRequest
   */
  virtual void deleteMessage(const DeleteMessageRequest& deleteMessageRequest) = 0;

  /**
   * Delete message batch;
   * 
   * 
   * @param deleteMessageBatchRequest
   */
  virtual void deleteMessageBatch(DeleteMessageBatchResponse& _return, const DeleteMessageBatchRequest& deleteMessageBatchRequest) = 0;

  /**
   * Dead message;
   * 
   * 
   * @param deadMessageRequest
   */
  virtual void deadMessage(const DeadMessageRequest& deadMessageRequest) = 0;

  /**
   * Dead message batch;
   * 
   * 
   * @param deadMessageBatchRequest
   */
  virtual void deadMessageBatch(DeadMessageBatchResponse& _return, const DeadMessageBatchRequest& deadMessageBatchRequest) = 0;

  /**
   * Peek message;
   * 
   * 
   * @param peekMessageRequest
   */
  virtual void peekMessage(std::vector<PeekMessageResponse> & _return, const PeekMessageRequest& peekMessageRequest) = 0;

  /**
   * Delete peek message;
   * 
   * 
   * @param deletePeekMessageRequest
   */
  virtual void deletePeekMessage(const DeletePeekMessageRequest& deletePeekMessageRequest) = 0;

  /**
   * Delete peek message batch;
   * 
   * 
   * @param deletePeekMessageBatchRequest
   */
  virtual void deletePeekMessageBatch(DeletePeekMessageBatchResponse& _return, const DeletePeekMessageBatchRequest& deletePeekMessageBatchRequest) = 0;
};

class MessageServiceIfFactory : virtual public  ::emq::common::EMQBaseServiceIfFactory {
 public:
  typedef MessageServiceIf Handler;

  virtual ~MessageServiceIfFactory() {}

  virtual MessageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::emq::common::EMQBaseServiceIf* /* handler */) = 0;
};

class MessageServiceIfSingletonFactory : virtual public MessageServiceIfFactory {
 public:
  MessageServiceIfSingletonFactory(const boost::shared_ptr<MessageServiceIf>& iface) : iface_(iface) {}
  virtual ~MessageServiceIfSingletonFactory() {}

  virtual MessageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::emq::common::EMQBaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MessageServiceIf> iface_;
};

class MessageServiceNull : virtual public MessageServiceIf , virtual public  ::emq::common::EMQBaseServiceNull {
 public:
  virtual ~MessageServiceNull() {}
  void sendMessage(SendMessageResponse& /* _return */, const SendMessageRequest& /* sendMessageRequest */) {
    return;
  }
  void sendMessageBatch(SendMessageBatchResponse& /* _return */, const SendMessageBatchRequest& /* sendMessageBatchRequest */) {
    return;
  }
  void receiveMessage(std::vector<ReceiveMessageResponse> & /* _return */, const ReceiveMessageRequest& /* receiveMessageRequest */) {
    return;
  }
  void changeMessageVisibilitySeconds(const ChangeMessageVisibilityRequest& /* changeMessageVisibilityRequest */) {
    return;
  }
  void changeMessageVisibilitySecondsBatch(ChangeMessageVisibilityBatchResponse& /* _return */, const ChangeMessageVisibilityBatchRequest& /* changeMessageVisibilityBatchRequest */) {
    return;
  }
  void deleteMessage(const DeleteMessageRequest& /* deleteMessageRequest */) {
    return;
  }
  void deleteMessageBatch(DeleteMessageBatchResponse& /* _return */, const DeleteMessageBatchRequest& /* deleteMessageBatchRequest */) {
    return;
  }
  void deadMessage(const DeadMessageRequest& /* deadMessageRequest */) {
    return;
  }
  void deadMessageBatch(DeadMessageBatchResponse& /* _return */, const DeadMessageBatchRequest& /* deadMessageBatchRequest */) {
    return;
  }
  void peekMessage(std::vector<PeekMessageResponse> & /* _return */, const PeekMessageRequest& /* peekMessageRequest */) {
    return;
  }
  void deletePeekMessage(const DeletePeekMessageRequest& /* deletePeekMessageRequest */) {
    return;
  }
  void deletePeekMessageBatch(DeletePeekMessageBatchResponse& /* _return */, const DeletePeekMessageBatchRequest& /* deletePeekMessageBatchRequest */) {
    return;
  }
};

typedef struct _MessageService_sendMessage_args__isset {
  _MessageService_sendMessage_args__isset() : sendMessageRequest(false) {}
  bool sendMessageRequest :1;
} _MessageService_sendMessage_args__isset;

class MessageService_sendMessage_args {
 public:

  static const char* ascii_fingerprint; // = "E27C394C6C81B89D7DA939F7E007D9FC";
  static const uint8_t binary_fingerprint[16]; // = {0xE2,0x7C,0x39,0x4C,0x6C,0x81,0xB8,0x9D,0x7D,0xA9,0x39,0xF7,0xE0,0x07,0xD9,0xFC};

  MessageService_sendMessage_args(const MessageService_sendMessage_args&);
  MessageService_sendMessage_args& operator=(const MessageService_sendMessage_args&);
  MessageService_sendMessage_args() {
  }

  virtual ~MessageService_sendMessage_args() throw();
  SendMessageRequest sendMessageRequest;

  _MessageService_sendMessage_args__isset __isset;

  void __set_sendMessageRequest(const SendMessageRequest& val);

  bool operator == (const MessageService_sendMessage_args & rhs) const
  {
    if (!(sendMessageRequest == rhs.sendMessageRequest))
      return false;
    return true;
  }
  bool operator != (const MessageService_sendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_sendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_sendMessage_args& obj);
};


class MessageService_sendMessage_pargs {
 public:

  static const char* ascii_fingerprint; // = "E27C394C6C81B89D7DA939F7E007D9FC";
  static const uint8_t binary_fingerprint[16]; // = {0xE2,0x7C,0x39,0x4C,0x6C,0x81,0xB8,0x9D,0x7D,0xA9,0x39,0xF7,0xE0,0x07,0xD9,0xFC};


  virtual ~MessageService_sendMessage_pargs() throw();
  const SendMessageRequest* sendMessageRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_sendMessage_pargs& obj);
};

typedef struct _MessageService_sendMessage_result__isset {
  _MessageService_sendMessage_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_sendMessage_result__isset;

class MessageService_sendMessage_result {
 public:

  static const char* ascii_fingerprint; // = "BC70B0180679EF6EA99773D4D6F94053";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x70,0xB0,0x18,0x06,0x79,0xEF,0x6E,0xA9,0x97,0x73,0xD4,0xD6,0xF9,0x40,0x53};

  MessageService_sendMessage_result(const MessageService_sendMessage_result&);
  MessageService_sendMessage_result& operator=(const MessageService_sendMessage_result&);
  MessageService_sendMessage_result() {
  }

  virtual ~MessageService_sendMessage_result() throw();
  SendMessageResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_sendMessage_result__isset __isset;

  void __set_success(const SendMessageResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const MessageService_sendMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_sendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_sendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_sendMessage_result& obj);
};

typedef struct _MessageService_sendMessage_presult__isset {
  _MessageService_sendMessage_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_sendMessage_presult__isset;

class MessageService_sendMessage_presult {
 public:

  static const char* ascii_fingerprint; // = "BC70B0180679EF6EA99773D4D6F94053";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x70,0xB0,0x18,0x06,0x79,0xEF,0x6E,0xA9,0x97,0x73,0xD4,0xD6,0xF9,0x40,0x53};


  virtual ~MessageService_sendMessage_presult() throw();
  SendMessageResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_sendMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageService_sendMessage_presult& obj);
};

typedef struct _MessageService_sendMessageBatch_args__isset {
  _MessageService_sendMessageBatch_args__isset() : sendMessageBatchRequest(false) {}
  bool sendMessageBatchRequest :1;
} _MessageService_sendMessageBatch_args__isset;

class MessageService_sendMessageBatch_args {
 public:

  static const char* ascii_fingerprint; // = "92489C904284AB446E9F23AE75EBC393";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0x48,0x9C,0x90,0x42,0x84,0xAB,0x44,0x6E,0x9F,0x23,0xAE,0x75,0xEB,0xC3,0x93};

  MessageService_sendMessageBatch_args(const MessageService_sendMessageBatch_args&);
  MessageService_sendMessageBatch_args& operator=(const MessageService_sendMessageBatch_args&);
  MessageService_sendMessageBatch_args() {
  }

  virtual ~MessageService_sendMessageBatch_args() throw();
  SendMessageBatchRequest sendMessageBatchRequest;

  _MessageService_sendMessageBatch_args__isset __isset;

  void __set_sendMessageBatchRequest(const SendMessageBatchRequest& val);

  bool operator == (const MessageService_sendMessageBatch_args & rhs) const
  {
    if (!(sendMessageBatchRequest == rhs.sendMessageBatchRequest))
      return false;
    return true;
  }
  bool operator != (const MessageService_sendMessageBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_sendMessageBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_sendMessageBatch_args& obj);
};


class MessageService_sendMessageBatch_pargs {
 public:

  static const char* ascii_fingerprint; // = "92489C904284AB446E9F23AE75EBC393";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0x48,0x9C,0x90,0x42,0x84,0xAB,0x44,0x6E,0x9F,0x23,0xAE,0x75,0xEB,0xC3,0x93};


  virtual ~MessageService_sendMessageBatch_pargs() throw();
  const SendMessageBatchRequest* sendMessageBatchRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_sendMessageBatch_pargs& obj);
};

typedef struct _MessageService_sendMessageBatch_result__isset {
  _MessageService_sendMessageBatch_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_sendMessageBatch_result__isset;

class MessageService_sendMessageBatch_result {
 public:

  static const char* ascii_fingerprint; // = "9193D91B87298791FAAC6352F65EACB0";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x93,0xD9,0x1B,0x87,0x29,0x87,0x91,0xFA,0xAC,0x63,0x52,0xF6,0x5E,0xAC,0xB0};

  MessageService_sendMessageBatch_result(const MessageService_sendMessageBatch_result&);
  MessageService_sendMessageBatch_result& operator=(const MessageService_sendMessageBatch_result&);
  MessageService_sendMessageBatch_result() {
  }

  virtual ~MessageService_sendMessageBatch_result() throw();
  SendMessageBatchResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_sendMessageBatch_result__isset __isset;

  void __set_success(const SendMessageBatchResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const MessageService_sendMessageBatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_sendMessageBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_sendMessageBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_sendMessageBatch_result& obj);
};

typedef struct _MessageService_sendMessageBatch_presult__isset {
  _MessageService_sendMessageBatch_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_sendMessageBatch_presult__isset;

class MessageService_sendMessageBatch_presult {
 public:

  static const char* ascii_fingerprint; // = "9193D91B87298791FAAC6352F65EACB0";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x93,0xD9,0x1B,0x87,0x29,0x87,0x91,0xFA,0xAC,0x63,0x52,0xF6,0x5E,0xAC,0xB0};


  virtual ~MessageService_sendMessageBatch_presult() throw();
  SendMessageBatchResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_sendMessageBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageService_sendMessageBatch_presult& obj);
};

typedef struct _MessageService_receiveMessage_args__isset {
  _MessageService_receiveMessage_args__isset() : receiveMessageRequest(false) {}
  bool receiveMessageRequest :1;
} _MessageService_receiveMessage_args__isset;

class MessageService_receiveMessage_args {
 public:

  static const char* ascii_fingerprint; // = "C7887732CD9393ED1ABC9F9BD9A960FE";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0x88,0x77,0x32,0xCD,0x93,0x93,0xED,0x1A,0xBC,0x9F,0x9B,0xD9,0xA9,0x60,0xFE};

  MessageService_receiveMessage_args(const MessageService_receiveMessage_args&);
  MessageService_receiveMessage_args& operator=(const MessageService_receiveMessage_args&);
  MessageService_receiveMessage_args() {
  }

  virtual ~MessageService_receiveMessage_args() throw();
  ReceiveMessageRequest receiveMessageRequest;

  _MessageService_receiveMessage_args__isset __isset;

  void __set_receiveMessageRequest(const ReceiveMessageRequest& val);

  bool operator == (const MessageService_receiveMessage_args & rhs) const
  {
    if (!(receiveMessageRequest == rhs.receiveMessageRequest))
      return false;
    return true;
  }
  bool operator != (const MessageService_receiveMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_receiveMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_receiveMessage_args& obj);
};


class MessageService_receiveMessage_pargs {
 public:

  static const char* ascii_fingerprint; // = "C7887732CD9393ED1ABC9F9BD9A960FE";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0x88,0x77,0x32,0xCD,0x93,0x93,0xED,0x1A,0xBC,0x9F,0x9B,0xD9,0xA9,0x60,0xFE};


  virtual ~MessageService_receiveMessage_pargs() throw();
  const ReceiveMessageRequest* receiveMessageRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_receiveMessage_pargs& obj);
};

typedef struct _MessageService_receiveMessage_result__isset {
  _MessageService_receiveMessage_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_receiveMessage_result__isset;

class MessageService_receiveMessage_result {
 public:

  static const char* ascii_fingerprint; // = "C946BACB601167AAD408DF70A226055B";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x46,0xBA,0xCB,0x60,0x11,0x67,0xAA,0xD4,0x08,0xDF,0x70,0xA2,0x26,0x05,0x5B};

  MessageService_receiveMessage_result(const MessageService_receiveMessage_result&);
  MessageService_receiveMessage_result& operator=(const MessageService_receiveMessage_result&);
  MessageService_receiveMessage_result() {
  }

  virtual ~MessageService_receiveMessage_result() throw();
  std::vector<ReceiveMessageResponse>  success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_receiveMessage_result__isset __isset;

  void __set_success(const std::vector<ReceiveMessageResponse> & val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const MessageService_receiveMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_receiveMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_receiveMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_receiveMessage_result& obj);
};

typedef struct _MessageService_receiveMessage_presult__isset {
  _MessageService_receiveMessage_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_receiveMessage_presult__isset;

class MessageService_receiveMessage_presult {
 public:

  static const char* ascii_fingerprint; // = "C946BACB601167AAD408DF70A226055B";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x46,0xBA,0xCB,0x60,0x11,0x67,0xAA,0xD4,0x08,0xDF,0x70,0xA2,0x26,0x05,0x5B};


  virtual ~MessageService_receiveMessage_presult() throw();
  std::vector<ReceiveMessageResponse> * success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_receiveMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageService_receiveMessage_presult& obj);
};

typedef struct _MessageService_changeMessageVisibilitySeconds_args__isset {
  _MessageService_changeMessageVisibilitySeconds_args__isset() : changeMessageVisibilityRequest(false) {}
  bool changeMessageVisibilityRequest :1;
} _MessageService_changeMessageVisibilitySeconds_args__isset;

class MessageService_changeMessageVisibilitySeconds_args {
 public:

  static const char* ascii_fingerprint; // = "7E45EAC2A286B2A0D80DCD7AC57B44CA";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x45,0xEA,0xC2,0xA2,0x86,0xB2,0xA0,0xD8,0x0D,0xCD,0x7A,0xC5,0x7B,0x44,0xCA};

  MessageService_changeMessageVisibilitySeconds_args(const MessageService_changeMessageVisibilitySeconds_args&);
  MessageService_changeMessageVisibilitySeconds_args& operator=(const MessageService_changeMessageVisibilitySeconds_args&);
  MessageService_changeMessageVisibilitySeconds_args() {
  }

  virtual ~MessageService_changeMessageVisibilitySeconds_args() throw();
  ChangeMessageVisibilityRequest changeMessageVisibilityRequest;

  _MessageService_changeMessageVisibilitySeconds_args__isset __isset;

  void __set_changeMessageVisibilityRequest(const ChangeMessageVisibilityRequest& val);

  bool operator == (const MessageService_changeMessageVisibilitySeconds_args & rhs) const
  {
    if (!(changeMessageVisibilityRequest == rhs.changeMessageVisibilityRequest))
      return false;
    return true;
  }
  bool operator != (const MessageService_changeMessageVisibilitySeconds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_changeMessageVisibilitySeconds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_changeMessageVisibilitySeconds_args& obj);
};


class MessageService_changeMessageVisibilitySeconds_pargs {
 public:

  static const char* ascii_fingerprint; // = "7E45EAC2A286B2A0D80DCD7AC57B44CA";
  static const uint8_t binary_fingerprint[16]; // = {0x7E,0x45,0xEA,0xC2,0xA2,0x86,0xB2,0xA0,0xD8,0x0D,0xCD,0x7A,0xC5,0x7B,0x44,0xCA};


  virtual ~MessageService_changeMessageVisibilitySeconds_pargs() throw();
  const ChangeMessageVisibilityRequest* changeMessageVisibilityRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_changeMessageVisibilitySeconds_pargs& obj);
};

typedef struct _MessageService_changeMessageVisibilitySeconds_result__isset {
  _MessageService_changeMessageVisibilitySeconds_result__isset() : e(false) {}
  bool e :1;
} _MessageService_changeMessageVisibilitySeconds_result__isset;

class MessageService_changeMessageVisibilitySeconds_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  MessageService_changeMessageVisibilitySeconds_result(const MessageService_changeMessageVisibilitySeconds_result&);
  MessageService_changeMessageVisibilitySeconds_result& operator=(const MessageService_changeMessageVisibilitySeconds_result&);
  MessageService_changeMessageVisibilitySeconds_result() {
  }

  virtual ~MessageService_changeMessageVisibilitySeconds_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_changeMessageVisibilitySeconds_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const MessageService_changeMessageVisibilitySeconds_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_changeMessageVisibilitySeconds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_changeMessageVisibilitySeconds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_changeMessageVisibilitySeconds_result& obj);
};

typedef struct _MessageService_changeMessageVisibilitySeconds_presult__isset {
  _MessageService_changeMessageVisibilitySeconds_presult__isset() : e(false) {}
  bool e :1;
} _MessageService_changeMessageVisibilitySeconds_presult__isset;

class MessageService_changeMessageVisibilitySeconds_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~MessageService_changeMessageVisibilitySeconds_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_changeMessageVisibilitySeconds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageService_changeMessageVisibilitySeconds_presult& obj);
};

typedef struct _MessageService_changeMessageVisibilitySecondsBatch_args__isset {
  _MessageService_changeMessageVisibilitySecondsBatch_args__isset() : changeMessageVisibilityBatchRequest(false) {}
  bool changeMessageVisibilityBatchRequest :1;
} _MessageService_changeMessageVisibilitySecondsBatch_args__isset;

class MessageService_changeMessageVisibilitySecondsBatch_args {
 public:

  static const char* ascii_fingerprint; // = "6D1FB5698ABAAA4C87084A7319611207";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0x1F,0xB5,0x69,0x8A,0xBA,0xAA,0x4C,0x87,0x08,0x4A,0x73,0x19,0x61,0x12,0x07};

  MessageService_changeMessageVisibilitySecondsBatch_args(const MessageService_changeMessageVisibilitySecondsBatch_args&);
  MessageService_changeMessageVisibilitySecondsBatch_args& operator=(const MessageService_changeMessageVisibilitySecondsBatch_args&);
  MessageService_changeMessageVisibilitySecondsBatch_args() {
  }

  virtual ~MessageService_changeMessageVisibilitySecondsBatch_args() throw();
  ChangeMessageVisibilityBatchRequest changeMessageVisibilityBatchRequest;

  _MessageService_changeMessageVisibilitySecondsBatch_args__isset __isset;

  void __set_changeMessageVisibilityBatchRequest(const ChangeMessageVisibilityBatchRequest& val);

  bool operator == (const MessageService_changeMessageVisibilitySecondsBatch_args & rhs) const
  {
    if (!(changeMessageVisibilityBatchRequest == rhs.changeMessageVisibilityBatchRequest))
      return false;
    return true;
  }
  bool operator != (const MessageService_changeMessageVisibilitySecondsBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_changeMessageVisibilitySecondsBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_changeMessageVisibilitySecondsBatch_args& obj);
};


class MessageService_changeMessageVisibilitySecondsBatch_pargs {
 public:

  static const char* ascii_fingerprint; // = "6D1FB5698ABAAA4C87084A7319611207";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0x1F,0xB5,0x69,0x8A,0xBA,0xAA,0x4C,0x87,0x08,0x4A,0x73,0x19,0x61,0x12,0x07};


  virtual ~MessageService_changeMessageVisibilitySecondsBatch_pargs() throw();
  const ChangeMessageVisibilityBatchRequest* changeMessageVisibilityBatchRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_changeMessageVisibilitySecondsBatch_pargs& obj);
};

typedef struct _MessageService_changeMessageVisibilitySecondsBatch_result__isset {
  _MessageService_changeMessageVisibilitySecondsBatch_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_changeMessageVisibilitySecondsBatch_result__isset;

class MessageService_changeMessageVisibilitySecondsBatch_result {
 public:

  static const char* ascii_fingerprint; // = "B8FA4589D2D1B596A9D373545F2B13D1";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0xFA,0x45,0x89,0xD2,0xD1,0xB5,0x96,0xA9,0xD3,0x73,0x54,0x5F,0x2B,0x13,0xD1};

  MessageService_changeMessageVisibilitySecondsBatch_result(const MessageService_changeMessageVisibilitySecondsBatch_result&);
  MessageService_changeMessageVisibilitySecondsBatch_result& operator=(const MessageService_changeMessageVisibilitySecondsBatch_result&);
  MessageService_changeMessageVisibilitySecondsBatch_result() {
  }

  virtual ~MessageService_changeMessageVisibilitySecondsBatch_result() throw();
  ChangeMessageVisibilityBatchResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_changeMessageVisibilitySecondsBatch_result__isset __isset;

  void __set_success(const ChangeMessageVisibilityBatchResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const MessageService_changeMessageVisibilitySecondsBatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_changeMessageVisibilitySecondsBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_changeMessageVisibilitySecondsBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_changeMessageVisibilitySecondsBatch_result& obj);
};

typedef struct _MessageService_changeMessageVisibilitySecondsBatch_presult__isset {
  _MessageService_changeMessageVisibilitySecondsBatch_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_changeMessageVisibilitySecondsBatch_presult__isset;

class MessageService_changeMessageVisibilitySecondsBatch_presult {
 public:

  static const char* ascii_fingerprint; // = "B8FA4589D2D1B596A9D373545F2B13D1";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0xFA,0x45,0x89,0xD2,0xD1,0xB5,0x96,0xA9,0xD3,0x73,0x54,0x5F,0x2B,0x13,0xD1};


  virtual ~MessageService_changeMessageVisibilitySecondsBatch_presult() throw();
  ChangeMessageVisibilityBatchResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_changeMessageVisibilitySecondsBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageService_changeMessageVisibilitySecondsBatch_presult& obj);
};

typedef struct _MessageService_deleteMessage_args__isset {
  _MessageService_deleteMessage_args__isset() : deleteMessageRequest(false) {}
  bool deleteMessageRequest :1;
} _MessageService_deleteMessage_args__isset;

class MessageService_deleteMessage_args {
 public:

  static const char* ascii_fingerprint; // = "A756D3DBE614FB13F70BF7F7B6EB3D73";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x56,0xD3,0xDB,0xE6,0x14,0xFB,0x13,0xF7,0x0B,0xF7,0xF7,0xB6,0xEB,0x3D,0x73};

  MessageService_deleteMessage_args(const MessageService_deleteMessage_args&);
  MessageService_deleteMessage_args& operator=(const MessageService_deleteMessage_args&);
  MessageService_deleteMessage_args() {
  }

  virtual ~MessageService_deleteMessage_args() throw();
  DeleteMessageRequest deleteMessageRequest;

  _MessageService_deleteMessage_args__isset __isset;

  void __set_deleteMessageRequest(const DeleteMessageRequest& val);

  bool operator == (const MessageService_deleteMessage_args & rhs) const
  {
    if (!(deleteMessageRequest == rhs.deleteMessageRequest))
      return false;
    return true;
  }
  bool operator != (const MessageService_deleteMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_deleteMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deleteMessage_args& obj);
};


class MessageService_deleteMessage_pargs {
 public:

  static const char* ascii_fingerprint; // = "A756D3DBE614FB13F70BF7F7B6EB3D73";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x56,0xD3,0xDB,0xE6,0x14,0xFB,0x13,0xF7,0x0B,0xF7,0xF7,0xB6,0xEB,0x3D,0x73};


  virtual ~MessageService_deleteMessage_pargs() throw();
  const DeleteMessageRequest* deleteMessageRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deleteMessage_pargs& obj);
};

typedef struct _MessageService_deleteMessage_result__isset {
  _MessageService_deleteMessage_result__isset() : e(false) {}
  bool e :1;
} _MessageService_deleteMessage_result__isset;

class MessageService_deleteMessage_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  MessageService_deleteMessage_result(const MessageService_deleteMessage_result&);
  MessageService_deleteMessage_result& operator=(const MessageService_deleteMessage_result&);
  MessageService_deleteMessage_result() {
  }

  virtual ~MessageService_deleteMessage_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_deleteMessage_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const MessageService_deleteMessage_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_deleteMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_deleteMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deleteMessage_result& obj);
};

typedef struct _MessageService_deleteMessage_presult__isset {
  _MessageService_deleteMessage_presult__isset() : e(false) {}
  bool e :1;
} _MessageService_deleteMessage_presult__isset;

class MessageService_deleteMessage_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~MessageService_deleteMessage_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_deleteMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deleteMessage_presult& obj);
};

typedef struct _MessageService_deleteMessageBatch_args__isset {
  _MessageService_deleteMessageBatch_args__isset() : deleteMessageBatchRequest(false) {}
  bool deleteMessageBatchRequest :1;
} _MessageService_deleteMessageBatch_args__isset;

class MessageService_deleteMessageBatch_args {
 public:

  static const char* ascii_fingerprint; // = "E0C2D7EAC9D42C536A3CAA2F7744693B";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0xC2,0xD7,0xEA,0xC9,0xD4,0x2C,0x53,0x6A,0x3C,0xAA,0x2F,0x77,0x44,0x69,0x3B};

  MessageService_deleteMessageBatch_args(const MessageService_deleteMessageBatch_args&);
  MessageService_deleteMessageBatch_args& operator=(const MessageService_deleteMessageBatch_args&);
  MessageService_deleteMessageBatch_args() {
  }

  virtual ~MessageService_deleteMessageBatch_args() throw();
  DeleteMessageBatchRequest deleteMessageBatchRequest;

  _MessageService_deleteMessageBatch_args__isset __isset;

  void __set_deleteMessageBatchRequest(const DeleteMessageBatchRequest& val);

  bool operator == (const MessageService_deleteMessageBatch_args & rhs) const
  {
    if (!(deleteMessageBatchRequest == rhs.deleteMessageBatchRequest))
      return false;
    return true;
  }
  bool operator != (const MessageService_deleteMessageBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_deleteMessageBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deleteMessageBatch_args& obj);
};


class MessageService_deleteMessageBatch_pargs {
 public:

  static const char* ascii_fingerprint; // = "E0C2D7EAC9D42C536A3CAA2F7744693B";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0xC2,0xD7,0xEA,0xC9,0xD4,0x2C,0x53,0x6A,0x3C,0xAA,0x2F,0x77,0x44,0x69,0x3B};


  virtual ~MessageService_deleteMessageBatch_pargs() throw();
  const DeleteMessageBatchRequest* deleteMessageBatchRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deleteMessageBatch_pargs& obj);
};

typedef struct _MessageService_deleteMessageBatch_result__isset {
  _MessageService_deleteMessageBatch_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_deleteMessageBatch_result__isset;

class MessageService_deleteMessageBatch_result {
 public:

  static const char* ascii_fingerprint; // = "B8FA4589D2D1B596A9D373545F2B13D1";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0xFA,0x45,0x89,0xD2,0xD1,0xB5,0x96,0xA9,0xD3,0x73,0x54,0x5F,0x2B,0x13,0xD1};

  MessageService_deleteMessageBatch_result(const MessageService_deleteMessageBatch_result&);
  MessageService_deleteMessageBatch_result& operator=(const MessageService_deleteMessageBatch_result&);
  MessageService_deleteMessageBatch_result() {
  }

  virtual ~MessageService_deleteMessageBatch_result() throw();
  DeleteMessageBatchResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_deleteMessageBatch_result__isset __isset;

  void __set_success(const DeleteMessageBatchResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const MessageService_deleteMessageBatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_deleteMessageBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_deleteMessageBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deleteMessageBatch_result& obj);
};

typedef struct _MessageService_deleteMessageBatch_presult__isset {
  _MessageService_deleteMessageBatch_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_deleteMessageBatch_presult__isset;

class MessageService_deleteMessageBatch_presult {
 public:

  static const char* ascii_fingerprint; // = "B8FA4589D2D1B596A9D373545F2B13D1";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0xFA,0x45,0x89,0xD2,0xD1,0xB5,0x96,0xA9,0xD3,0x73,0x54,0x5F,0x2B,0x13,0xD1};


  virtual ~MessageService_deleteMessageBatch_presult() throw();
  DeleteMessageBatchResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_deleteMessageBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deleteMessageBatch_presult& obj);
};

typedef struct _MessageService_deadMessage_args__isset {
  _MessageService_deadMessage_args__isset() : deadMessageRequest(false) {}
  bool deadMessageRequest :1;
} _MessageService_deadMessage_args__isset;

class MessageService_deadMessage_args {
 public:

  static const char* ascii_fingerprint; // = "A756D3DBE614FB13F70BF7F7B6EB3D73";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x56,0xD3,0xDB,0xE6,0x14,0xFB,0x13,0xF7,0x0B,0xF7,0xF7,0xB6,0xEB,0x3D,0x73};

  MessageService_deadMessage_args(const MessageService_deadMessage_args&);
  MessageService_deadMessage_args& operator=(const MessageService_deadMessage_args&);
  MessageService_deadMessage_args() {
  }

  virtual ~MessageService_deadMessage_args() throw();
  DeadMessageRequest deadMessageRequest;

  _MessageService_deadMessage_args__isset __isset;

  void __set_deadMessageRequest(const DeadMessageRequest& val);

  bool operator == (const MessageService_deadMessage_args & rhs) const
  {
    if (!(deadMessageRequest == rhs.deadMessageRequest))
      return false;
    return true;
  }
  bool operator != (const MessageService_deadMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_deadMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deadMessage_args& obj);
};


class MessageService_deadMessage_pargs {
 public:

  static const char* ascii_fingerprint; // = "A756D3DBE614FB13F70BF7F7B6EB3D73";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x56,0xD3,0xDB,0xE6,0x14,0xFB,0x13,0xF7,0x0B,0xF7,0xF7,0xB6,0xEB,0x3D,0x73};


  virtual ~MessageService_deadMessage_pargs() throw();
  const DeadMessageRequest* deadMessageRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deadMessage_pargs& obj);
};

typedef struct _MessageService_deadMessage_result__isset {
  _MessageService_deadMessage_result__isset() : e(false) {}
  bool e :1;
} _MessageService_deadMessage_result__isset;

class MessageService_deadMessage_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  MessageService_deadMessage_result(const MessageService_deadMessage_result&);
  MessageService_deadMessage_result& operator=(const MessageService_deadMessage_result&);
  MessageService_deadMessage_result() {
  }

  virtual ~MessageService_deadMessage_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_deadMessage_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const MessageService_deadMessage_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_deadMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_deadMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deadMessage_result& obj);
};

typedef struct _MessageService_deadMessage_presult__isset {
  _MessageService_deadMessage_presult__isset() : e(false) {}
  bool e :1;
} _MessageService_deadMessage_presult__isset;

class MessageService_deadMessage_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~MessageService_deadMessage_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_deadMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deadMessage_presult& obj);
};

typedef struct _MessageService_deadMessageBatch_args__isset {
  _MessageService_deadMessageBatch_args__isset() : deadMessageBatchRequest(false) {}
  bool deadMessageBatchRequest :1;
} _MessageService_deadMessageBatch_args__isset;

class MessageService_deadMessageBatch_args {
 public:

  static const char* ascii_fingerprint; // = "E0C2D7EAC9D42C536A3CAA2F7744693B";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0xC2,0xD7,0xEA,0xC9,0xD4,0x2C,0x53,0x6A,0x3C,0xAA,0x2F,0x77,0x44,0x69,0x3B};

  MessageService_deadMessageBatch_args(const MessageService_deadMessageBatch_args&);
  MessageService_deadMessageBatch_args& operator=(const MessageService_deadMessageBatch_args&);
  MessageService_deadMessageBatch_args() {
  }

  virtual ~MessageService_deadMessageBatch_args() throw();
  DeadMessageBatchRequest deadMessageBatchRequest;

  _MessageService_deadMessageBatch_args__isset __isset;

  void __set_deadMessageBatchRequest(const DeadMessageBatchRequest& val);

  bool operator == (const MessageService_deadMessageBatch_args & rhs) const
  {
    if (!(deadMessageBatchRequest == rhs.deadMessageBatchRequest))
      return false;
    return true;
  }
  bool operator != (const MessageService_deadMessageBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_deadMessageBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deadMessageBatch_args& obj);
};


class MessageService_deadMessageBatch_pargs {
 public:

  static const char* ascii_fingerprint; // = "E0C2D7EAC9D42C536A3CAA2F7744693B";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0xC2,0xD7,0xEA,0xC9,0xD4,0x2C,0x53,0x6A,0x3C,0xAA,0x2F,0x77,0x44,0x69,0x3B};


  virtual ~MessageService_deadMessageBatch_pargs() throw();
  const DeadMessageBatchRequest* deadMessageBatchRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deadMessageBatch_pargs& obj);
};

typedef struct _MessageService_deadMessageBatch_result__isset {
  _MessageService_deadMessageBatch_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_deadMessageBatch_result__isset;

class MessageService_deadMessageBatch_result {
 public:

  static const char* ascii_fingerprint; // = "B8FA4589D2D1B596A9D373545F2B13D1";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0xFA,0x45,0x89,0xD2,0xD1,0xB5,0x96,0xA9,0xD3,0x73,0x54,0x5F,0x2B,0x13,0xD1};

  MessageService_deadMessageBatch_result(const MessageService_deadMessageBatch_result&);
  MessageService_deadMessageBatch_result& operator=(const MessageService_deadMessageBatch_result&);
  MessageService_deadMessageBatch_result() {
  }

  virtual ~MessageService_deadMessageBatch_result() throw();
  DeadMessageBatchResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_deadMessageBatch_result__isset __isset;

  void __set_success(const DeadMessageBatchResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const MessageService_deadMessageBatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_deadMessageBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_deadMessageBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deadMessageBatch_result& obj);
};

typedef struct _MessageService_deadMessageBatch_presult__isset {
  _MessageService_deadMessageBatch_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_deadMessageBatch_presult__isset;

class MessageService_deadMessageBatch_presult {
 public:

  static const char* ascii_fingerprint; // = "B8FA4589D2D1B596A9D373545F2B13D1";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0xFA,0x45,0x89,0xD2,0xD1,0xB5,0x96,0xA9,0xD3,0x73,0x54,0x5F,0x2B,0x13,0xD1};


  virtual ~MessageService_deadMessageBatch_presult() throw();
  DeadMessageBatchResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_deadMessageBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deadMessageBatch_presult& obj);
};

typedef struct _MessageService_peekMessage_args__isset {
  _MessageService_peekMessage_args__isset() : peekMessageRequest(false) {}
  bool peekMessageRequest :1;
} _MessageService_peekMessage_args__isset;

class MessageService_peekMessage_args {
 public:

  static const char* ascii_fingerprint; // = "9F2CA5892200ED7A89DF8867EC4FD199";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0x2C,0xA5,0x89,0x22,0x00,0xED,0x7A,0x89,0xDF,0x88,0x67,0xEC,0x4F,0xD1,0x99};

  MessageService_peekMessage_args(const MessageService_peekMessage_args&);
  MessageService_peekMessage_args& operator=(const MessageService_peekMessage_args&);
  MessageService_peekMessage_args() {
  }

  virtual ~MessageService_peekMessage_args() throw();
  PeekMessageRequest peekMessageRequest;

  _MessageService_peekMessage_args__isset __isset;

  void __set_peekMessageRequest(const PeekMessageRequest& val);

  bool operator == (const MessageService_peekMessage_args & rhs) const
  {
    if (!(peekMessageRequest == rhs.peekMessageRequest))
      return false;
    return true;
  }
  bool operator != (const MessageService_peekMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_peekMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_peekMessage_args& obj);
};


class MessageService_peekMessage_pargs {
 public:

  static const char* ascii_fingerprint; // = "9F2CA5892200ED7A89DF8867EC4FD199";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0x2C,0xA5,0x89,0x22,0x00,0xED,0x7A,0x89,0xDF,0x88,0x67,0xEC,0x4F,0xD1,0x99};


  virtual ~MessageService_peekMessage_pargs() throw();
  const PeekMessageRequest* peekMessageRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_peekMessage_pargs& obj);
};

typedef struct _MessageService_peekMessage_result__isset {
  _MessageService_peekMessage_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_peekMessage_result__isset;

class MessageService_peekMessage_result {
 public:

  static const char* ascii_fingerprint; // = "AE15A6034248419E4A18A369600CCA5C";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0x15,0xA6,0x03,0x42,0x48,0x41,0x9E,0x4A,0x18,0xA3,0x69,0x60,0x0C,0xCA,0x5C};

  MessageService_peekMessage_result(const MessageService_peekMessage_result&);
  MessageService_peekMessage_result& operator=(const MessageService_peekMessage_result&);
  MessageService_peekMessage_result() {
  }

  virtual ~MessageService_peekMessage_result() throw();
  std::vector<PeekMessageResponse>  success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_peekMessage_result__isset __isset;

  void __set_success(const std::vector<PeekMessageResponse> & val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const MessageService_peekMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_peekMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_peekMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_peekMessage_result& obj);
};

typedef struct _MessageService_peekMessage_presult__isset {
  _MessageService_peekMessage_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_peekMessage_presult__isset;

class MessageService_peekMessage_presult {
 public:

  static const char* ascii_fingerprint; // = "AE15A6034248419E4A18A369600CCA5C";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0x15,0xA6,0x03,0x42,0x48,0x41,0x9E,0x4A,0x18,0xA3,0x69,0x60,0x0C,0xCA,0x5C};


  virtual ~MessageService_peekMessage_presult() throw();
  std::vector<PeekMessageResponse> * success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_peekMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageService_peekMessage_presult& obj);
};

typedef struct _MessageService_deletePeekMessage_args__isset {
  _MessageService_deletePeekMessage_args__isset() : deletePeekMessageRequest(false) {}
  bool deletePeekMessageRequest :1;
} _MessageService_deletePeekMessage_args__isset;

class MessageService_deletePeekMessage_args {
 public:

  static const char* ascii_fingerprint; // = "A756D3DBE614FB13F70BF7F7B6EB3D73";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x56,0xD3,0xDB,0xE6,0x14,0xFB,0x13,0xF7,0x0B,0xF7,0xF7,0xB6,0xEB,0x3D,0x73};

  MessageService_deletePeekMessage_args(const MessageService_deletePeekMessage_args&);
  MessageService_deletePeekMessage_args& operator=(const MessageService_deletePeekMessage_args&);
  MessageService_deletePeekMessage_args() {
  }

  virtual ~MessageService_deletePeekMessage_args() throw();
  DeletePeekMessageRequest deletePeekMessageRequest;

  _MessageService_deletePeekMessage_args__isset __isset;

  void __set_deletePeekMessageRequest(const DeletePeekMessageRequest& val);

  bool operator == (const MessageService_deletePeekMessage_args & rhs) const
  {
    if (!(deletePeekMessageRequest == rhs.deletePeekMessageRequest))
      return false;
    return true;
  }
  bool operator != (const MessageService_deletePeekMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_deletePeekMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deletePeekMessage_args& obj);
};


class MessageService_deletePeekMessage_pargs {
 public:

  static const char* ascii_fingerprint; // = "A756D3DBE614FB13F70BF7F7B6EB3D73";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x56,0xD3,0xDB,0xE6,0x14,0xFB,0x13,0xF7,0x0B,0xF7,0xF7,0xB6,0xEB,0x3D,0x73};


  virtual ~MessageService_deletePeekMessage_pargs() throw();
  const DeletePeekMessageRequest* deletePeekMessageRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deletePeekMessage_pargs& obj);
};

typedef struct _MessageService_deletePeekMessage_result__isset {
  _MessageService_deletePeekMessage_result__isset() : e(false) {}
  bool e :1;
} _MessageService_deletePeekMessage_result__isset;

class MessageService_deletePeekMessage_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  MessageService_deletePeekMessage_result(const MessageService_deletePeekMessage_result&);
  MessageService_deletePeekMessage_result& operator=(const MessageService_deletePeekMessage_result&);
  MessageService_deletePeekMessage_result() {
  }

  virtual ~MessageService_deletePeekMessage_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_deletePeekMessage_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const MessageService_deletePeekMessage_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_deletePeekMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_deletePeekMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deletePeekMessage_result& obj);
};

typedef struct _MessageService_deletePeekMessage_presult__isset {
  _MessageService_deletePeekMessage_presult__isset() : e(false) {}
  bool e :1;
} _MessageService_deletePeekMessage_presult__isset;

class MessageService_deletePeekMessage_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~MessageService_deletePeekMessage_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_deletePeekMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deletePeekMessage_presult& obj);
};

typedef struct _MessageService_deletePeekMessageBatch_args__isset {
  _MessageService_deletePeekMessageBatch_args__isset() : deletePeekMessageBatchRequest(false) {}
  bool deletePeekMessageBatchRequest :1;
} _MessageService_deletePeekMessageBatch_args__isset;

class MessageService_deletePeekMessageBatch_args {
 public:

  static const char* ascii_fingerprint; // = "E0C2D7EAC9D42C536A3CAA2F7744693B";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0xC2,0xD7,0xEA,0xC9,0xD4,0x2C,0x53,0x6A,0x3C,0xAA,0x2F,0x77,0x44,0x69,0x3B};

  MessageService_deletePeekMessageBatch_args(const MessageService_deletePeekMessageBatch_args&);
  MessageService_deletePeekMessageBatch_args& operator=(const MessageService_deletePeekMessageBatch_args&);
  MessageService_deletePeekMessageBatch_args() {
  }

  virtual ~MessageService_deletePeekMessageBatch_args() throw();
  DeletePeekMessageBatchRequest deletePeekMessageBatchRequest;

  _MessageService_deletePeekMessageBatch_args__isset __isset;

  void __set_deletePeekMessageBatchRequest(const DeletePeekMessageBatchRequest& val);

  bool operator == (const MessageService_deletePeekMessageBatch_args & rhs) const
  {
    if (!(deletePeekMessageBatchRequest == rhs.deletePeekMessageBatchRequest))
      return false;
    return true;
  }
  bool operator != (const MessageService_deletePeekMessageBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_deletePeekMessageBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deletePeekMessageBatch_args& obj);
};


class MessageService_deletePeekMessageBatch_pargs {
 public:

  static const char* ascii_fingerprint; // = "E0C2D7EAC9D42C536A3CAA2F7744693B";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0xC2,0xD7,0xEA,0xC9,0xD4,0x2C,0x53,0x6A,0x3C,0xAA,0x2F,0x77,0x44,0x69,0x3B};


  virtual ~MessageService_deletePeekMessageBatch_pargs() throw();
  const DeletePeekMessageBatchRequest* deletePeekMessageBatchRequest;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deletePeekMessageBatch_pargs& obj);
};

typedef struct _MessageService_deletePeekMessageBatch_result__isset {
  _MessageService_deletePeekMessageBatch_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_deletePeekMessageBatch_result__isset;

class MessageService_deletePeekMessageBatch_result {
 public:

  static const char* ascii_fingerprint; // = "B8FA4589D2D1B596A9D373545F2B13D1";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0xFA,0x45,0x89,0xD2,0xD1,0xB5,0x96,0xA9,0xD3,0x73,0x54,0x5F,0x2B,0x13,0xD1};

  MessageService_deletePeekMessageBatch_result(const MessageService_deletePeekMessageBatch_result&);
  MessageService_deletePeekMessageBatch_result& operator=(const MessageService_deletePeekMessageBatch_result&);
  MessageService_deletePeekMessageBatch_result() {
  }

  virtual ~MessageService_deletePeekMessageBatch_result() throw();
  DeletePeekMessageBatchResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_deletePeekMessageBatch_result__isset __isset;

  void __set_success(const DeletePeekMessageBatchResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const MessageService_deletePeekMessageBatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MessageService_deletePeekMessageBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageService_deletePeekMessageBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deletePeekMessageBatch_result& obj);
};

typedef struct _MessageService_deletePeekMessageBatch_presult__isset {
  _MessageService_deletePeekMessageBatch_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MessageService_deletePeekMessageBatch_presult__isset;

class MessageService_deletePeekMessageBatch_presult {
 public:

  static const char* ascii_fingerprint; // = "B8FA4589D2D1B596A9D373545F2B13D1";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0xFA,0x45,0x89,0xD2,0xD1,0xB5,0x96,0xA9,0xD3,0x73,0x54,0x5F,0x2B,0x13,0xD1};


  virtual ~MessageService_deletePeekMessageBatch_presult() throw();
  DeletePeekMessageBatchResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _MessageService_deletePeekMessageBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageService_deletePeekMessageBatch_presult& obj);
};

class MessageServiceClient : virtual public MessageServiceIf, public  ::emq::common::EMQBaseServiceClient {
 public:
  MessageServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::emq::common::EMQBaseServiceClient(prot, prot) {}
  MessageServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::emq::common::EMQBaseServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sendMessage(SendMessageResponse& _return, const SendMessageRequest& sendMessageRequest);
  void send_sendMessage(const SendMessageRequest& sendMessageRequest);
  void recv_sendMessage(SendMessageResponse& _return);
  void sendMessageBatch(SendMessageBatchResponse& _return, const SendMessageBatchRequest& sendMessageBatchRequest);
  void send_sendMessageBatch(const SendMessageBatchRequest& sendMessageBatchRequest);
  void recv_sendMessageBatch(SendMessageBatchResponse& _return);
  void receiveMessage(std::vector<ReceiveMessageResponse> & _return, const ReceiveMessageRequest& receiveMessageRequest);
  void send_receiveMessage(const ReceiveMessageRequest& receiveMessageRequest);
  void recv_receiveMessage(std::vector<ReceiveMessageResponse> & _return);
  void changeMessageVisibilitySeconds(const ChangeMessageVisibilityRequest& changeMessageVisibilityRequest);
  void send_changeMessageVisibilitySeconds(const ChangeMessageVisibilityRequest& changeMessageVisibilityRequest);
  void recv_changeMessageVisibilitySeconds();
  void changeMessageVisibilitySecondsBatch(ChangeMessageVisibilityBatchResponse& _return, const ChangeMessageVisibilityBatchRequest& changeMessageVisibilityBatchRequest);
  void send_changeMessageVisibilitySecondsBatch(const ChangeMessageVisibilityBatchRequest& changeMessageVisibilityBatchRequest);
  void recv_changeMessageVisibilitySecondsBatch(ChangeMessageVisibilityBatchResponse& _return);
  void deleteMessage(const DeleteMessageRequest& deleteMessageRequest);
  void send_deleteMessage(const DeleteMessageRequest& deleteMessageRequest);
  void recv_deleteMessage();
  void deleteMessageBatch(DeleteMessageBatchResponse& _return, const DeleteMessageBatchRequest& deleteMessageBatchRequest);
  void send_deleteMessageBatch(const DeleteMessageBatchRequest& deleteMessageBatchRequest);
  void recv_deleteMessageBatch(DeleteMessageBatchResponse& _return);
  void deadMessage(const DeadMessageRequest& deadMessageRequest);
  void send_deadMessage(const DeadMessageRequest& deadMessageRequest);
  void recv_deadMessage();
  void deadMessageBatch(DeadMessageBatchResponse& _return, const DeadMessageBatchRequest& deadMessageBatchRequest);
  void send_deadMessageBatch(const DeadMessageBatchRequest& deadMessageBatchRequest);
  void recv_deadMessageBatch(DeadMessageBatchResponse& _return);
  void peekMessage(std::vector<PeekMessageResponse> & _return, const PeekMessageRequest& peekMessageRequest);
  void send_peekMessage(const PeekMessageRequest& peekMessageRequest);
  void recv_peekMessage(std::vector<PeekMessageResponse> & _return);
  void deletePeekMessage(const DeletePeekMessageRequest& deletePeekMessageRequest);
  void send_deletePeekMessage(const DeletePeekMessageRequest& deletePeekMessageRequest);
  void recv_deletePeekMessage();
  void deletePeekMessageBatch(DeletePeekMessageBatchResponse& _return, const DeletePeekMessageBatchRequest& deletePeekMessageBatchRequest);
  void send_deletePeekMessageBatch(const DeletePeekMessageBatchRequest& deletePeekMessageBatchRequest);
  void recv_deletePeekMessageBatch(DeletePeekMessageBatchResponse& _return);
};

class MessageServiceProcessor : public  ::emq::common::EMQBaseServiceProcessor {
 protected:
  boost::shared_ptr<MessageServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MessageServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessageBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_receiveMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeMessageVisibilitySeconds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changeMessageVisibilitySecondsBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteMessageBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deadMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deadMessageBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_peekMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePeekMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePeekMessageBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MessageServiceProcessor(boost::shared_ptr<MessageServiceIf> iface) :
     ::emq::common::EMQBaseServiceProcessor(iface),
    iface_(iface) {
    processMap_["sendMessage"] = &MessageServiceProcessor::process_sendMessage;
    processMap_["sendMessageBatch"] = &MessageServiceProcessor::process_sendMessageBatch;
    processMap_["receiveMessage"] = &MessageServiceProcessor::process_receiveMessage;
    processMap_["changeMessageVisibilitySeconds"] = &MessageServiceProcessor::process_changeMessageVisibilitySeconds;
    processMap_["changeMessageVisibilitySecondsBatch"] = &MessageServiceProcessor::process_changeMessageVisibilitySecondsBatch;
    processMap_["deleteMessage"] = &MessageServiceProcessor::process_deleteMessage;
    processMap_["deleteMessageBatch"] = &MessageServiceProcessor::process_deleteMessageBatch;
    processMap_["deadMessage"] = &MessageServiceProcessor::process_deadMessage;
    processMap_["deadMessageBatch"] = &MessageServiceProcessor::process_deadMessageBatch;
    processMap_["peekMessage"] = &MessageServiceProcessor::process_peekMessage;
    processMap_["deletePeekMessage"] = &MessageServiceProcessor::process_deletePeekMessage;
    processMap_["deletePeekMessageBatch"] = &MessageServiceProcessor::process_deletePeekMessageBatch;
  }

  virtual ~MessageServiceProcessor() {}
};

class MessageServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MessageServiceProcessorFactory(const ::boost::shared_ptr< MessageServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MessageServiceIfFactory > handlerFactory_;
};

class MessageServiceMultiface : virtual public MessageServiceIf, public  ::emq::common::EMQBaseServiceMultiface {
 public:
  MessageServiceMultiface(std::vector<boost::shared_ptr<MessageServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<MessageServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::emq::common::EMQBaseServiceMultiface::add(*iter);
    }
  }
  virtual ~MessageServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MessageServiceIf> > ifaces_;
  MessageServiceMultiface() {}
  void add(boost::shared_ptr<MessageServiceIf> iface) {
     ::emq::common::EMQBaseServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void sendMessage(SendMessageResponse& _return, const SendMessageRequest& sendMessageRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessage(_return, sendMessageRequest);
    }
    ifaces_[i]->sendMessage(_return, sendMessageRequest);
    return;
  }

  void sendMessageBatch(SendMessageBatchResponse& _return, const SendMessageBatchRequest& sendMessageBatchRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessageBatch(_return, sendMessageBatchRequest);
    }
    ifaces_[i]->sendMessageBatch(_return, sendMessageBatchRequest);
    return;
  }

  void receiveMessage(std::vector<ReceiveMessageResponse> & _return, const ReceiveMessageRequest& receiveMessageRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->receiveMessage(_return, receiveMessageRequest);
    }
    ifaces_[i]->receiveMessage(_return, receiveMessageRequest);
    return;
  }

  void changeMessageVisibilitySeconds(const ChangeMessageVisibilityRequest& changeMessageVisibilityRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeMessageVisibilitySeconds(changeMessageVisibilityRequest);
    }
    ifaces_[i]->changeMessageVisibilitySeconds(changeMessageVisibilityRequest);
  }

  void changeMessageVisibilitySecondsBatch(ChangeMessageVisibilityBatchResponse& _return, const ChangeMessageVisibilityBatchRequest& changeMessageVisibilityBatchRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changeMessageVisibilitySecondsBatch(_return, changeMessageVisibilityBatchRequest);
    }
    ifaces_[i]->changeMessageVisibilitySecondsBatch(_return, changeMessageVisibilityBatchRequest);
    return;
  }

  void deleteMessage(const DeleteMessageRequest& deleteMessageRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteMessage(deleteMessageRequest);
    }
    ifaces_[i]->deleteMessage(deleteMessageRequest);
  }

  void deleteMessageBatch(DeleteMessageBatchResponse& _return, const DeleteMessageBatchRequest& deleteMessageBatchRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteMessageBatch(_return, deleteMessageBatchRequest);
    }
    ifaces_[i]->deleteMessageBatch(_return, deleteMessageBatchRequest);
    return;
  }

  void deadMessage(const DeadMessageRequest& deadMessageRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deadMessage(deadMessageRequest);
    }
    ifaces_[i]->deadMessage(deadMessageRequest);
  }

  void deadMessageBatch(DeadMessageBatchResponse& _return, const DeadMessageBatchRequest& deadMessageBatchRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deadMessageBatch(_return, deadMessageBatchRequest);
    }
    ifaces_[i]->deadMessageBatch(_return, deadMessageBatchRequest);
    return;
  }

  void peekMessage(std::vector<PeekMessageResponse> & _return, const PeekMessageRequest& peekMessageRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->peekMessage(_return, peekMessageRequest);
    }
    ifaces_[i]->peekMessage(_return, peekMessageRequest);
    return;
  }

  void deletePeekMessage(const DeletePeekMessageRequest& deletePeekMessageRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deletePeekMessage(deletePeekMessageRequest);
    }
    ifaces_[i]->deletePeekMessage(deletePeekMessageRequest);
  }

  void deletePeekMessageBatch(DeletePeekMessageBatchResponse& _return, const DeletePeekMessageBatchRequest& deletePeekMessageBatchRequest) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deletePeekMessageBatch(_return, deletePeekMessageBatchRequest);
    }
    ifaces_[i]->deletePeekMessageBatch(_return, deletePeekMessageBatchRequest);
    return;
  }

};

}} // namespace

#endif
