#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Common_TYPES_H_1
#define Common_TYPES_H_1

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace emq { namespace common {

struct ErrorCode {
  enum type {
    INVALID_ACTION = 1,
    INVALID_ATTRIBUTE = 2,
    QUEUE_DELETED_RECENTLY = 3,
    QUEUE_EXIST = 4,
    QUEUE_NAME_MISSING = 5,
    QUEUE_NOT_EXIST = 6,
    QUEUE_INUSE = 7,
    QUEUE_URI_CONFLICT = 8,
    INVALID_INDEX_ID = 9,
    MESSAGE_BODY_MISSING = 10,
    INVALID_RECEIPT_HANDLE = 11,
    INDEX_NOT_UNIQUE = 12,
    PERMISSION_DENIED = 13,
    REQUEST_LENGTH_EXCEEDED = 34,
    BAD_REQUEST = 35,
    INTERNAL_ERROR = 14,
    PARTITION_NOT_EXIST = 15,
    PARTITION_NOT_RUNNING = 16,
    QUEUE_NOT_CACHED = 17,
    PARTITION_NOT_SERVING = 18,
    TTRANSPORT_ERROR = 19,
    QUOTA_EXCEEDED = 20,
    QUOTA_NOT_EXIST = 21,
    QUOTA_LOCK_FAILED = 22,
    UNKNOWN = 30
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

struct RetryType {
  enum type {
    SAFE = 0,
    UNSAFE = 1,
    UNSURE = 2
  };
};

extern const std::map<int, const char*> _RetryType_VALUES_TO_NAMES;

class GalaxyEmqServiceException;

class Version;

typedef struct _GalaxyEmqServiceException__isset {
  _GalaxyEmqServiceException__isset() : errorCode(false), errMsg(false), details(false), requestId(false), queueName(false) {}
  bool errorCode :1;
  bool errMsg :1;
  bool details :1;
  bool requestId :1;
  bool queueName :1;
} _GalaxyEmqServiceException__isset;

class GalaxyEmqServiceException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "AB6EFCE8BCC752BB39DF6EAFF4BC0E59";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x6E,0xFC,0xE8,0xBC,0xC7,0x52,0xBB,0x39,0xDF,0x6E,0xAF,0xF4,0xBC,0x0E,0x59};

  GalaxyEmqServiceException(const GalaxyEmqServiceException&);
  GalaxyEmqServiceException& operator=(const GalaxyEmqServiceException&);
  GalaxyEmqServiceException() : errorCode(0), errMsg(), details(), requestId(), queueName() {
  }

  virtual ~GalaxyEmqServiceException() throw();
  int32_t errorCode;
  std::string errMsg;
  std::string details;
  std::string requestId;
  std::string queueName;

  _GalaxyEmqServiceException__isset __isset;

  void __set_errorCode(const int32_t val);

  void __set_errMsg(const std::string& val);

  void __set_details(const std::string& val);

  void __set_requestId(const std::string& val);

  void __set_queueName(const std::string& val);

  bool operator == (const GalaxyEmqServiceException & rhs) const
  {
    if (__isset.errorCode != rhs.__isset.errorCode)
      return false;
    else if (__isset.errorCode && !(errorCode == rhs.errorCode))
      return false;
    if (__isset.errMsg != rhs.__isset.errMsg)
      return false;
    else if (__isset.errMsg && !(errMsg == rhs.errMsg))
      return false;
    if (__isset.details != rhs.__isset.details)
      return false;
    else if (__isset.details && !(details == rhs.details))
      return false;
    if (__isset.requestId != rhs.__isset.requestId)
      return false;
    else if (__isset.requestId && !(requestId == rhs.requestId))
      return false;
    if (__isset.queueName != rhs.__isset.queueName)
      return false;
    else if (__isset.queueName && !(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const GalaxyEmqServiceException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GalaxyEmqServiceException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const GalaxyEmqServiceException& obj);
};

void swap(GalaxyEmqServiceException &a, GalaxyEmqServiceException &b);

typedef struct _Version__isset {
  _Version__isset() : details(true) {}
  bool details :1;
} _Version__isset;
#undef major
#undef minor
class Version {
 public:

  static const char* ascii_fingerprint; // = "8C54797AE785863F1D0CEEBA45DA2A4D";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0x54,0x79,0x7A,0xE7,0x85,0x86,0x3F,0x1D,0x0C,0xEE,0xBA,0x45,0xDA,0x2A,0x4D};

  Version(const Version&);
  Version& operator=(const Version&);
  Version() : major(1), minor(0), revision(0), date("19700101"), details("") {
  }

  virtual ~Version() throw();
  int32_t major;
  int32_t minor;
  int32_t revision;
  std::string date;
  std::string details;

  _Version__isset __isset;

  void __set_major(const int32_t val);

  void __set_minor(const int32_t val);

  void __set_revision(const int32_t val);

  void __set_date(const std::string& val);

  void __set_details(const std::string& val);

  bool operator == (const Version & rhs) const
  {
    if (!(major == rhs.major))
      return false;
    if (!(minor == rhs.minor))
      return false;
    if (!(revision == rhs.revision))
      return false;
    if (!(date == rhs.date))
      return false;
    if (__isset.details != rhs.__isset.details)
      return false;
    else if (__isset.details && !(details == rhs.details))
      return false;
    return true;
  }
  bool operator != (const Version &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Version & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Version& obj);
};

void swap(Version &a, Version &b);

}} // namespace

#endif
