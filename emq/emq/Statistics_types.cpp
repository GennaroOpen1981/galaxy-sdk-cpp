/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Statistics_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace emq { namespace statistics {

int _kALERT_TYPEValues[] = {
  ALERT_TYPE::SEND_REQUEST,
  ALERT_TYPE::RECEIVE_REQUEST,
  ALERT_TYPE::CHANGE_REQUEST,
  ALERT_TYPE::DELETE_REQUEST,
  ALERT_TYPE::SINGLE_SEND_REQUEST,
  ALERT_TYPE::BATCH_SEND_REQUEST,
  ALERT_TYPE::SHORT_RECEIVE_REQUEST,
  ALERT_TYPE::LONG_RECEIVE_REQUEST,
  ALERT_TYPE::QUEUE_MESSAGE_NUMBER
};
const char* _kALERT_TYPENames[] = {
  "SEND_REQUEST",
  "RECEIVE_REQUEST",
  "CHANGE_REQUEST",
  "DELETE_REQUEST",
  "SINGLE_SEND_REQUEST",
  "BATCH_SEND_REQUEST",
  "SHORT_RECEIVE_REQUEST",
  "LONG_RECEIVE_REQUEST",
  "QUEUE_MESSAGE_NUMBER"
};
const std::map<int, const char*> _ALERT_TYPE_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kALERT_TYPEValues, _kALERT_TYPENames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMEASUREMENTValues[] = {
  MEASUREMENT::LATENCY,
  MEASUREMENT::LATENCY_P999,
  MEASUREMENT::COUNT
};
const char* _kMEASUREMENTNames[] = {
  "LATENCY",
  "LATENCY_P999",
  "COUNT"
};
const std::map<int, const char*> _MEASUREMENT_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kMEASUREMENTValues, _kMEASUREMENTNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


UserQuota::~UserQuota() throw() {
}


void UserQuota::__set_throughput(const  ::emq::queue::Throughput& val) {
  this->throughput = val;
__isset.throughput = true;
}

void UserQuota::__set_queueNumber(const int64_t val) {
  this->queueNumber = val;
__isset.queueNumber = true;
}

const char* UserQuota::ascii_fingerprint = "A4F1236A747B75995C40BEB78CEE236F";
const uint8_t UserQuota::binary_fingerprint[16] = {0xA4,0xF1,0x23,0x6A,0x74,0x7B,0x75,0x99,0x5C,0x40,0xBE,0xB7,0x8C,0xEE,0x23,0x6F};

uint32_t UserQuota::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->throughput.read(iprot);
          this->__isset.throughput = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->queueNumber);
          this->__isset.queueNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserQuota::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UserQuota");

  if (this->__isset.throughput) {
    xfer += oprot->writeFieldBegin("throughput", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->throughput.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queueNumber) {
    xfer += oprot->writeFieldBegin("queueNumber", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->queueNumber);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UserQuota &a, UserQuota &b) {
  using ::std::swap;
  swap(a.throughput, b.throughput);
  swap(a.queueNumber, b.queueNumber);
  swap(a.__isset, b.__isset);
}

UserQuota::UserQuota(const UserQuota& other0) {
  throughput = other0.throughput;
  queueNumber = other0.queueNumber;
  __isset = other0.__isset;
}
UserQuota& UserQuota::operator=(const UserQuota& other1) {
  throughput = other1.throughput;
  queueNumber = other1.queueNumber;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UserQuota& obj) {
  using apache::thrift::to_string;
  out << "UserQuota(";
  out << "throughput="; (obj.__isset.throughput ? (out << to_string(obj.throughput)) : (out << "<null>"));
  out << ", " << "queueNumber="; (obj.__isset.queueNumber ? (out << to_string(obj.queueNumber)) : (out << "<null>"));
  out << ")";
  return out;
}


SetUserQuotaRequest::~SetUserQuotaRequest() throw() {
}


void SetUserQuotaRequest::__set_developerId(const std::string& val) {
  this->developerId = val;
}

void SetUserQuotaRequest::__set_userQuota(const UserQuota& val) {
  this->userQuota = val;
}

const char* SetUserQuotaRequest::ascii_fingerprint = "3BCCAE0F1DF0E22133EFF24E57487296";
const uint8_t SetUserQuotaRequest::binary_fingerprint[16] = {0x3B,0xCC,0xAE,0x0F,0x1D,0xF0,0xE2,0x21,0x33,0xEF,0xF2,0x4E,0x57,0x48,0x72,0x96};

uint32_t SetUserQuotaRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_developerId = false;
  bool isset_userQuota = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->developerId);
          isset_developerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userQuota.read(iprot);
          isset_userQuota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_developerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_userQuota)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SetUserQuotaRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SetUserQuotaRequest");

  xfer += oprot->writeFieldBegin("developerId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->developerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userQuota", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->userQuota.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SetUserQuotaRequest &a, SetUserQuotaRequest &b) {
  using ::std::swap;
  swap(a.developerId, b.developerId);
  swap(a.userQuota, b.userQuota);
}

SetUserQuotaRequest::SetUserQuotaRequest(const SetUserQuotaRequest& other2) {
  developerId = other2.developerId;
  userQuota = other2.userQuota;
}
SetUserQuotaRequest& SetUserQuotaRequest::operator=(const SetUserQuotaRequest& other3) {
  developerId = other3.developerId;
  userQuota = other3.userQuota;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SetUserQuotaRequest& obj) {
  using apache::thrift::to_string;
  out << "SetUserQuotaRequest(";
  out << "developerId=" << to_string(obj.developerId);
  out << ", " << "userQuota=" << to_string(obj.userQuota);
  out << ")";
  return out;
}


GetUserQuotaRequest::~GetUserQuotaRequest() throw() {
}


void GetUserQuotaRequest::__set_developerId(const std::string& val) {
  this->developerId = val;
__isset.developerId = true;
}

const char* GetUserQuotaRequest::ascii_fingerprint = "66E694018C17E5B65A59AE8F55CCA3CD";
const uint8_t GetUserQuotaRequest::binary_fingerprint[16] = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

uint32_t GetUserQuotaRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->developerId);
          this->__isset.developerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetUserQuotaRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetUserQuotaRequest");

  if (this->__isset.developerId) {
    xfer += oprot->writeFieldBegin("developerId", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->developerId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetUserQuotaRequest &a, GetUserQuotaRequest &b) {
  using ::std::swap;
  swap(a.developerId, b.developerId);
  swap(a.__isset, b.__isset);
}

GetUserQuotaRequest::GetUserQuotaRequest(const GetUserQuotaRequest& other4) {
  developerId = other4.developerId;
  __isset = other4.__isset;
}
GetUserQuotaRequest& GetUserQuotaRequest::operator=(const GetUserQuotaRequest& other5) {
  developerId = other5.developerId;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetUserQuotaRequest& obj) {
  using apache::thrift::to_string;
  out << "GetUserQuotaRequest(";
  out << "developerId="; (obj.__isset.developerId ? (out << to_string(obj.developerId)) : (out << "<null>"));
  out << ")";
  return out;
}


GetUserQuotaResponse::~GetUserQuotaResponse() throw() {
}


void GetUserQuotaResponse::__set_developerId(const std::string& val) {
  this->developerId = val;
}

void GetUserQuotaResponse::__set_userQuota(const UserQuota& val) {
  this->userQuota = val;
}

const char* GetUserQuotaResponse::ascii_fingerprint = "3BCCAE0F1DF0E22133EFF24E57487296";
const uint8_t GetUserQuotaResponse::binary_fingerprint[16] = {0x3B,0xCC,0xAE,0x0F,0x1D,0xF0,0xE2,0x21,0x33,0xEF,0xF2,0x4E,0x57,0x48,0x72,0x96};

uint32_t GetUserQuotaResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_developerId = false;
  bool isset_userQuota = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->developerId);
          isset_developerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userQuota.read(iprot);
          isset_userQuota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_developerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_userQuota)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetUserQuotaResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetUserQuotaResponse");

  xfer += oprot->writeFieldBegin("developerId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->developerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userQuota", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->userQuota.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetUserQuotaResponse &a, GetUserQuotaResponse &b) {
  using ::std::swap;
  swap(a.developerId, b.developerId);
  swap(a.userQuota, b.userQuota);
}

GetUserQuotaResponse::GetUserQuotaResponse(const GetUserQuotaResponse& other6) {
  developerId = other6.developerId;
  userQuota = other6.userQuota;
}
GetUserQuotaResponse& GetUserQuotaResponse::operator=(const GetUserQuotaResponse& other7) {
  developerId = other7.developerId;
  userQuota = other7.userQuota;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetUserQuotaResponse& obj) {
  using apache::thrift::to_string;
  out << "GetUserQuotaResponse(";
  out << "developerId=" << to_string(obj.developerId);
  out << ", " << "userQuota=" << to_string(obj.userQuota);
  out << ")";
  return out;
}


GetUserUsedQuotaRequest::~GetUserUsedQuotaRequest() throw() {
}


void GetUserUsedQuotaRequest::__set_developerId(const std::string& val) {
  this->developerId = val;
__isset.developerId = true;
}

const char* GetUserUsedQuotaRequest::ascii_fingerprint = "66E694018C17E5B65A59AE8F55CCA3CD";
const uint8_t GetUserUsedQuotaRequest::binary_fingerprint[16] = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

uint32_t GetUserUsedQuotaRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->developerId);
          this->__isset.developerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetUserUsedQuotaRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetUserUsedQuotaRequest");

  if (this->__isset.developerId) {
    xfer += oprot->writeFieldBegin("developerId", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->developerId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetUserUsedQuotaRequest &a, GetUserUsedQuotaRequest &b) {
  using ::std::swap;
  swap(a.developerId, b.developerId);
  swap(a.__isset, b.__isset);
}

GetUserUsedQuotaRequest::GetUserUsedQuotaRequest(const GetUserUsedQuotaRequest& other8) {
  developerId = other8.developerId;
  __isset = other8.__isset;
}
GetUserUsedQuotaRequest& GetUserUsedQuotaRequest::operator=(const GetUserUsedQuotaRequest& other9) {
  developerId = other9.developerId;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetUserUsedQuotaRequest& obj) {
  using apache::thrift::to_string;
  out << "GetUserUsedQuotaRequest(";
  out << "developerId="; (obj.__isset.developerId ? (out << to_string(obj.developerId)) : (out << "<null>"));
  out << ")";
  return out;
}


SetUserInfoRequest::~SetUserInfoRequest() throw() {
}


void SetUserInfoRequest::__set_developerId(const std::string& val) {
  this->developerId = val;
__isset.developerId = true;
}

void SetUserInfoRequest::__set_userName(const std::string& val) {
  this->userName = val;
__isset.userName = true;
}

void SetUserInfoRequest::__set_email(const std::string& val) {
  this->email = val;
__isset.email = true;
}

void SetUserInfoRequest::__set_sms(const std::string& val) {
  this->sms = val;
__isset.sms = true;
}

const char* SetUserInfoRequest::ascii_fingerprint = "7F96769A10DED7E9839D38968220F75A";
const uint8_t SetUserInfoRequest::binary_fingerprint[16] = {0x7F,0x96,0x76,0x9A,0x10,0xDE,0xD7,0xE9,0x83,0x9D,0x38,0x96,0x82,0x20,0xF7,0x5A};

uint32_t SetUserInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->developerId);
          this->__isset.developerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sms);
          this->__isset.sms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetUserInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SetUserInfoRequest");

  if (this->__isset.developerId) {
    xfer += oprot->writeFieldBegin("developerId", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->developerId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userName) {
    xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->userName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sms) {
    xfer += oprot->writeFieldBegin("sms", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->sms);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SetUserInfoRequest &a, SetUserInfoRequest &b) {
  using ::std::swap;
  swap(a.developerId, b.developerId);
  swap(a.userName, b.userName);
  swap(a.email, b.email);
  swap(a.sms, b.sms);
  swap(a.__isset, b.__isset);
}

SetUserInfoRequest::SetUserInfoRequest(const SetUserInfoRequest& other10) {
  developerId = other10.developerId;
  userName = other10.userName;
  email = other10.email;
  sms = other10.sms;
  __isset = other10.__isset;
}
SetUserInfoRequest& SetUserInfoRequest::operator=(const SetUserInfoRequest& other11) {
  developerId = other11.developerId;
  userName = other11.userName;
  email = other11.email;
  sms = other11.sms;
  __isset = other11.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SetUserInfoRequest& obj) {
  using apache::thrift::to_string;
  out << "SetUserInfoRequest(";
  out << "developerId="; (obj.__isset.developerId ? (out << to_string(obj.developerId)) : (out << "<null>"));
  out << ", " << "userName="; (obj.__isset.userName ? (out << to_string(obj.userName)) : (out << "<null>"));
  out << ", " << "email="; (obj.__isset.email ? (out << to_string(obj.email)) : (out << "<null>"));
  out << ", " << "sms="; (obj.__isset.sms ? (out << to_string(obj.sms)) : (out << "<null>"));
  out << ")";
  return out;
}


GetUserInfoRequest::~GetUserInfoRequest() throw() {
}


void GetUserInfoRequest::__set_developerId(const std::string& val) {
  this->developerId = val;
__isset.developerId = true;
}

const char* GetUserInfoRequest::ascii_fingerprint = "66E694018C17E5B65A59AE8F55CCA3CD";
const uint8_t GetUserInfoRequest::binary_fingerprint[16] = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

uint32_t GetUserInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->developerId);
          this->__isset.developerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetUserInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetUserInfoRequest");

  if (this->__isset.developerId) {
    xfer += oprot->writeFieldBegin("developerId", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->developerId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetUserInfoRequest &a, GetUserInfoRequest &b) {
  using ::std::swap;
  swap(a.developerId, b.developerId);
  swap(a.__isset, b.__isset);
}

GetUserInfoRequest::GetUserInfoRequest(const GetUserInfoRequest& other12) {
  developerId = other12.developerId;
  __isset = other12.__isset;
}
GetUserInfoRequest& GetUserInfoRequest::operator=(const GetUserInfoRequest& other13) {
  developerId = other13.developerId;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetUserInfoRequest& obj) {
  using apache::thrift::to_string;
  out << "GetUserInfoRequest(";
  out << "developerId="; (obj.__isset.developerId ? (out << to_string(obj.developerId)) : (out << "<null>"));
  out << ")";
  return out;
}


GetUserInfoResponse::~GetUserInfoResponse() throw() {
}


void GetUserInfoResponse::__set_developerId(const std::string& val) {
  this->developerId = val;
}

void GetUserInfoResponse::__set_userName(const std::string& val) {
  this->userName = val;
__isset.userName = true;
}

void GetUserInfoResponse::__set_email(const std::string& val) {
  this->email = val;
__isset.email = true;
}

void GetUserInfoResponse::__set_sms(const std::string& val) {
  this->sms = val;
__isset.sms = true;
}

const char* GetUserInfoResponse::ascii_fingerprint = "6BA700CA2E5FC52A8DA5ADCF811DC8DA";
const uint8_t GetUserInfoResponse::binary_fingerprint[16] = {0x6B,0xA7,0x00,0xCA,0x2E,0x5F,0xC5,0x2A,0x8D,0xA5,0xAD,0xCF,0x81,0x1D,0xC8,0xDA};

uint32_t GetUserInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_developerId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->developerId);
          isset_developerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sms);
          this->__isset.sms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_developerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetUserInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetUserInfoResponse");

  xfer += oprot->writeFieldBegin("developerId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->developerId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.userName) {
    xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->userName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.email) {
    xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->email);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sms) {
    xfer += oprot->writeFieldBegin("sms", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->sms);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetUserInfoResponse &a, GetUserInfoResponse &b) {
  using ::std::swap;
  swap(a.developerId, b.developerId);
  swap(a.userName, b.userName);
  swap(a.email, b.email);
  swap(a.sms, b.sms);
  swap(a.__isset, b.__isset);
}

GetUserInfoResponse::GetUserInfoResponse(const GetUserInfoResponse& other14) {
  developerId = other14.developerId;
  userName = other14.userName;
  email = other14.email;
  sms = other14.sms;
  __isset = other14.__isset;
}
GetUserInfoResponse& GetUserInfoResponse::operator=(const GetUserInfoResponse& other15) {
  developerId = other15.developerId;
  userName = other15.userName;
  email = other15.email;
  sms = other15.sms;
  __isset = other15.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetUserInfoResponse& obj) {
  using apache::thrift::to_string;
  out << "GetUserInfoResponse(";
  out << "developerId=" << to_string(obj.developerId);
  out << ", " << "userName="; (obj.__isset.userName ? (out << to_string(obj.userName)) : (out << "<null>"));
  out << ", " << "email="; (obj.__isset.email ? (out << to_string(obj.email)) : (out << "<null>"));
  out << ", " << "sms="; (obj.__isset.sms ? (out << to_string(obj.sms)) : (out << "<null>"));
  out << ")";
  return out;
}


AlertPolicy::~AlertPolicy() throw() {
}


void AlertPolicy::__set_type(const ALERT_TYPE::type val) {
  this->type = val;
}

void AlertPolicy::__set_measurement(const MEASUREMENT::type val) {
  this->measurement = val;
}

void AlertPolicy::__set_threshold(const double val) {
  this->threshold = val;
__isset.threshold = true;
}

const char* AlertPolicy::ascii_fingerprint = "EDABF4344F13686F552E82EB23B25CB4";
const uint8_t AlertPolicy::binary_fingerprint[16] = {0xED,0xAB,0xF4,0x34,0x4F,0x13,0x68,0x6F,0x55,0x2E,0x82,0xEB,0x23,0xB2,0x5C,0xB4};

uint32_t AlertPolicy::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_measurement = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->type = (ALERT_TYPE::type)ecast16;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast17;
          xfer += iprot->readI32(ecast17);
          this->measurement = (MEASUREMENT::type)ecast17;
          isset_measurement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->threshold);
          this->__isset.threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_measurement)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AlertPolicy::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AlertPolicy");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("measurement", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->measurement);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.threshold) {
    xfer += oprot->writeFieldBegin("threshold", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->threshold);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AlertPolicy &a, AlertPolicy &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.measurement, b.measurement);
  swap(a.threshold, b.threshold);
  swap(a.__isset, b.__isset);
}

AlertPolicy::AlertPolicy(const AlertPolicy& other18) {
  type = other18.type;
  measurement = other18.measurement;
  threshold = other18.threshold;
  __isset = other18.__isset;
}
AlertPolicy& AlertPolicy::operator=(const AlertPolicy& other19) {
  type = other19.type;
  measurement = other19.measurement;
  threshold = other19.threshold;
  __isset = other19.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AlertPolicy& obj) {
  using apache::thrift::to_string;
  out << "AlertPolicy(";
  out << "type=" << to_string(obj.type);
  out << ", " << "measurement=" << to_string(obj.measurement);
  out << ", " << "threshold="; (obj.__isset.threshold ? (out << to_string(obj.threshold)) : (out << "<null>"));
  out << ")";
  return out;
}


AddQueueAlertPolicyRequest::~AddQueueAlertPolicyRequest() throw() {
}


void AddQueueAlertPolicyRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void AddQueueAlertPolicyRequest::__set_alertPolicy(const AlertPolicy& val) {
  this->alertPolicy = val;
}

const char* AddQueueAlertPolicyRequest::ascii_fingerprint = "DA15389740368E74ADDCB1FFC7913A0B";
const uint8_t AddQueueAlertPolicyRequest::binary_fingerprint[16] = {0xDA,0x15,0x38,0x97,0x40,0x36,0x8E,0x74,0xAD,0xDC,0xB1,0xFF,0xC7,0x91,0x3A,0x0B};

uint32_t AddQueueAlertPolicyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_alertPolicy = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alertPolicy.read(iprot);
          isset_alertPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_alertPolicy)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddQueueAlertPolicyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AddQueueAlertPolicyRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alertPolicy", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->alertPolicy.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AddQueueAlertPolicyRequest &a, AddQueueAlertPolicyRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.alertPolicy, b.alertPolicy);
}

AddQueueAlertPolicyRequest::AddQueueAlertPolicyRequest(const AddQueueAlertPolicyRequest& other20) {
  queueName = other20.queueName;
  alertPolicy = other20.alertPolicy;
}
AddQueueAlertPolicyRequest& AddQueueAlertPolicyRequest::operator=(const AddQueueAlertPolicyRequest& other21) {
  queueName = other21.queueName;
  alertPolicy = other21.alertPolicy;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AddQueueAlertPolicyRequest& obj) {
  using apache::thrift::to_string;
  out << "AddQueueAlertPolicyRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "alertPolicy=" << to_string(obj.alertPolicy);
  out << ")";
  return out;
}


AddTagAlertPolicyRequest::~AddTagAlertPolicyRequest() throw() {
}


void AddTagAlertPolicyRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void AddTagAlertPolicyRequest::__set_tagName(const std::string& val) {
  this->tagName = val;
__isset.tagName = true;
}

void AddTagAlertPolicyRequest::__set_alertPolicy(const AlertPolicy& val) {
  this->alertPolicy = val;
}

const char* AddTagAlertPolicyRequest::ascii_fingerprint = "C90CF61D96A5CBF437AE3E217046FCCB";
const uint8_t AddTagAlertPolicyRequest::binary_fingerprint[16] = {0xC9,0x0C,0xF6,0x1D,0x96,0xA5,0xCB,0xF4,0x37,0xAE,0x3E,0x21,0x70,0x46,0xFC,0xCB};

uint32_t AddTagAlertPolicyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_alertPolicy = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          this->__isset.tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alertPolicy.read(iprot);
          isset_alertPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_alertPolicy)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddTagAlertPolicyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AddTagAlertPolicyRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tagName) {
    xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->tagName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("alertPolicy", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->alertPolicy.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AddTagAlertPolicyRequest &a, AddTagAlertPolicyRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.tagName, b.tagName);
  swap(a.alertPolicy, b.alertPolicy);
  swap(a.__isset, b.__isset);
}

AddTagAlertPolicyRequest::AddTagAlertPolicyRequest(const AddTagAlertPolicyRequest& other22) {
  queueName = other22.queueName;
  tagName = other22.tagName;
  alertPolicy = other22.alertPolicy;
  __isset = other22.__isset;
}
AddTagAlertPolicyRequest& AddTagAlertPolicyRequest::operator=(const AddTagAlertPolicyRequest& other23) {
  queueName = other23.queueName;
  tagName = other23.tagName;
  alertPolicy = other23.alertPolicy;
  __isset = other23.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AddTagAlertPolicyRequest& obj) {
  using apache::thrift::to_string;
  out << "AddTagAlertPolicyRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "tagName="; (obj.__isset.tagName ? (out << to_string(obj.tagName)) : (out << "<null>"));
  out << ", " << "alertPolicy=" << to_string(obj.alertPolicy);
  out << ")";
  return out;
}


DeleteQueueAlertPolicyRequest::~DeleteQueueAlertPolicyRequest() throw() {
}


void DeleteQueueAlertPolicyRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void DeleteQueueAlertPolicyRequest::__set_alertPolicy(const AlertPolicy& val) {
  this->alertPolicy = val;
}

const char* DeleteQueueAlertPolicyRequest::ascii_fingerprint = "DA15389740368E74ADDCB1FFC7913A0B";
const uint8_t DeleteQueueAlertPolicyRequest::binary_fingerprint[16] = {0xDA,0x15,0x38,0x97,0x40,0x36,0x8E,0x74,0xAD,0xDC,0xB1,0xFF,0xC7,0x91,0x3A,0x0B};

uint32_t DeleteQueueAlertPolicyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_alertPolicy = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alertPolicy.read(iprot);
          isset_alertPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_alertPolicy)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeleteQueueAlertPolicyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeleteQueueAlertPolicyRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alertPolicy", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->alertPolicy.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeleteQueueAlertPolicyRequest &a, DeleteQueueAlertPolicyRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.alertPolicy, b.alertPolicy);
}

DeleteQueueAlertPolicyRequest::DeleteQueueAlertPolicyRequest(const DeleteQueueAlertPolicyRequest& other24) {
  queueName = other24.queueName;
  alertPolicy = other24.alertPolicy;
}
DeleteQueueAlertPolicyRequest& DeleteQueueAlertPolicyRequest::operator=(const DeleteQueueAlertPolicyRequest& other25) {
  queueName = other25.queueName;
  alertPolicy = other25.alertPolicy;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeleteQueueAlertPolicyRequest& obj) {
  using apache::thrift::to_string;
  out << "DeleteQueueAlertPolicyRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "alertPolicy=" << to_string(obj.alertPolicy);
  out << ")";
  return out;
}


DeleteTagAlertPolicyRequest::~DeleteTagAlertPolicyRequest() throw() {
}


void DeleteTagAlertPolicyRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void DeleteTagAlertPolicyRequest::__set_tagName(const std::string& val) {
  this->tagName = val;
__isset.tagName = true;
}

void DeleteTagAlertPolicyRequest::__set_alertPolicy(const AlertPolicy& val) {
  this->alertPolicy = val;
}

const char* DeleteTagAlertPolicyRequest::ascii_fingerprint = "C90CF61D96A5CBF437AE3E217046FCCB";
const uint8_t DeleteTagAlertPolicyRequest::binary_fingerprint[16] = {0xC9,0x0C,0xF6,0x1D,0x96,0xA5,0xCB,0xF4,0x37,0xAE,0x3E,0x21,0x70,0x46,0xFC,0xCB};

uint32_t DeleteTagAlertPolicyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_alertPolicy = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          this->__isset.tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alertPolicy.read(iprot);
          isset_alertPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_alertPolicy)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeleteTagAlertPolicyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeleteTagAlertPolicyRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tagName) {
    xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->tagName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("alertPolicy", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->alertPolicy.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeleteTagAlertPolicyRequest &a, DeleteTagAlertPolicyRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.tagName, b.tagName);
  swap(a.alertPolicy, b.alertPolicy);
  swap(a.__isset, b.__isset);
}

DeleteTagAlertPolicyRequest::DeleteTagAlertPolicyRequest(const DeleteTagAlertPolicyRequest& other26) {
  queueName = other26.queueName;
  tagName = other26.tagName;
  alertPolicy = other26.alertPolicy;
  __isset = other26.__isset;
}
DeleteTagAlertPolicyRequest& DeleteTagAlertPolicyRequest::operator=(const DeleteTagAlertPolicyRequest& other27) {
  queueName = other27.queueName;
  tagName = other27.tagName;
  alertPolicy = other27.alertPolicy;
  __isset = other27.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeleteTagAlertPolicyRequest& obj) {
  using apache::thrift::to_string;
  out << "DeleteTagAlertPolicyRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "tagName="; (obj.__isset.tagName ? (out << to_string(obj.tagName)) : (out << "<null>"));
  out << ", " << "alertPolicy=" << to_string(obj.alertPolicy);
  out << ")";
  return out;
}


ListQueueAlertPoliciesRequest::~ListQueueAlertPoliciesRequest() throw() {
}


void ListQueueAlertPoliciesRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

const char* ListQueueAlertPoliciesRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ListQueueAlertPoliciesRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ListQueueAlertPoliciesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ListQueueAlertPoliciesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ListQueueAlertPoliciesRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ListQueueAlertPoliciesRequest &a, ListQueueAlertPoliciesRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
}

ListQueueAlertPoliciesRequest::ListQueueAlertPoliciesRequest(const ListQueueAlertPoliciesRequest& other28) {
  queueName = other28.queueName;
}
ListQueueAlertPoliciesRequest& ListQueueAlertPoliciesRequest::operator=(const ListQueueAlertPoliciesRequest& other29) {
  queueName = other29.queueName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ListQueueAlertPoliciesRequest& obj) {
  using apache::thrift::to_string;
  out << "ListQueueAlertPoliciesRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ")";
  return out;
}


ListTagAlertPoliciesRequest::~ListTagAlertPoliciesRequest() throw() {
}


void ListTagAlertPoliciesRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void ListTagAlertPoliciesRequest::__set_tagName(const std::string& val) {
  this->tagName = val;
__isset.tagName = true;
}

const char* ListTagAlertPoliciesRequest::ascii_fingerprint = "5B708A954C550ECA9C1A49D3C5CAFAB9";
const uint8_t ListTagAlertPoliciesRequest::binary_fingerprint[16] = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

uint32_t ListTagAlertPoliciesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          this->__isset.tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ListTagAlertPoliciesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ListTagAlertPoliciesRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tagName) {
    xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->tagName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ListTagAlertPoliciesRequest &a, ListTagAlertPoliciesRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.tagName, b.tagName);
  swap(a.__isset, b.__isset);
}

ListTagAlertPoliciesRequest::ListTagAlertPoliciesRequest(const ListTagAlertPoliciesRequest& other30) {
  queueName = other30.queueName;
  tagName = other30.tagName;
  __isset = other30.__isset;
}
ListTagAlertPoliciesRequest& ListTagAlertPoliciesRequest::operator=(const ListTagAlertPoliciesRequest& other31) {
  queueName = other31.queueName;
  tagName = other31.tagName;
  __isset = other31.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ListTagAlertPoliciesRequest& obj) {
  using apache::thrift::to_string;
  out << "ListTagAlertPoliciesRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "tagName="; (obj.__isset.tagName ? (out << to_string(obj.tagName)) : (out << "<null>"));
  out << ")";
  return out;
}


ListQueueAlertPoliciesResponse::~ListQueueAlertPoliciesResponse() throw() {
}


void ListQueueAlertPoliciesResponse::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void ListQueueAlertPoliciesResponse::__set_alertPolicies(const std::vector<AlertPolicy> & val) {
  this->alertPolicies = val;
}

const char* ListQueueAlertPoliciesResponse::ascii_fingerprint = "F1A17D3AF39EBA746EE167BB954BC653";
const uint8_t ListQueueAlertPoliciesResponse::binary_fingerprint[16] = {0xF1,0xA1,0x7D,0x3A,0xF3,0x9E,0xBA,0x74,0x6E,0xE1,0x67,0xBB,0x95,0x4B,0xC6,0x53};

uint32_t ListQueueAlertPoliciesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_alertPolicies = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->alertPolicies.clear();
            uint32_t _size32;
            ::apache::thrift::protocol::TType _etype35;
            xfer += iprot->readListBegin(_etype35, _size32);
            this->alertPolicies.resize(_size32);
            uint32_t _i36;
            for (_i36 = 0; _i36 < _size32; ++_i36)
            {
              xfer += this->alertPolicies[_i36].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_alertPolicies = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_alertPolicies)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ListQueueAlertPoliciesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ListQueueAlertPoliciesResponse");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alertPolicies", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->alertPolicies.size()));
    std::vector<AlertPolicy> ::const_iterator _iter37;
    for (_iter37 = this->alertPolicies.begin(); _iter37 != this->alertPolicies.end(); ++_iter37)
    {
      xfer += (*_iter37).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ListQueueAlertPoliciesResponse &a, ListQueueAlertPoliciesResponse &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.alertPolicies, b.alertPolicies);
}

ListQueueAlertPoliciesResponse::ListQueueAlertPoliciesResponse(const ListQueueAlertPoliciesResponse& other38) {
  queueName = other38.queueName;
  alertPolicies = other38.alertPolicies;
}
ListQueueAlertPoliciesResponse& ListQueueAlertPoliciesResponse::operator=(const ListQueueAlertPoliciesResponse& other39) {
  queueName = other39.queueName;
  alertPolicies = other39.alertPolicies;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ListQueueAlertPoliciesResponse& obj) {
  using apache::thrift::to_string;
  out << "ListQueueAlertPoliciesResponse(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "alertPolicies=" << to_string(obj.alertPolicies);
  out << ")";
  return out;
}


ListTagAlertPoliciesResponse::~ListTagAlertPoliciesResponse() throw() {
}


void ListTagAlertPoliciesResponse::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void ListTagAlertPoliciesResponse::__set_tagName(const std::string& val) {
  this->tagName = val;
__isset.tagName = true;
}

void ListTagAlertPoliciesResponse::__set_alertPolicies(const std::vector<AlertPolicy> & val) {
  this->alertPolicies = val;
}

const char* ListTagAlertPoliciesResponse::ascii_fingerprint = "5DAFDD7273B44E4371DCB6C8F2F01148";
const uint8_t ListTagAlertPoliciesResponse::binary_fingerprint[16] = {0x5D,0xAF,0xDD,0x72,0x73,0xB4,0x4E,0x43,0x71,0xDC,0xB6,0xC8,0xF2,0xF0,0x11,0x48};

uint32_t ListTagAlertPoliciesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_alertPolicies = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          this->__isset.tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->alertPolicies.clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _etype43;
            xfer += iprot->readListBegin(_etype43, _size40);
            this->alertPolicies.resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              xfer += this->alertPolicies[_i44].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_alertPolicies = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_alertPolicies)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ListTagAlertPoliciesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ListTagAlertPoliciesResponse");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tagName) {
    xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->tagName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("alertPolicies", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->alertPolicies.size()));
    std::vector<AlertPolicy> ::const_iterator _iter45;
    for (_iter45 = this->alertPolicies.begin(); _iter45 != this->alertPolicies.end(); ++_iter45)
    {
      xfer += (*_iter45).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ListTagAlertPoliciesResponse &a, ListTagAlertPoliciesResponse &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.tagName, b.tagName);
  swap(a.alertPolicies, b.alertPolicies);
  swap(a.__isset, b.__isset);
}

ListTagAlertPoliciesResponse::ListTagAlertPoliciesResponse(const ListTagAlertPoliciesResponse& other46) {
  queueName = other46.queueName;
  tagName = other46.tagName;
  alertPolicies = other46.alertPolicies;
  __isset = other46.__isset;
}
ListTagAlertPoliciesResponse& ListTagAlertPoliciesResponse::operator=(const ListTagAlertPoliciesResponse& other47) {
  queueName = other47.queueName;
  tagName = other47.tagName;
  alertPolicies = other47.alertPolicies;
  __isset = other47.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ListTagAlertPoliciesResponse& obj) {
  using apache::thrift::to_string;
  out << "ListTagAlertPoliciesResponse(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "tagName="; (obj.__isset.tagName ? (out << to_string(obj.tagName)) : (out << "<null>"));
  out << ", " << "alertPolicies=" << to_string(obj.alertPolicies);
  out << ")";
  return out;
}


SetQueueDailyStatisticsStateRequest::~SetQueueDailyStatisticsStateRequest() throw() {
}


void SetQueueDailyStatisticsStateRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void SetQueueDailyStatisticsStateRequest::__set_enabled(const bool val) {
  this->enabled = val;
}

const char* SetQueueDailyStatisticsStateRequest::ascii_fingerprint = "7D61C9AA00102AB4D8F72A1DA58297DC";
const uint8_t SetQueueDailyStatisticsStateRequest::binary_fingerprint[16] = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

uint32_t SetQueueDailyStatisticsStateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_enabled = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          isset_enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enabled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SetQueueDailyStatisticsStateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SetQueueDailyStatisticsStateRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SetQueueDailyStatisticsStateRequest &a, SetQueueDailyStatisticsStateRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.enabled, b.enabled);
}

SetQueueDailyStatisticsStateRequest::SetQueueDailyStatisticsStateRequest(const SetQueueDailyStatisticsStateRequest& other48) {
  queueName = other48.queueName;
  enabled = other48.enabled;
}
SetQueueDailyStatisticsStateRequest& SetQueueDailyStatisticsStateRequest::operator=(const SetQueueDailyStatisticsStateRequest& other49) {
  queueName = other49.queueName;
  enabled = other49.enabled;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SetQueueDailyStatisticsStateRequest& obj) {
  using apache::thrift::to_string;
  out << "SetQueueDailyStatisticsStateRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "enabled=" << to_string(obj.enabled);
  out << ")";
  return out;
}


GetQueueDailyStatisticsStateRequest::~GetQueueDailyStatisticsStateRequest() throw() {
}


void GetQueueDailyStatisticsStateRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

const char* GetQueueDailyStatisticsStateRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t GetQueueDailyStatisticsStateRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t GetQueueDailyStatisticsStateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetQueueDailyStatisticsStateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetQueueDailyStatisticsStateRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetQueueDailyStatisticsStateRequest &a, GetQueueDailyStatisticsStateRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
}

GetQueueDailyStatisticsStateRequest::GetQueueDailyStatisticsStateRequest(const GetQueueDailyStatisticsStateRequest& other50) {
  queueName = other50.queueName;
}
GetQueueDailyStatisticsStateRequest& GetQueueDailyStatisticsStateRequest::operator=(const GetQueueDailyStatisticsStateRequest& other51) {
  queueName = other51.queueName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetQueueDailyStatisticsStateRequest& obj) {
  using apache::thrift::to_string;
  out << "GetQueueDailyStatisticsStateRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ")";
  return out;
}


GetQueueDailyStatisticsStateResponse::~GetQueueDailyStatisticsStateResponse() throw() {
}


void GetQueueDailyStatisticsStateResponse::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void GetQueueDailyStatisticsStateResponse::__set_enabled(const bool val) {
  this->enabled = val;
}

const char* GetQueueDailyStatisticsStateResponse::ascii_fingerprint = "7D61C9AA00102AB4D8F72A1DA58297DC";
const uint8_t GetQueueDailyStatisticsStateResponse::binary_fingerprint[16] = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

uint32_t GetQueueDailyStatisticsStateResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_enabled = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          isset_enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enabled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetQueueDailyStatisticsStateResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetQueueDailyStatisticsStateResponse");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetQueueDailyStatisticsStateResponse &a, GetQueueDailyStatisticsStateResponse &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.enabled, b.enabled);
}

GetQueueDailyStatisticsStateResponse::GetQueueDailyStatisticsStateResponse(const GetQueueDailyStatisticsStateResponse& other52) {
  queueName = other52.queueName;
  enabled = other52.enabled;
}
GetQueueDailyStatisticsStateResponse& GetQueueDailyStatisticsStateResponse::operator=(const GetQueueDailyStatisticsStateResponse& other53) {
  queueName = other53.queueName;
  enabled = other53.enabled;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetQueueDailyStatisticsStateResponse& obj) {
  using apache::thrift::to_string;
  out << "GetQueueDailyStatisticsStateResponse(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "enabled=" << to_string(obj.enabled);
  out << ")";
  return out;
}

}} // namespace
