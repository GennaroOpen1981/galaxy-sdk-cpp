#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Message_TYPES_H
#define Message_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Common_types.h"


namespace emq { namespace message {

class MessageAttribute;

class SendMessageRequest;

class SendMessageResponse;

class SendMessageBatchRequestEntry;

class SendMessageBatchRequest;

class SendMessageBatchResponseEntry;

class MessageBatchErrorEntry;

class SendMessageBatchResponse;

class ReceiveMessageRequest;

class ReceiveMessageResponse;

class ChangeMessageVisibilityRequest;

class ChangeMessageVisibilityBatchRequestEntry;

class ChangeMessageVisibilityBatchRequest;

class ChangeMessageVisibilityBatchResponse;

class DeleteMessageRequest;

class DeleteMessageBatchRequestEntry;

class DeleteMessageBatchRequest;

class DeleteMessageBatchResponse;

class DeadMessageRequest;

class DeadMessageBatchRequestEntry;

class DeadMessageBatchRequest;

class DeadMessageBatchResponse;

class PeekMessageResponse;

class DeletePeekMessageRequest;

class DeletePeekMessageBatchEntry;

class DeletePeekMessageBatchRequest;

class DeletePeekMessageBatchResponse;

class PartitionTimeIntervalAndMaxNum;

class PeekMessageArg;

class PeekMessageRequest;

typedef struct _MessageAttribute__isset {
  _MessageAttribute__isset() : stringValue(false), binaryValue(false) {}
  bool stringValue :1;
  bool binaryValue :1;
} _MessageAttribute__isset;

class MessageAttribute {
 public:

  static const char* ascii_fingerprint; // = "4BF81DD46A7371532E49811022D58D36";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xF8,0x1D,0xD4,0x6A,0x73,0x71,0x53,0x2E,0x49,0x81,0x10,0x22,0xD5,0x8D,0x36};

  MessageAttribute(const MessageAttribute&);
  MessageAttribute& operator=(const MessageAttribute&);
  MessageAttribute() : type(), stringValue(), binaryValue() {
  }

  virtual ~MessageAttribute() throw();
  std::string type;
  std::string stringValue;
  std::string binaryValue;

  _MessageAttribute__isset __isset;

  void __set_type(const std::string& val);

  void __set_stringValue(const std::string& val);

  void __set_binaryValue(const std::string& val);

  bool operator == (const MessageAttribute & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (__isset.stringValue != rhs.__isset.stringValue)
      return false;
    else if (__isset.stringValue && !(stringValue == rhs.stringValue))
      return false;
    if (__isset.binaryValue != rhs.__isset.binaryValue)
      return false;
    else if (__isset.binaryValue && !(binaryValue == rhs.binaryValue))
      return false;
    return true;
  }
  bool operator != (const MessageAttribute &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageAttribute & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageAttribute& obj);
};

void swap(MessageAttribute &a, MessageAttribute &b);

typedef struct _SendMessageRequest__isset {
  _SendMessageRequest__isset() : delaySeconds(false), invisibilitySeconds(false), messageAttributes(false), topic(false), priority(false) {}
  bool delaySeconds :1;
  bool invisibilitySeconds :1;
  bool messageAttributes :1;
  bool topic :1;
  bool priority :1;
} _SendMessageRequest__isset;

class SendMessageRequest {
 public:

  static const char* ascii_fingerprint; // = "47B66FE9F29D4BAE7FCFAC0FCF4F7195";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0xB6,0x6F,0xE9,0xF2,0x9D,0x4B,0xAE,0x7F,0xCF,0xAC,0x0F,0xCF,0x4F,0x71,0x95};

  SendMessageRequest(const SendMessageRequest&);
  SendMessageRequest& operator=(const SendMessageRequest&);
  SendMessageRequest() : queueName(), messageBody(), delaySeconds(0), invisibilitySeconds(0), topic(), priority(0) {
  }

  virtual ~SendMessageRequest() throw();
  std::string queueName;
  std::string messageBody;
  int32_t delaySeconds;
  int32_t invisibilitySeconds;
  std::map<std::string, MessageAttribute>  messageAttributes;
  std::string topic;
  int32_t priority;

  _SendMessageRequest__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_messageBody(const std::string& val);

  void __set_delaySeconds(const int32_t val);

  void __set_invisibilitySeconds(const int32_t val);

  void __set_messageAttributes(const std::map<std::string, MessageAttribute> & val);

  void __set_topic(const std::string& val);

  void __set_priority(const int32_t val);

  bool operator == (const SendMessageRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(messageBody == rhs.messageBody))
      return false;
    if (__isset.delaySeconds != rhs.__isset.delaySeconds)
      return false;
    else if (__isset.delaySeconds && !(delaySeconds == rhs.delaySeconds))
      return false;
    if (__isset.invisibilitySeconds != rhs.__isset.invisibilitySeconds)
      return false;
    else if (__isset.invisibilitySeconds && !(invisibilitySeconds == rhs.invisibilitySeconds))
      return false;
    if (__isset.messageAttributes != rhs.__isset.messageAttributes)
      return false;
    else if (__isset.messageAttributes && !(messageAttributes == rhs.messageAttributes))
      return false;
    if (__isset.topic != rhs.__isset.topic)
      return false;
    else if (__isset.topic && !(topic == rhs.topic))
      return false;
    if (__isset.priority != rhs.__isset.priority)
      return false;
    else if (__isset.priority && !(priority == rhs.priority))
      return false;
    return true;
  }
  bool operator != (const SendMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SendMessageRequest& obj);
};

void swap(SendMessageRequest &a, SendMessageRequest &b);

typedef struct _SendMessageResponse__isset {
  _SendMessageResponse__isset() : bodyLength(false), bodyMd5(false), sendTimestamp(false) {}
  bool bodyLength :1;
  bool bodyMd5 :1;
  bool sendTimestamp :1;
} _SendMessageResponse__isset;

class SendMessageResponse {
 public:

  static const char* ascii_fingerprint; // = "E9A4CC0D68EC4F0A9B4C74EE75C4D933";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0xA4,0xCC,0x0D,0x68,0xEC,0x4F,0x0A,0x9B,0x4C,0x74,0xEE,0x75,0xC4,0xD9,0x33};

  SendMessageResponse(const SendMessageResponse&);
  SendMessageResponse& operator=(const SendMessageResponse&);
  SendMessageResponse() : messageID(), bodyLength(0), bodyMd5(), sendTimestamp(0) {
  }

  virtual ~SendMessageResponse() throw();
  std::string messageID;
  int32_t bodyLength;
  std::string bodyMd5;
  int64_t sendTimestamp;

  _SendMessageResponse__isset __isset;

  void __set_messageID(const std::string& val);

  void __set_bodyLength(const int32_t val);

  void __set_bodyMd5(const std::string& val);

  void __set_sendTimestamp(const int64_t val);

  bool operator == (const SendMessageResponse & rhs) const
  {
    if (!(messageID == rhs.messageID))
      return false;
    if (__isset.bodyLength != rhs.__isset.bodyLength)
      return false;
    else if (__isset.bodyLength && !(bodyLength == rhs.bodyLength))
      return false;
    if (__isset.bodyMd5 != rhs.__isset.bodyMd5)
      return false;
    else if (__isset.bodyMd5 && !(bodyMd5 == rhs.bodyMd5))
      return false;
    if (__isset.sendTimestamp != rhs.__isset.sendTimestamp)
      return false;
    else if (__isset.sendTimestamp && !(sendTimestamp == rhs.sendTimestamp))
      return false;
    return true;
  }
  bool operator != (const SendMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SendMessageResponse& obj);
};

void swap(SendMessageResponse &a, SendMessageResponse &b);

typedef struct _SendMessageBatchRequestEntry__isset {
  _SendMessageBatchRequestEntry__isset() : delaySeconds(false), invisibilitySeconds(false), messageAttributes(false), priority(false) {}
  bool delaySeconds :1;
  bool invisibilitySeconds :1;
  bool messageAttributes :1;
  bool priority :1;
} _SendMessageBatchRequestEntry__isset;

class SendMessageBatchRequestEntry {
 public:

  static const char* ascii_fingerprint; // = "69D14A996F243ED437507B186520BFA6";
  static const uint8_t binary_fingerprint[16]; // = {0x69,0xD1,0x4A,0x99,0x6F,0x24,0x3E,0xD4,0x37,0x50,0x7B,0x18,0x65,0x20,0xBF,0xA6};

  SendMessageBatchRequestEntry(const SendMessageBatchRequestEntry&);
  SendMessageBatchRequestEntry& operator=(const SendMessageBatchRequestEntry&);
  SendMessageBatchRequestEntry() : entryId(), messageBody(), delaySeconds(0), invisibilitySeconds(0), priority(0) {
  }

  virtual ~SendMessageBatchRequestEntry() throw();
  std::string entryId;
  std::string messageBody;
  int32_t delaySeconds;
  int32_t invisibilitySeconds;
  std::map<std::string, MessageAttribute>  messageAttributes;
  int32_t priority;

  _SendMessageBatchRequestEntry__isset __isset;

  void __set_entryId(const std::string& val);

  void __set_messageBody(const std::string& val);

  void __set_delaySeconds(const int32_t val);

  void __set_invisibilitySeconds(const int32_t val);

  void __set_messageAttributes(const std::map<std::string, MessageAttribute> & val);

  void __set_priority(const int32_t val);

  bool operator == (const SendMessageBatchRequestEntry & rhs) const
  {
    if (!(entryId == rhs.entryId))
      return false;
    if (!(messageBody == rhs.messageBody))
      return false;
    if (__isset.delaySeconds != rhs.__isset.delaySeconds)
      return false;
    else if (__isset.delaySeconds && !(delaySeconds == rhs.delaySeconds))
      return false;
    if (__isset.invisibilitySeconds != rhs.__isset.invisibilitySeconds)
      return false;
    else if (__isset.invisibilitySeconds && !(invisibilitySeconds == rhs.invisibilitySeconds))
      return false;
    if (__isset.messageAttributes != rhs.__isset.messageAttributes)
      return false;
    else if (__isset.messageAttributes && !(messageAttributes == rhs.messageAttributes))
      return false;
    if (__isset.priority != rhs.__isset.priority)
      return false;
    else if (__isset.priority && !(priority == rhs.priority))
      return false;
    return true;
  }
  bool operator != (const SendMessageBatchRequestEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendMessageBatchRequestEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SendMessageBatchRequestEntry& obj);
};

void swap(SendMessageBatchRequestEntry &a, SendMessageBatchRequestEntry &b);

typedef struct _SendMessageBatchRequest__isset {
  _SendMessageBatchRequest__isset() : topic(false) {}
  bool topic :1;
} _SendMessageBatchRequest__isset;

class SendMessageBatchRequest {
 public:

  static const char* ascii_fingerprint; // = "3EF4CFF4D6378FC889913A4A0CDC2780";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0xF4,0xCF,0xF4,0xD6,0x37,0x8F,0xC8,0x89,0x91,0x3A,0x4A,0x0C,0xDC,0x27,0x80};

  SendMessageBatchRequest(const SendMessageBatchRequest&);
  SendMessageBatchRequest& operator=(const SendMessageBatchRequest&);
  SendMessageBatchRequest() : queueName(), topic() {
  }

  virtual ~SendMessageBatchRequest() throw();
  std::string queueName;
  std::vector<SendMessageBatchRequestEntry>  sendMessageBatchRequestEntryList;
  std::string topic;

  _SendMessageBatchRequest__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_sendMessageBatchRequestEntryList(const std::vector<SendMessageBatchRequestEntry> & val);

  void __set_topic(const std::string& val);

  bool operator == (const SendMessageBatchRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(sendMessageBatchRequestEntryList == rhs.sendMessageBatchRequestEntryList))
      return false;
    if (__isset.topic != rhs.__isset.topic)
      return false;
    else if (__isset.topic && !(topic == rhs.topic))
      return false;
    return true;
  }
  bool operator != (const SendMessageBatchRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendMessageBatchRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SendMessageBatchRequest& obj);
};

void swap(SendMessageBatchRequest &a, SendMessageBatchRequest &b);

typedef struct _SendMessageBatchResponseEntry__isset {
  _SendMessageBatchResponseEntry__isset() : bodyLength(false), bodyMd5(false), sendTimestamp(false) {}
  bool bodyLength :1;
  bool bodyMd5 :1;
  bool sendTimestamp :1;
} _SendMessageBatchResponseEntry__isset;

class SendMessageBatchResponseEntry {
 public:

  static const char* ascii_fingerprint; // = "49415E1E290CEECDCD1BC6FFF03CF83B";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0x41,0x5E,0x1E,0x29,0x0C,0xEE,0xCD,0xCD,0x1B,0xC6,0xFF,0xF0,0x3C,0xF8,0x3B};

  SendMessageBatchResponseEntry(const SendMessageBatchResponseEntry&);
  SendMessageBatchResponseEntry& operator=(const SendMessageBatchResponseEntry&);
  SendMessageBatchResponseEntry() : entryId(), messageID(), bodyLength(0), bodyMd5(), sendTimestamp(0) {
  }

  virtual ~SendMessageBatchResponseEntry() throw();
  std::string entryId;
  std::string messageID;
  int32_t bodyLength;
  std::string bodyMd5;
  int64_t sendTimestamp;

  _SendMessageBatchResponseEntry__isset __isset;

  void __set_entryId(const std::string& val);

  void __set_messageID(const std::string& val);

  void __set_bodyLength(const int32_t val);

  void __set_bodyMd5(const std::string& val);

  void __set_sendTimestamp(const int64_t val);

  bool operator == (const SendMessageBatchResponseEntry & rhs) const
  {
    if (!(entryId == rhs.entryId))
      return false;
    if (!(messageID == rhs.messageID))
      return false;
    if (__isset.bodyLength != rhs.__isset.bodyLength)
      return false;
    else if (__isset.bodyLength && !(bodyLength == rhs.bodyLength))
      return false;
    if (__isset.bodyMd5 != rhs.__isset.bodyMd5)
      return false;
    else if (__isset.bodyMd5 && !(bodyMd5 == rhs.bodyMd5))
      return false;
    if (__isset.sendTimestamp != rhs.__isset.sendTimestamp)
      return false;
    else if (__isset.sendTimestamp && !(sendTimestamp == rhs.sendTimestamp))
      return false;
    return true;
  }
  bool operator != (const SendMessageBatchResponseEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendMessageBatchResponseEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SendMessageBatchResponseEntry& obj);
};

void swap(SendMessageBatchResponseEntry &a, SendMessageBatchResponseEntry &b);

typedef struct _MessageBatchErrorEntry__isset {
  _MessageBatchErrorEntry__isset() : reason(false) {}
  bool reason :1;
} _MessageBatchErrorEntry__isset;

class MessageBatchErrorEntry {
 public:

  static const char* ascii_fingerprint; // = "A2012B7F8601FD81FE5925AEC1C789B5";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0x01,0x2B,0x7F,0x86,0x01,0xFD,0x81,0xFE,0x59,0x25,0xAE,0xC1,0xC7,0x89,0xB5};

  MessageBatchErrorEntry(const MessageBatchErrorEntry&);
  MessageBatchErrorEntry& operator=(const MessageBatchErrorEntry&);
  MessageBatchErrorEntry() : id() {
  }

  virtual ~MessageBatchErrorEntry() throw();
  std::string id;
   ::emq::common::GalaxyEmqServiceException reason;

  _MessageBatchErrorEntry__isset __isset;

  void __set_id(const std::string& val);

  void __set_reason(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const MessageBatchErrorEntry & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (__isset.reason != rhs.__isset.reason)
      return false;
    else if (__isset.reason && !(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const MessageBatchErrorEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageBatchErrorEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageBatchErrorEntry& obj);
};

void swap(MessageBatchErrorEntry &a, MessageBatchErrorEntry &b);

typedef struct _SendMessageBatchResponse__isset {
  _SendMessageBatchResponse__isset() : successful(false), failed(false) {}
  bool successful :1;
  bool failed :1;
} _SendMessageBatchResponse__isset;

class SendMessageBatchResponse {
 public:

  static const char* ascii_fingerprint; // = "3F0703CAE4415A0D5FCE01FCAB06E102";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x07,0x03,0xCA,0xE4,0x41,0x5A,0x0D,0x5F,0xCE,0x01,0xFC,0xAB,0x06,0xE1,0x02};

  SendMessageBatchResponse(const SendMessageBatchResponse&);
  SendMessageBatchResponse& operator=(const SendMessageBatchResponse&);
  SendMessageBatchResponse() {
  }

  virtual ~SendMessageBatchResponse() throw();
  std::vector<SendMessageBatchResponseEntry>  successful;
  std::vector<MessageBatchErrorEntry>  failed;

  _SendMessageBatchResponse__isset __isset;

  void __set_successful(const std::vector<SendMessageBatchResponseEntry> & val);

  void __set_failed(const std::vector<MessageBatchErrorEntry> & val);

  bool operator == (const SendMessageBatchResponse & rhs) const
  {
    if (!(successful == rhs.successful))
      return false;
    if (!(failed == rhs.failed))
      return false;
    return true;
  }
  bool operator != (const SendMessageBatchResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SendMessageBatchResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SendMessageBatchResponse& obj);
};

void swap(SendMessageBatchResponse &a, SendMessageBatchResponse &b);

typedef struct _ReceiveMessageRequest__isset {
  _ReceiveMessageRequest__isset() : maxReceiveMessageNumber(true), maxReceiveMessageWaitSeconds(true), attributeName(false), attributeValue(false), tagName(false) {}
  bool maxReceiveMessageNumber :1;
  bool maxReceiveMessageWaitSeconds :1;
  bool attributeName :1;
  bool attributeValue :1;
  bool tagName :1;
} _ReceiveMessageRequest__isset;

class ReceiveMessageRequest {
 public:

  static const char* ascii_fingerprint; // = "862183CF03CF29841508A1BD149C6127";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0x21,0x83,0xCF,0x03,0xCF,0x29,0x84,0x15,0x08,0xA1,0xBD,0x14,0x9C,0x61,0x27};

  ReceiveMessageRequest(const ReceiveMessageRequest&);
  ReceiveMessageRequest& operator=(const ReceiveMessageRequest&);
  ReceiveMessageRequest() : queueName(), maxReceiveMessageNumber(100), maxReceiveMessageWaitSeconds(0), attributeName(), tagName() {
  }

  virtual ~ReceiveMessageRequest() throw();
  std::string queueName;
  int32_t maxReceiveMessageNumber;
  int32_t maxReceiveMessageWaitSeconds;
  std::string attributeName;
  MessageAttribute attributeValue;
  std::string tagName;

  _ReceiveMessageRequest__isset __isset;

  void __set_queueName(const std::string& val);

  void __set_maxReceiveMessageNumber(const int32_t val);

  void __set_maxReceiveMessageWaitSeconds(const int32_t val);

  void __set_attributeName(const std::string& val);

  void __set_attributeValue(const MessageAttribute& val);

  void __set_tagName(const std::string& val);

  bool operator == (const ReceiveMessageRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (__isset.maxReceiveMessageNumber != rhs.__isset.maxReceiveMessageNumber)
      return false;
    else if (__isset.maxReceiveMessageNumber && !(maxReceiveMessageNumber == rhs.maxReceiveMessageNumber))
      return false;
    if (__isset.maxReceiveMessageWaitSeconds != rhs.__isset.maxReceiveMessageWaitSeconds)
      return false;
    else if (__isset.maxReceiveMessageWaitSeconds && !(maxReceiveMessageWaitSeconds == rhs.maxReceiveMessageWaitSeconds))
      return false;
    if (__isset.attributeName != rhs.__isset.attributeName)
      return false;
    else if (__isset.attributeName && !(attributeName == rhs.attributeName))
      return false;
    if (__isset.attributeValue != rhs.__isset.attributeValue)
      return false;
    else if (__isset.attributeValue && !(attributeValue == rhs.attributeValue))
      return false;
    if (__isset.tagName != rhs.__isset.tagName)
      return false;
    else if (__isset.tagName && !(tagName == rhs.tagName))
      return false;
    return true;
  }
  bool operator != (const ReceiveMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReceiveMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ReceiveMessageRequest& obj);
};

void swap(ReceiveMessageRequest &a, ReceiveMessageRequest &b);

typedef struct _ReceiveMessageResponse__isset {
  _ReceiveMessageResponse__isset() : attributes(false), messageAttributes(false) {}
  bool attributes :1;
  bool messageAttributes :1;
} _ReceiveMessageResponse__isset;

class ReceiveMessageResponse {
 public:

  static const char* ascii_fingerprint; // = "D421FB2DE8A6AAC654DD94A9D3D05041";
  static const uint8_t binary_fingerprint[16]; // = {0xD4,0x21,0xFB,0x2D,0xE8,0xA6,0xAA,0xC6,0x54,0xDD,0x94,0xA9,0xD3,0xD0,0x50,0x41};

  ReceiveMessageResponse(const ReceiveMessageResponse&);
  ReceiveMessageResponse& operator=(const ReceiveMessageResponse&);
  ReceiveMessageResponse() : messageID(), receiptHandle(), messageBody() {
  }

  virtual ~ReceiveMessageResponse() throw();
  std::string messageID;
  std::string receiptHandle;
  std::string messageBody;
  std::map<std::string, std::string>  attributes;
  std::map<std::string, MessageAttribute>  messageAttributes;

  _ReceiveMessageResponse__isset __isset;

  void __set_messageID(const std::string& val);

  void __set_receiptHandle(const std::string& val);

  void __set_messageBody(const std::string& val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_messageAttributes(const std::map<std::string, MessageAttribute> & val);

  bool operator == (const ReceiveMessageResponse & rhs) const
  {
    if (!(messageID == rhs.messageID))
      return false;
    if (!(receiptHandle == rhs.receiptHandle))
      return false;
    if (!(messageBody == rhs.messageBody))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.messageAttributes != rhs.__isset.messageAttributes)
      return false;
    else if (__isset.messageAttributes && !(messageAttributes == rhs.messageAttributes))
      return false;
    return true;
  }
  bool operator != (const ReceiveMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReceiveMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ReceiveMessageResponse& obj);
};

void swap(ReceiveMessageResponse &a, ReceiveMessageResponse &b);


class ChangeMessageVisibilityRequest {
 public:

  static const char* ascii_fingerprint; // = "343DA57F446177400B333DC49B037B0C";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};

  ChangeMessageVisibilityRequest(const ChangeMessageVisibilityRequest&);
  ChangeMessageVisibilityRequest& operator=(const ChangeMessageVisibilityRequest&);
  ChangeMessageVisibilityRequest() : queueName(), receiptHandle(), invisibilitySeconds(0) {
  }

  virtual ~ChangeMessageVisibilityRequest() throw();
  std::string queueName;
  std::string receiptHandle;
  int32_t invisibilitySeconds;

  void __set_queueName(const std::string& val);

  void __set_receiptHandle(const std::string& val);

  void __set_invisibilitySeconds(const int32_t val);

  bool operator == (const ChangeMessageVisibilityRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(receiptHandle == rhs.receiptHandle))
      return false;
    if (!(invisibilitySeconds == rhs.invisibilitySeconds))
      return false;
    return true;
  }
  bool operator != (const ChangeMessageVisibilityRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChangeMessageVisibilityRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ChangeMessageVisibilityRequest& obj);
};

void swap(ChangeMessageVisibilityRequest &a, ChangeMessageVisibilityRequest &b);


class ChangeMessageVisibilityBatchRequestEntry {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  ChangeMessageVisibilityBatchRequestEntry(const ChangeMessageVisibilityBatchRequestEntry&);
  ChangeMessageVisibilityBatchRequestEntry& operator=(const ChangeMessageVisibilityBatchRequestEntry&);
  ChangeMessageVisibilityBatchRequestEntry() : receiptHandle(), invisibilitySeconds(0) {
  }

  virtual ~ChangeMessageVisibilityBatchRequestEntry() throw();
  std::string receiptHandle;
  int32_t invisibilitySeconds;

  void __set_receiptHandle(const std::string& val);

  void __set_invisibilitySeconds(const int32_t val);

  bool operator == (const ChangeMessageVisibilityBatchRequestEntry & rhs) const
  {
    if (!(receiptHandle == rhs.receiptHandle))
      return false;
    if (!(invisibilitySeconds == rhs.invisibilitySeconds))
      return false;
    return true;
  }
  bool operator != (const ChangeMessageVisibilityBatchRequestEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChangeMessageVisibilityBatchRequestEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ChangeMessageVisibilityBatchRequestEntry& obj);
};

void swap(ChangeMessageVisibilityBatchRequestEntry &a, ChangeMessageVisibilityBatchRequestEntry &b);


class ChangeMessageVisibilityBatchRequest {
 public:

  static const char* ascii_fingerprint; // = "B87B6F57864ED98AD1BA3E1CD6F87805";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0x7B,0x6F,0x57,0x86,0x4E,0xD9,0x8A,0xD1,0xBA,0x3E,0x1C,0xD6,0xF8,0x78,0x05};

  ChangeMessageVisibilityBatchRequest(const ChangeMessageVisibilityBatchRequest&);
  ChangeMessageVisibilityBatchRequest& operator=(const ChangeMessageVisibilityBatchRequest&);
  ChangeMessageVisibilityBatchRequest() : queueName() {
  }

  virtual ~ChangeMessageVisibilityBatchRequest() throw();
  std::string queueName;
  std::vector<ChangeMessageVisibilityBatchRequestEntry>  changeMessageVisibilityRequestEntryList;

  void __set_queueName(const std::string& val);

  void __set_changeMessageVisibilityRequestEntryList(const std::vector<ChangeMessageVisibilityBatchRequestEntry> & val);

  bool operator == (const ChangeMessageVisibilityBatchRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(changeMessageVisibilityRequestEntryList == rhs.changeMessageVisibilityRequestEntryList))
      return false;
    return true;
  }
  bool operator != (const ChangeMessageVisibilityBatchRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChangeMessageVisibilityBatchRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ChangeMessageVisibilityBatchRequest& obj);
};

void swap(ChangeMessageVisibilityBatchRequest &a, ChangeMessageVisibilityBatchRequest &b);

typedef struct _ChangeMessageVisibilityBatchResponse__isset {
  _ChangeMessageVisibilityBatchResponse__isset() : successful(false), failed(false) {}
  bool successful :1;
  bool failed :1;
} _ChangeMessageVisibilityBatchResponse__isset;

class ChangeMessageVisibilityBatchResponse {
 public:

  static const char* ascii_fingerprint; // = "6A455D2E0AF8BC36FC02B58A4721860F";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x45,0x5D,0x2E,0x0A,0xF8,0xBC,0x36,0xFC,0x02,0xB5,0x8A,0x47,0x21,0x86,0x0F};

  ChangeMessageVisibilityBatchResponse(const ChangeMessageVisibilityBatchResponse&);
  ChangeMessageVisibilityBatchResponse& operator=(const ChangeMessageVisibilityBatchResponse&);
  ChangeMessageVisibilityBatchResponse() {
  }

  virtual ~ChangeMessageVisibilityBatchResponse() throw();
  std::vector<std::string>  successful;
  std::vector<MessageBatchErrorEntry>  failed;

  _ChangeMessageVisibilityBatchResponse__isset __isset;

  void __set_successful(const std::vector<std::string> & val);

  void __set_failed(const std::vector<MessageBatchErrorEntry> & val);

  bool operator == (const ChangeMessageVisibilityBatchResponse & rhs) const
  {
    if (!(successful == rhs.successful))
      return false;
    if (!(failed == rhs.failed))
      return false;
    return true;
  }
  bool operator != (const ChangeMessageVisibilityBatchResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChangeMessageVisibilityBatchResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ChangeMessageVisibilityBatchResponse& obj);
};

void swap(ChangeMessageVisibilityBatchResponse &a, ChangeMessageVisibilityBatchResponse &b);


class DeleteMessageRequest {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  DeleteMessageRequest(const DeleteMessageRequest&);
  DeleteMessageRequest& operator=(const DeleteMessageRequest&);
  DeleteMessageRequest() : queueName(), receiptHandle() {
  }

  virtual ~DeleteMessageRequest() throw();
  std::string queueName;
  std::string receiptHandle;

  void __set_queueName(const std::string& val);

  void __set_receiptHandle(const std::string& val);

  bool operator == (const DeleteMessageRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(receiptHandle == rhs.receiptHandle))
      return false;
    return true;
  }
  bool operator != (const DeleteMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeleteMessageRequest& obj);
};

void swap(DeleteMessageRequest &a, DeleteMessageRequest &b);


class DeleteMessageBatchRequestEntry {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  DeleteMessageBatchRequestEntry(const DeleteMessageBatchRequestEntry&);
  DeleteMessageBatchRequestEntry& operator=(const DeleteMessageBatchRequestEntry&);
  DeleteMessageBatchRequestEntry() : receiptHandle() {
  }

  virtual ~DeleteMessageBatchRequestEntry() throw();
  std::string receiptHandle;

  void __set_receiptHandle(const std::string& val);

  bool operator == (const DeleteMessageBatchRequestEntry & rhs) const
  {
    if (!(receiptHandle == rhs.receiptHandle))
      return false;
    return true;
  }
  bool operator != (const DeleteMessageBatchRequestEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteMessageBatchRequestEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeleteMessageBatchRequestEntry& obj);
};

void swap(DeleteMessageBatchRequestEntry &a, DeleteMessageBatchRequestEntry &b);


class DeleteMessageBatchRequest {
 public:

  static const char* ascii_fingerprint; // = "00A77B47615C8CC31092FB2CFCE06E52";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0xA7,0x7B,0x47,0x61,0x5C,0x8C,0xC3,0x10,0x92,0xFB,0x2C,0xFC,0xE0,0x6E,0x52};

  DeleteMessageBatchRequest(const DeleteMessageBatchRequest&);
  DeleteMessageBatchRequest& operator=(const DeleteMessageBatchRequest&);
  DeleteMessageBatchRequest() : queueName() {
  }

  virtual ~DeleteMessageBatchRequest() throw();
  std::string queueName;
  std::vector<DeleteMessageBatchRequestEntry>  deleteMessageBatchRequestEntryList;

  void __set_queueName(const std::string& val);

  void __set_deleteMessageBatchRequestEntryList(const std::vector<DeleteMessageBatchRequestEntry> & val);

  bool operator == (const DeleteMessageBatchRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(deleteMessageBatchRequestEntryList == rhs.deleteMessageBatchRequestEntryList))
      return false;
    return true;
  }
  bool operator != (const DeleteMessageBatchRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteMessageBatchRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeleteMessageBatchRequest& obj);
};

void swap(DeleteMessageBatchRequest &a, DeleteMessageBatchRequest &b);

typedef struct _DeleteMessageBatchResponse__isset {
  _DeleteMessageBatchResponse__isset() : successful(false), failed(false) {}
  bool successful :1;
  bool failed :1;
} _DeleteMessageBatchResponse__isset;

class DeleteMessageBatchResponse {
 public:

  static const char* ascii_fingerprint; // = "6A455D2E0AF8BC36FC02B58A4721860F";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x45,0x5D,0x2E,0x0A,0xF8,0xBC,0x36,0xFC,0x02,0xB5,0x8A,0x47,0x21,0x86,0x0F};

  DeleteMessageBatchResponse(const DeleteMessageBatchResponse&);
  DeleteMessageBatchResponse& operator=(const DeleteMessageBatchResponse&);
  DeleteMessageBatchResponse() {
  }

  virtual ~DeleteMessageBatchResponse() throw();
  std::vector<std::string>  successful;
  std::vector<MessageBatchErrorEntry>  failed;

  _DeleteMessageBatchResponse__isset __isset;

  void __set_successful(const std::vector<std::string> & val);

  void __set_failed(const std::vector<MessageBatchErrorEntry> & val);

  bool operator == (const DeleteMessageBatchResponse & rhs) const
  {
    if (!(successful == rhs.successful))
      return false;
    if (!(failed == rhs.failed))
      return false;
    return true;
  }
  bool operator != (const DeleteMessageBatchResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteMessageBatchResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeleteMessageBatchResponse& obj);
};

void swap(DeleteMessageBatchResponse &a, DeleteMessageBatchResponse &b);


class DeadMessageRequest {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  DeadMessageRequest(const DeadMessageRequest&);
  DeadMessageRequest& operator=(const DeadMessageRequest&);
  DeadMessageRequest() : queueName(), receiptHandle() {
  }

  virtual ~DeadMessageRequest() throw();
  std::string queueName;
  std::string receiptHandle;

  void __set_queueName(const std::string& val);

  void __set_receiptHandle(const std::string& val);

  bool operator == (const DeadMessageRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(receiptHandle == rhs.receiptHandle))
      return false;
    return true;
  }
  bool operator != (const DeadMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeadMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeadMessageRequest& obj);
};

void swap(DeadMessageRequest &a, DeadMessageRequest &b);


class DeadMessageBatchRequestEntry {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  DeadMessageBatchRequestEntry(const DeadMessageBatchRequestEntry&);
  DeadMessageBatchRequestEntry& operator=(const DeadMessageBatchRequestEntry&);
  DeadMessageBatchRequestEntry() : receiptHandle() {
  }

  virtual ~DeadMessageBatchRequestEntry() throw();
  std::string receiptHandle;

  void __set_receiptHandle(const std::string& val);

  bool operator == (const DeadMessageBatchRequestEntry & rhs) const
  {
    if (!(receiptHandle == rhs.receiptHandle))
      return false;
    return true;
  }
  bool operator != (const DeadMessageBatchRequestEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeadMessageBatchRequestEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeadMessageBatchRequestEntry& obj);
};

void swap(DeadMessageBatchRequestEntry &a, DeadMessageBatchRequestEntry &b);


class DeadMessageBatchRequest {
 public:

  static const char* ascii_fingerprint; // = "00A77B47615C8CC31092FB2CFCE06E52";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0xA7,0x7B,0x47,0x61,0x5C,0x8C,0xC3,0x10,0x92,0xFB,0x2C,0xFC,0xE0,0x6E,0x52};

  DeadMessageBatchRequest(const DeadMessageBatchRequest&);
  DeadMessageBatchRequest& operator=(const DeadMessageBatchRequest&);
  DeadMessageBatchRequest() : queueName() {
  }

  virtual ~DeadMessageBatchRequest() throw();
  std::string queueName;
  std::vector<DeadMessageBatchRequestEntry>  deadMessageBatchRequestEntryList;

  void __set_queueName(const std::string& val);

  void __set_deadMessageBatchRequestEntryList(const std::vector<DeadMessageBatchRequestEntry> & val);

  bool operator == (const DeadMessageBatchRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(deadMessageBatchRequestEntryList == rhs.deadMessageBatchRequestEntryList))
      return false;
    return true;
  }
  bool operator != (const DeadMessageBatchRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeadMessageBatchRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeadMessageBatchRequest& obj);
};

void swap(DeadMessageBatchRequest &a, DeadMessageBatchRequest &b);

typedef struct _DeadMessageBatchResponse__isset {
  _DeadMessageBatchResponse__isset() : successful(false), failed(false) {}
  bool successful :1;
  bool failed :1;
} _DeadMessageBatchResponse__isset;

class DeadMessageBatchResponse {
 public:

  static const char* ascii_fingerprint; // = "6A455D2E0AF8BC36FC02B58A4721860F";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x45,0x5D,0x2E,0x0A,0xF8,0xBC,0x36,0xFC,0x02,0xB5,0x8A,0x47,0x21,0x86,0x0F};

  DeadMessageBatchResponse(const DeadMessageBatchResponse&);
  DeadMessageBatchResponse& operator=(const DeadMessageBatchResponse&);
  DeadMessageBatchResponse() {
  }

  virtual ~DeadMessageBatchResponse() throw();
  std::vector<std::string>  successful;
  std::vector<MessageBatchErrorEntry>  failed;

  _DeadMessageBatchResponse__isset __isset;

  void __set_successful(const std::vector<std::string> & val);

  void __set_failed(const std::vector<MessageBatchErrorEntry> & val);

  bool operator == (const DeadMessageBatchResponse & rhs) const
  {
    if (!(successful == rhs.successful))
      return false;
    if (!(failed == rhs.failed))
      return false;
    return true;
  }
  bool operator != (const DeadMessageBatchResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeadMessageBatchResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeadMessageBatchResponse& obj);
};

void swap(DeadMessageBatchResponse &a, DeadMessageBatchResponse &b);

typedef struct _PeekMessageResponse__isset {
  _PeekMessageResponse__isset() : messageBody(false), attributes(false), messageAttributes(false), e(false) {}
  bool messageBody :1;
  bool attributes :1;
  bool messageAttributes :1;
  bool e :1;
} _PeekMessageResponse__isset;

class PeekMessageResponse {
 public:

  static const char* ascii_fingerprint; // = "275DF3CDD7265EE122BC4DC68415EA16";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x5D,0xF3,0xCD,0xD7,0x26,0x5E,0xE1,0x22,0xBC,0x4D,0xC6,0x84,0x15,0xEA,0x16};

  PeekMessageResponse(const PeekMessageResponse&);
  PeekMessageResponse& operator=(const PeekMessageResponse&);
  PeekMessageResponse() : messageID(), messageBody() {
  }

  virtual ~PeekMessageResponse() throw();
  std::string messageID;
  std::string messageBody;
  std::map<std::string, std::string>  attributes;
  std::map<std::string, MessageAttribute>  messageAttributes;
   ::emq::common::GalaxyEmqServiceException e;

  _PeekMessageResponse__isset __isset;

  void __set_messageID(const std::string& val);

  void __set_messageBody(const std::string& val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_messageAttributes(const std::map<std::string, MessageAttribute> & val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const PeekMessageResponse & rhs) const
  {
    if (!(messageID == rhs.messageID))
      return false;
    if (__isset.messageBody != rhs.__isset.messageBody)
      return false;
    else if (__isset.messageBody && !(messageBody == rhs.messageBody))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.messageAttributes != rhs.__isset.messageAttributes)
      return false;
    else if (__isset.messageAttributes && !(messageAttributes == rhs.messageAttributes))
      return false;
    if (__isset.e != rhs.__isset.e)
      return false;
    else if (__isset.e && !(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const PeekMessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PeekMessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PeekMessageResponse& obj);
};

void swap(PeekMessageResponse &a, PeekMessageResponse &b);


class DeletePeekMessageRequest {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  DeletePeekMessageRequest(const DeletePeekMessageRequest&);
  DeletePeekMessageRequest& operator=(const DeletePeekMessageRequest&);
  DeletePeekMessageRequest() : queueName(), receiptHandle() {
  }

  virtual ~DeletePeekMessageRequest() throw();
  std::string queueName;
  std::string receiptHandle;

  void __set_queueName(const std::string& val);

  void __set_receiptHandle(const std::string& val);

  bool operator == (const DeletePeekMessageRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(receiptHandle == rhs.receiptHandle))
      return false;
    return true;
  }
  bool operator != (const DeletePeekMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeletePeekMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeletePeekMessageRequest& obj);
};

void swap(DeletePeekMessageRequest &a, DeletePeekMessageRequest &b);


class DeletePeekMessageBatchEntry {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  DeletePeekMessageBatchEntry(const DeletePeekMessageBatchEntry&);
  DeletePeekMessageBatchEntry& operator=(const DeletePeekMessageBatchEntry&);
  DeletePeekMessageBatchEntry() : receiptHandle() {
  }

  virtual ~DeletePeekMessageBatchEntry() throw();
  std::string receiptHandle;

  void __set_receiptHandle(const std::string& val);

  bool operator == (const DeletePeekMessageBatchEntry & rhs) const
  {
    if (!(receiptHandle == rhs.receiptHandle))
      return false;
    return true;
  }
  bool operator != (const DeletePeekMessageBatchEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeletePeekMessageBatchEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeletePeekMessageBatchEntry& obj);
};

void swap(DeletePeekMessageBatchEntry &a, DeletePeekMessageBatchEntry &b);


class DeletePeekMessageBatchRequest {
 public:

  static const char* ascii_fingerprint; // = "00A77B47615C8CC31092FB2CFCE06E52";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0xA7,0x7B,0x47,0x61,0x5C,0x8C,0xC3,0x10,0x92,0xFB,0x2C,0xFC,0xE0,0x6E,0x52};

  DeletePeekMessageBatchRequest(const DeletePeekMessageBatchRequest&);
  DeletePeekMessageBatchRequest& operator=(const DeletePeekMessageBatchRequest&);
  DeletePeekMessageBatchRequest() : queueName() {
  }

  virtual ~DeletePeekMessageBatchRequest() throw();
  std::string queueName;
  std::vector<DeletePeekMessageBatchEntry>  deletePeekMessageBatchEntryList;

  void __set_queueName(const std::string& val);

  void __set_deletePeekMessageBatchEntryList(const std::vector<DeletePeekMessageBatchEntry> & val);

  bool operator == (const DeletePeekMessageBatchRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(deletePeekMessageBatchEntryList == rhs.deletePeekMessageBatchEntryList))
      return false;
    return true;
  }
  bool operator != (const DeletePeekMessageBatchRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeletePeekMessageBatchRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeletePeekMessageBatchRequest& obj);
};

void swap(DeletePeekMessageBatchRequest &a, DeletePeekMessageBatchRequest &b);

typedef struct _DeletePeekMessageBatchResponse__isset {
  _DeletePeekMessageBatchResponse__isset() : successful(false), failed(false) {}
  bool successful :1;
  bool failed :1;
} _DeletePeekMessageBatchResponse__isset;

class DeletePeekMessageBatchResponse {
 public:

  static const char* ascii_fingerprint; // = "6A455D2E0AF8BC36FC02B58A4721860F";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x45,0x5D,0x2E,0x0A,0xF8,0xBC,0x36,0xFC,0x02,0xB5,0x8A,0x47,0x21,0x86,0x0F};

  DeletePeekMessageBatchResponse(const DeletePeekMessageBatchResponse&);
  DeletePeekMessageBatchResponse& operator=(const DeletePeekMessageBatchResponse&);
  DeletePeekMessageBatchResponse() {
  }

  virtual ~DeletePeekMessageBatchResponse() throw();
  std::vector<std::string>  successful;
  std::vector<MessageBatchErrorEntry>  failed;

  _DeletePeekMessageBatchResponse__isset __isset;

  void __set_successful(const std::vector<std::string> & val);

  void __set_failed(const std::vector<MessageBatchErrorEntry> & val);

  bool operator == (const DeletePeekMessageBatchResponse & rhs) const
  {
    if (!(successful == rhs.successful))
      return false;
    if (!(failed == rhs.failed))
      return false;
    return true;
  }
  bool operator != (const DeletePeekMessageBatchResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeletePeekMessageBatchResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DeletePeekMessageBatchResponse& obj);
};

void swap(DeletePeekMessageBatchResponse &a, DeletePeekMessageBatchResponse &b);

typedef struct _PartitionTimeIntervalAndMaxNum__isset {
  _PartitionTimeIntervalAndMaxNum__isset() : startTimestamp(false), endTimestamp(false), maxNum(false), partitionId(false) {}
  bool startTimestamp :1;
  bool endTimestamp :1;
  bool maxNum :1;
  bool partitionId :1;
} _PartitionTimeIntervalAndMaxNum__isset;

class PartitionTimeIntervalAndMaxNum {
 public:

  static const char* ascii_fingerprint; // = "19F5063E70E69C42FA30BB9553B7D3A2";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xF5,0x06,0x3E,0x70,0xE6,0x9C,0x42,0xFA,0x30,0xBB,0x95,0x53,0xB7,0xD3,0xA2};

  PartitionTimeIntervalAndMaxNum(const PartitionTimeIntervalAndMaxNum&);
  PartitionTimeIntervalAndMaxNum& operator=(const PartitionTimeIntervalAndMaxNum&);
  PartitionTimeIntervalAndMaxNum() : startTimestamp(0), endTimestamp(0), maxNum(0), partitionId(0) {
  }

  virtual ~PartitionTimeIntervalAndMaxNum() throw();
  int64_t startTimestamp;
  int64_t endTimestamp;
  int32_t maxNum;
  int32_t partitionId;

  _PartitionTimeIntervalAndMaxNum__isset __isset;

  void __set_startTimestamp(const int64_t val);

  void __set_endTimestamp(const int64_t val);

  void __set_maxNum(const int32_t val);

  void __set_partitionId(const int32_t val);

  bool operator == (const PartitionTimeIntervalAndMaxNum & rhs) const
  {
    if (__isset.startTimestamp != rhs.__isset.startTimestamp)
      return false;
    else if (__isset.startTimestamp && !(startTimestamp == rhs.startTimestamp))
      return false;
    if (__isset.endTimestamp != rhs.__isset.endTimestamp)
      return false;
    else if (__isset.endTimestamp && !(endTimestamp == rhs.endTimestamp))
      return false;
    if (__isset.maxNum != rhs.__isset.maxNum)
      return false;
    else if (__isset.maxNum && !(maxNum == rhs.maxNum))
      return false;
    if (__isset.partitionId != rhs.__isset.partitionId)
      return false;
    else if (__isset.partitionId && !(partitionId == rhs.partitionId))
      return false;
    return true;
  }
  bool operator != (const PartitionTimeIntervalAndMaxNum &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PartitionTimeIntervalAndMaxNum & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PartitionTimeIntervalAndMaxNum& obj);
};

void swap(PartitionTimeIntervalAndMaxNum &a, PartitionTimeIntervalAndMaxNum &b);

typedef struct _PeekMessageArg__isset {
  _PeekMessageArg__isset() : receiptHandle(false), receiptHandleList(false), partitionTimeIntervalAndMaxNum(false) {}
  bool receiptHandle :1;
  bool receiptHandleList :1;
  bool partitionTimeIntervalAndMaxNum :1;
} _PeekMessageArg__isset;

class PeekMessageArg {
 public:

  static const char* ascii_fingerprint; // = "CC0415BCE8711DFAA509897BD5C5EE86";
  static const uint8_t binary_fingerprint[16]; // = {0xCC,0x04,0x15,0xBC,0xE8,0x71,0x1D,0xFA,0xA5,0x09,0x89,0x7B,0xD5,0xC5,0xEE,0x86};

  PeekMessageArg(const PeekMessageArg&);
  PeekMessageArg& operator=(const PeekMessageArg&);
  PeekMessageArg() : receiptHandle() {
  }

  virtual ~PeekMessageArg() throw();
  std::string receiptHandle;
  std::vector<std::string>  receiptHandleList;
  PartitionTimeIntervalAndMaxNum partitionTimeIntervalAndMaxNum;

  _PeekMessageArg__isset __isset;

  void __set_receiptHandle(const std::string& val);

  void __set_receiptHandleList(const std::vector<std::string> & val);

  void __set_partitionTimeIntervalAndMaxNum(const PartitionTimeIntervalAndMaxNum& val);

  bool operator == (const PeekMessageArg & rhs) const
  {
    if (!(receiptHandle == rhs.receiptHandle))
      return false;
    if (!(receiptHandleList == rhs.receiptHandleList))
      return false;
    if (!(partitionTimeIntervalAndMaxNum == rhs.partitionTimeIntervalAndMaxNum))
      return false;
    return true;
  }
  bool operator != (const PeekMessageArg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PeekMessageArg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PeekMessageArg& obj);
};

void swap(PeekMessageArg &a, PeekMessageArg &b);


class PeekMessageRequest {
 public:

  static const char* ascii_fingerprint; // = "4B91BBEBEC11DE376B89A50C2B2002F8";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x91,0xBB,0xEB,0xEC,0x11,0xDE,0x37,0x6B,0x89,0xA5,0x0C,0x2B,0x20,0x02,0xF8};

  PeekMessageRequest(const PeekMessageRequest&);
  PeekMessageRequest& operator=(const PeekMessageRequest&);
  PeekMessageRequest() : queueName() {
  }

  virtual ~PeekMessageRequest() throw();
  std::string queueName;
  PeekMessageArg peekMessageArg;

  void __set_queueName(const std::string& val);

  void __set_peekMessageArg(const PeekMessageArg& val);

  bool operator == (const PeekMessageRequest & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    if (!(peekMessageArg == rhs.peekMessageArg))
      return false;
    return true;
  }
  bool operator != (const PeekMessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PeekMessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PeekMessageRequest& obj);
};

void swap(PeekMessageRequest &a, PeekMessageRequest &b);

}} // namespace

#endif
