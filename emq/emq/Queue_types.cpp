/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Queue_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace emq { namespace queue {

int _kPermissionValues[] = {
  Permission::NONE,
  Permission::SEND_MESSAGE,
  Permission::RECEIVE_MESSAGE,
  Permission::SEND_RECEIVE_MESSAGE,
  Permission::HANDLE_MESSAGE,
  Permission::SEND_HANDLE_MESSAGE,
  Permission::GET_QUEUE_INFO,
  Permission::USE_QUEUE,
  Permission::ADMIN_QUEUE,
  Permission::PEEK_MESSAGE,
  Permission::DELETE_PEEK_MESSAGE,
  Permission::FULL_CONTROL
};
const char* _kPermissionNames[] = {
  "NONE",
  "SEND_MESSAGE",
  "RECEIVE_MESSAGE",
  "SEND_RECEIVE_MESSAGE",
  "HANDLE_MESSAGE",
  "SEND_HANDLE_MESSAGE",
  "GET_QUEUE_INFO",
  "USE_QUEUE",
  "ADMIN_QUEUE",
  "PEEK_MESSAGE",
  "DELETE_PEEK_MESSAGE",
  "FULL_CONTROL"
};
const std::map<int, const char*> _Permission_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(12, _kPermissionValues, _kPermissionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLogicalOperatorValues[] = {
  LogicalOperator::AND,
  LogicalOperator::OR
};
const char* _kLogicalOperatorNames[] = {
  "AND",
  "OR"
};
const std::map<int, const char*> _LogicalOperator_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kLogicalOperatorValues, _kLogicalOperatorNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


QueueAttribute::~QueueAttribute() throw() {
}


void QueueAttribute::__set_delaySeconds(const int32_t val) {
  this->delaySeconds = val;
__isset.delaySeconds = true;
}

void QueueAttribute::__set_invisibilitySeconds(const int32_t val) {
  this->invisibilitySeconds = val;
__isset.invisibilitySeconds = true;
}

void QueueAttribute::__set_receiveMessageWaitSeconds(const int32_t val) {
  this->receiveMessageWaitSeconds = val;
__isset.receiveMessageWaitSeconds = true;
}

void QueueAttribute::__set_receiveMessageMaximumNumber(const int32_t val) {
  this->receiveMessageMaximumNumber = val;
__isset.receiveMessageMaximumNumber = true;
}

void QueueAttribute::__set_messageRetentionSeconds(const int32_t val) {
  this->messageRetentionSeconds = val;
__isset.messageRetentionSeconds = true;
}

void QueueAttribute::__set_messageMaximumBytes(const int32_t val) {
  this->messageMaximumBytes = val;
__isset.messageMaximumBytes = true;
}

void QueueAttribute::__set_partitionNumber(const int32_t val) {
  this->partitionNumber = val;
__isset.partitionNumber = true;
}

void QueueAttribute::__set_userAttributes(const std::map<std::string, std::string> & val) {
  this->userAttributes = val;
__isset.userAttributes = true;
}

const char* QueueAttribute::ascii_fingerprint = "EB6B718E469DA022D510505529AF6B0E";
const uint8_t QueueAttribute::binary_fingerprint[16] = {0xEB,0x6B,0x71,0x8E,0x46,0x9D,0xA0,0x22,0xD5,0x10,0x50,0x55,0x29,0xAF,0x6B,0x0E};

uint32_t QueueAttribute::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->delaySeconds);
          this->__isset.delaySeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->invisibilitySeconds);
          this->__isset.invisibilitySeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->receiveMessageWaitSeconds);
          this->__isset.receiveMessageWaitSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->receiveMessageMaximumNumber);
          this->__isset.receiveMessageMaximumNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messageRetentionSeconds);
          this->__isset.messageRetentionSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messageMaximumBytes);
          this->__isset.messageMaximumBytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->partitionNumber);
          this->__isset.partitionNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->userAttributes.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::string& _val6 = this->userAttributes[_key5];
              xfer += iprot->readString(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.userAttributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueueAttribute::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("QueueAttribute");

  if (this->__isset.delaySeconds) {
    xfer += oprot->writeFieldBegin("delaySeconds", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->delaySeconds);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.invisibilitySeconds) {
    xfer += oprot->writeFieldBegin("invisibilitySeconds", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->invisibilitySeconds);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.receiveMessageWaitSeconds) {
    xfer += oprot->writeFieldBegin("receiveMessageWaitSeconds", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->receiveMessageWaitSeconds);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.receiveMessageMaximumNumber) {
    xfer += oprot->writeFieldBegin("receiveMessageMaximumNumber", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->receiveMessageMaximumNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messageRetentionSeconds) {
    xfer += oprot->writeFieldBegin("messageRetentionSeconds", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->messageRetentionSeconds);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messageMaximumBytes) {
    xfer += oprot->writeFieldBegin("messageMaximumBytes", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->messageMaximumBytes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partitionNumber) {
    xfer += oprot->writeFieldBegin("partitionNumber", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->partitionNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userAttributes) {
    xfer += oprot->writeFieldBegin("userAttributes", ::apache::thrift::protocol::T_MAP, 8);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->userAttributes.size()));
      std::map<std::string, std::string> ::const_iterator _iter7;
      for (_iter7 = this->userAttributes.begin(); _iter7 != this->userAttributes.end(); ++_iter7)
      {
        xfer += oprot->writeString(_iter7->first);
        xfer += oprot->writeString(_iter7->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(QueueAttribute &a, QueueAttribute &b) {
  using ::std::swap;
  swap(a.delaySeconds, b.delaySeconds);
  swap(a.invisibilitySeconds, b.invisibilitySeconds);
  swap(a.receiveMessageWaitSeconds, b.receiveMessageWaitSeconds);
  swap(a.receiveMessageMaximumNumber, b.receiveMessageMaximumNumber);
  swap(a.messageRetentionSeconds, b.messageRetentionSeconds);
  swap(a.messageMaximumBytes, b.messageMaximumBytes);
  swap(a.partitionNumber, b.partitionNumber);
  swap(a.userAttributes, b.userAttributes);
  swap(a.__isset, b.__isset);
}

QueueAttribute::QueueAttribute(const QueueAttribute& other8) {
  delaySeconds = other8.delaySeconds;
  invisibilitySeconds = other8.invisibilitySeconds;
  receiveMessageWaitSeconds = other8.receiveMessageWaitSeconds;
  receiveMessageMaximumNumber = other8.receiveMessageMaximumNumber;
  messageRetentionSeconds = other8.messageRetentionSeconds;
  messageMaximumBytes = other8.messageMaximumBytes;
  partitionNumber = other8.partitionNumber;
  userAttributes = other8.userAttributes;
  __isset = other8.__isset;
}
QueueAttribute& QueueAttribute::operator=(const QueueAttribute& other9) {
  delaySeconds = other9.delaySeconds;
  invisibilitySeconds = other9.invisibilitySeconds;
  receiveMessageWaitSeconds = other9.receiveMessageWaitSeconds;
  receiveMessageMaximumNumber = other9.receiveMessageMaximumNumber;
  messageRetentionSeconds = other9.messageRetentionSeconds;
  messageMaximumBytes = other9.messageMaximumBytes;
  partitionNumber = other9.partitionNumber;
  userAttributes = other9.userAttributes;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const QueueAttribute& obj) {
  using apache::thrift::to_string;
  out << "QueueAttribute(";
  out << "delaySeconds="; (obj.__isset.delaySeconds ? (out << to_string(obj.delaySeconds)) : (out << "<null>"));
  out << ", " << "invisibilitySeconds="; (obj.__isset.invisibilitySeconds ? (out << to_string(obj.invisibilitySeconds)) : (out << "<null>"));
  out << ", " << "receiveMessageWaitSeconds="; (obj.__isset.receiveMessageWaitSeconds ? (out << to_string(obj.receiveMessageWaitSeconds)) : (out << "<null>"));
  out << ", " << "receiveMessageMaximumNumber="; (obj.__isset.receiveMessageMaximumNumber ? (out << to_string(obj.receiveMessageMaximumNumber)) : (out << "<null>"));
  out << ", " << "messageRetentionSeconds="; (obj.__isset.messageRetentionSeconds ? (out << to_string(obj.messageRetentionSeconds)) : (out << "<null>"));
  out << ", " << "messageMaximumBytes="; (obj.__isset.messageMaximumBytes ? (out << to_string(obj.messageMaximumBytes)) : (out << "<null>"));
  out << ", " << "partitionNumber="; (obj.__isset.partitionNumber ? (out << to_string(obj.partitionNumber)) : (out << "<null>"));
  out << ", " << "userAttributes="; (obj.__isset.userAttributes ? (out << to_string(obj.userAttributes)) : (out << "<null>"));
  out << ")";
  return out;
}


QueueState::~QueueState() throw() {
}


void QueueState::__set_createTimestamp(const int64_t val) {
  this->createTimestamp = val;
}

void QueueState::__set_lastModifiedTimestamp(const int64_t val) {
  this->lastModifiedTimestamp = val;
}

void QueueState::__set_approximateMessageNumber(const int64_t val) {
  this->approximateMessageNumber = val;
}

void QueueState::__set_approximateAvailableMessageNumber(const int64_t val) {
  this->approximateAvailableMessageNumber = val;
}

void QueueState::__set_approximateInvisibilityMessageNumber(const int64_t val) {
  this->approximateInvisibilityMessageNumber = val;
}

const char* QueueState::ascii_fingerprint = "BCB041239CCFE5D7E7A92C7567D1A23C";
const uint8_t QueueState::binary_fingerprint[16] = {0xBC,0xB0,0x41,0x23,0x9C,0xCF,0xE5,0xD7,0xE7,0xA9,0x2C,0x75,0x67,0xD1,0xA2,0x3C};

uint32_t QueueState::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_createTimestamp = false;
  bool isset_lastModifiedTimestamp = false;
  bool isset_approximateMessageNumber = false;
  bool isset_approximateAvailableMessageNumber = false;
  bool isset_approximateInvisibilityMessageNumber = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTimestamp);
          isset_createTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastModifiedTimestamp);
          isset_lastModifiedTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->approximateMessageNumber);
          isset_approximateMessageNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->approximateAvailableMessageNumber);
          isset_approximateAvailableMessageNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->approximateInvisibilityMessageNumber);
          isset_approximateInvisibilityMessageNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_createTimestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lastModifiedTimestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_approximateMessageNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_approximateAvailableMessageNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_approximateInvisibilityMessageNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QueueState::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("QueueState");

  xfer += oprot->writeFieldBegin("createTimestamp", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->createTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastModifiedTimestamp", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->lastModifiedTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("approximateMessageNumber", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->approximateMessageNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("approximateAvailableMessageNumber", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->approximateAvailableMessageNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("approximateInvisibilityMessageNumber", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->approximateInvisibilityMessageNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(QueueState &a, QueueState &b) {
  using ::std::swap;
  swap(a.createTimestamp, b.createTimestamp);
  swap(a.lastModifiedTimestamp, b.lastModifiedTimestamp);
  swap(a.approximateMessageNumber, b.approximateMessageNumber);
  swap(a.approximateAvailableMessageNumber, b.approximateAvailableMessageNumber);
  swap(a.approximateInvisibilityMessageNumber, b.approximateInvisibilityMessageNumber);
}

QueueState::QueueState(const QueueState& other10) {
  createTimestamp = other10.createTimestamp;
  lastModifiedTimestamp = other10.lastModifiedTimestamp;
  approximateMessageNumber = other10.approximateMessageNumber;
  approximateAvailableMessageNumber = other10.approximateAvailableMessageNumber;
  approximateInvisibilityMessageNumber = other10.approximateInvisibilityMessageNumber;
}
QueueState& QueueState::operator=(const QueueState& other11) {
  createTimestamp = other11.createTimestamp;
  lastModifiedTimestamp = other11.lastModifiedTimestamp;
  approximateMessageNumber = other11.approximateMessageNumber;
  approximateAvailableMessageNumber = other11.approximateAvailableMessageNumber;
  approximateInvisibilityMessageNumber = other11.approximateInvisibilityMessageNumber;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const QueueState& obj) {
  using apache::thrift::to_string;
  out << "QueueState(";
  out << "createTimestamp=" << to_string(obj.createTimestamp);
  out << ", " << "lastModifiedTimestamp=" << to_string(obj.lastModifiedTimestamp);
  out << ", " << "approximateMessageNumber=" << to_string(obj.approximateMessageNumber);
  out << ", " << "approximateAvailableMessageNumber=" << to_string(obj.approximateAvailableMessageNumber);
  out << ", " << "approximateInvisibilityMessageNumber=" << to_string(obj.approximateInvisibilityMessageNumber);
  out << ")";
  return out;
}


Throughput::~Throughput() throw() {
}


void Throughput::__set_readQps(const int64_t val) {
  this->readQps = val;
__isset.readQps = true;
}

void Throughput::__set_writeQps(const int64_t val) {
  this->writeQps = val;
__isset.writeQps = true;
}

const char* Throughput::ascii_fingerprint = "0354D07C94CB8542872CA1277008860A";
const uint8_t Throughput::binary_fingerprint[16] = {0x03,0x54,0xD0,0x7C,0x94,0xCB,0x85,0x42,0x87,0x2C,0xA1,0x27,0x70,0x08,0x86,0x0A};

uint32_t Throughput::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->readQps);
          this->__isset.readQps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->writeQps);
          this->__isset.writeQps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Throughput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Throughput");

  if (this->__isset.readQps) {
    xfer += oprot->writeFieldBegin("readQps", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->readQps);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.writeQps) {
    xfer += oprot->writeFieldBegin("writeQps", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->writeQps);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Throughput &a, Throughput &b) {
  using ::std::swap;
  swap(a.readQps, b.readQps);
  swap(a.writeQps, b.writeQps);
  swap(a.__isset, b.__isset);
}

Throughput::Throughput(const Throughput& other12) {
  readQps = other12.readQps;
  writeQps = other12.writeQps;
  __isset = other12.__isset;
}
Throughput& Throughput::operator=(const Throughput& other13) {
  readQps = other13.readQps;
  writeQps = other13.writeQps;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Throughput& obj) {
  using apache::thrift::to_string;
  out << "Throughput(";
  out << "readQps="; (obj.__isset.readQps ? (out << to_string(obj.readQps)) : (out << "<null>"));
  out << ", " << "writeQps="; (obj.__isset.writeQps ? (out << to_string(obj.writeQps)) : (out << "<null>"));
  out << ")";
  return out;
}


QueueQuota::~QueueQuota() throw() {
}


void QueueQuota::__set_throughput(const Throughput& val) {
  this->throughput = val;
__isset.throughput = true;
}

const char* QueueQuota::ascii_fingerprint = "1AAAF2325C6BD82802A98815F973A26D";
const uint8_t QueueQuota::binary_fingerprint[16] = {0x1A,0xAA,0xF2,0x32,0x5C,0x6B,0xD8,0x28,0x02,0xA9,0x88,0x15,0xF9,0x73,0xA2,0x6D};

uint32_t QueueQuota::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->throughput.read(iprot);
          this->__isset.throughput = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueueQuota::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("QueueQuota");

  if (this->__isset.throughput) {
    xfer += oprot->writeFieldBegin("throughput", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->throughput.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(QueueQuota &a, QueueQuota &b) {
  using ::std::swap;
  swap(a.throughput, b.throughput);
  swap(a.__isset, b.__isset);
}

QueueQuota::QueueQuota(const QueueQuota& other14) {
  throughput = other14.throughput;
  __isset = other14.__isset;
}
QueueQuota& QueueQuota::operator=(const QueueQuota& other15) {
  throughput = other15.throughput;
  __isset = other15.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const QueueQuota& obj) {
  using apache::thrift::to_string;
  out << "QueueQuota(";
  out << "throughput="; (obj.__isset.throughput ? (out << to_string(obj.throughput)) : (out << "<null>"));
  out << ")";
  return out;
}


RedrivePolicy::~RedrivePolicy() throw() {
}


void RedrivePolicy::__set_dlqName(const std::string& val) {
  this->dlqName = val;
}

void RedrivePolicy::__set_maxReceiveTime(const int32_t val) {
  this->maxReceiveTime = val;
}

const char* RedrivePolicy::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t RedrivePolicy::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t RedrivePolicy::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dlqName = false;
  bool isset_maxReceiveTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dlqName);
          isset_dlqName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxReceiveTime);
          isset_maxReceiveTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dlqName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_maxReceiveTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RedrivePolicy::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RedrivePolicy");

  xfer += oprot->writeFieldBegin("dlqName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dlqName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxReceiveTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->maxReceiveTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RedrivePolicy &a, RedrivePolicy &b) {
  using ::std::swap;
  swap(a.dlqName, b.dlqName);
  swap(a.maxReceiveTime, b.maxReceiveTime);
}

RedrivePolicy::RedrivePolicy(const RedrivePolicy& other16) {
  dlqName = other16.dlqName;
  maxReceiveTime = other16.maxReceiveTime;
}
RedrivePolicy& RedrivePolicy::operator=(const RedrivePolicy& other17) {
  dlqName = other17.dlqName;
  maxReceiveTime = other17.maxReceiveTime;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RedrivePolicy& obj) {
  using apache::thrift::to_string;
  out << "RedrivePolicy(";
  out << "dlqName=" << to_string(obj.dlqName);
  out << ", " << "maxReceiveTime=" << to_string(obj.maxReceiveTime);
  out << ")";
  return out;
}


CreateQueueRequest::~CreateQueueRequest() throw() {
}


void CreateQueueRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void CreateQueueRequest::__set_queueAttribute(const QueueAttribute& val) {
  this->queueAttribute = val;
__isset.queueAttribute = true;
}

void CreateQueueRequest::__set_queueQuota(const QueueQuota& val) {
  this->queueQuota = val;
__isset.queueQuota = true;
}

void CreateQueueRequest::__set_deadLetterQueue(const bool val) {
  this->deadLetterQueue = val;
__isset.deadLetterQueue = true;
}

void CreateQueueRequest::__set_enablePriority(const bool val) {
  this->enablePriority = val;
__isset.enablePriority = true;
}

void CreateQueueRequest::__set_topicQueue(const bool val) {
  this->topicQueue = val;
__isset.topicQueue = true;
}

void CreateQueueRequest::__set_deleteMessageForce(const bool val) {
  this->deleteMessageForce = val;
__isset.deleteMessageForce = true;
}

void CreateQueueRequest::__set_defaultTagName(const std::string& val) {
  this->defaultTagName = val;
__isset.defaultTagName = true;
}

void CreateQueueRequest::__set_redrivePolicy(const RedrivePolicy& val) {
  this->redrivePolicy = val;
__isset.redrivePolicy = true;
}

const char* CreateQueueRequest::ascii_fingerprint = "B54538E825B9342B141496FB4D95CB59";
const uint8_t CreateQueueRequest::binary_fingerprint[16] = {0xB5,0x45,0x38,0xE8,0x25,0xB9,0x34,0x2B,0x14,0x14,0x96,0xFB,0x4D,0x95,0xCB,0x59};

uint32_t CreateQueueRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueAttribute.read(iprot);
          this->__isset.queueAttribute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueQuota.read(iprot);
          this->__isset.queueQuota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->deadLetterQueue);
          this->__isset.deadLetterQueue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enablePriority);
          this->__isset.enablePriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->topicQueue);
          this->__isset.topicQueue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->deleteMessageForce);
          this->__isset.deleteMessageForce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultTagName);
          this->__isset.defaultTagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->redrivePolicy.read(iprot);
          this->__isset.redrivePolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CreateQueueRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateQueueRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.queueAttribute) {
    xfer += oprot->writeFieldBegin("queueAttribute", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->queueAttribute.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queueQuota) {
    xfer += oprot->writeFieldBegin("queueQuota", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->queueQuota.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deadLetterQueue) {
    xfer += oprot->writeFieldBegin("deadLetterQueue", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->deadLetterQueue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enablePriority) {
    xfer += oprot->writeFieldBegin("enablePriority", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->enablePriority);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.topicQueue) {
    xfer += oprot->writeFieldBegin("topicQueue", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->topicQueue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deleteMessageForce) {
    xfer += oprot->writeFieldBegin("deleteMessageForce", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->deleteMessageForce);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultTagName) {
    xfer += oprot->writeFieldBegin("defaultTagName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->defaultTagName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.redrivePolicy) {
    xfer += oprot->writeFieldBegin("redrivePolicy", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->redrivePolicy.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateQueueRequest &a, CreateQueueRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.queueAttribute, b.queueAttribute);
  swap(a.queueQuota, b.queueQuota);
  swap(a.deadLetterQueue, b.deadLetterQueue);
  swap(a.enablePriority, b.enablePriority);
  swap(a.topicQueue, b.topicQueue);
  swap(a.deleteMessageForce, b.deleteMessageForce);
  swap(a.defaultTagName, b.defaultTagName);
  swap(a.redrivePolicy, b.redrivePolicy);
  swap(a.__isset, b.__isset);
}

CreateQueueRequest::CreateQueueRequest(const CreateQueueRequest& other18) {
  queueName = other18.queueName;
  queueAttribute = other18.queueAttribute;
  queueQuota = other18.queueQuota;
  deadLetterQueue = other18.deadLetterQueue;
  enablePriority = other18.enablePriority;
  topicQueue = other18.topicQueue;
  deleteMessageForce = other18.deleteMessageForce;
  defaultTagName = other18.defaultTagName;
  redrivePolicy = other18.redrivePolicy;
  __isset = other18.__isset;
}
CreateQueueRequest& CreateQueueRequest::operator=(const CreateQueueRequest& other19) {
  queueName = other19.queueName;
  queueAttribute = other19.queueAttribute;
  queueQuota = other19.queueQuota;
  deadLetterQueue = other19.deadLetterQueue;
  enablePriority = other19.enablePriority;
  topicQueue = other19.topicQueue;
  deleteMessageForce = other19.deleteMessageForce;
  defaultTagName = other19.defaultTagName;
  redrivePolicy = other19.redrivePolicy;
  __isset = other19.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateQueueRequest& obj) {
  using apache::thrift::to_string;
  out << "CreateQueueRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "queueAttribute="; (obj.__isset.queueAttribute ? (out << to_string(obj.queueAttribute)) : (out << "<null>"));
  out << ", " << "queueQuota="; (obj.__isset.queueQuota ? (out << to_string(obj.queueQuota)) : (out << "<null>"));
  out << ", " << "deadLetterQueue="; (obj.__isset.deadLetterQueue ? (out << to_string(obj.deadLetterQueue)) : (out << "<null>"));
  out << ", " << "enablePriority="; (obj.__isset.enablePriority ? (out << to_string(obj.enablePriority)) : (out << "<null>"));
  out << ", " << "topicQueue="; (obj.__isset.topicQueue ? (out << to_string(obj.topicQueue)) : (out << "<null>"));
  out << ", " << "deleteMessageForce="; (obj.__isset.deleteMessageForce ? (out << to_string(obj.deleteMessageForce)) : (out << "<null>"));
  out << ", " << "defaultTagName="; (obj.__isset.defaultTagName ? (out << to_string(obj.defaultTagName)) : (out << "<null>"));
  out << ", " << "redrivePolicy="; (obj.__isset.redrivePolicy ? (out << to_string(obj.redrivePolicy)) : (out << "<null>"));
  out << ")";
  return out;
}


CreateQueueResponse::~CreateQueueResponse() throw() {
}


void CreateQueueResponse::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void CreateQueueResponse::__set_queueAttribute(const QueueAttribute& val) {
  this->queueAttribute = val;
}

void CreateQueueResponse::__set_queueQuota(const QueueQuota& val) {
  this->queueQuota = val;
__isset.queueQuota = true;
}

void CreateQueueResponse::__set_deadLetterQueue(const bool val) {
  this->deadLetterQueue = val;
__isset.deadLetterQueue = true;
}

void CreateQueueResponse::__set_enablePriority(const bool val) {
  this->enablePriority = val;
__isset.enablePriority = true;
}

void CreateQueueResponse::__set_topicQueue(const bool val) {
  this->topicQueue = val;
__isset.topicQueue = true;
}

void CreateQueueResponse::__set_deleteMessageForce(const bool val) {
  this->deleteMessageForce = val;
__isset.deleteMessageForce = true;
}

void CreateQueueResponse::__set_defaultTagName(const std::string& val) {
  this->defaultTagName = val;
__isset.defaultTagName = true;
}

void CreateQueueResponse::__set_redrivePolicy(const RedrivePolicy& val) {
  this->redrivePolicy = val;
__isset.redrivePolicy = true;
}

const char* CreateQueueResponse::ascii_fingerprint = "52AAEF8D94141ADAAD00A7A2C29642D7";
const uint8_t CreateQueueResponse::binary_fingerprint[16] = {0x52,0xAA,0xEF,0x8D,0x94,0x14,0x1A,0xDA,0xAD,0x00,0xA7,0xA2,0xC2,0x96,0x42,0xD7};

uint32_t CreateQueueResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_queueAttribute = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueAttribute.read(iprot);
          isset_queueAttribute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueQuota.read(iprot);
          this->__isset.queueQuota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->deadLetterQueue);
          this->__isset.deadLetterQueue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enablePriority);
          this->__isset.enablePriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->topicQueue);
          this->__isset.topicQueue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->deleteMessageForce);
          this->__isset.deleteMessageForce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultTagName);
          this->__isset.defaultTagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->redrivePolicy.read(iprot);
          this->__isset.redrivePolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_queueAttribute)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CreateQueueResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateQueueResponse");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queueAttribute", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->queueAttribute.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.queueQuota) {
    xfer += oprot->writeFieldBegin("queueQuota", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->queueQuota.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deadLetterQueue) {
    xfer += oprot->writeFieldBegin("deadLetterQueue", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->deadLetterQueue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enablePriority) {
    xfer += oprot->writeFieldBegin("enablePriority", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->enablePriority);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.topicQueue) {
    xfer += oprot->writeFieldBegin("topicQueue", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->topicQueue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deleteMessageForce) {
    xfer += oprot->writeFieldBegin("deleteMessageForce", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->deleteMessageForce);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultTagName) {
    xfer += oprot->writeFieldBegin("defaultTagName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->defaultTagName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.redrivePolicy) {
    xfer += oprot->writeFieldBegin("redrivePolicy", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->redrivePolicy.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateQueueResponse &a, CreateQueueResponse &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.queueAttribute, b.queueAttribute);
  swap(a.queueQuota, b.queueQuota);
  swap(a.deadLetterQueue, b.deadLetterQueue);
  swap(a.enablePriority, b.enablePriority);
  swap(a.topicQueue, b.topicQueue);
  swap(a.deleteMessageForce, b.deleteMessageForce);
  swap(a.defaultTagName, b.defaultTagName);
  swap(a.redrivePolicy, b.redrivePolicy);
  swap(a.__isset, b.__isset);
}

CreateQueueResponse::CreateQueueResponse(const CreateQueueResponse& other20) {
  queueName = other20.queueName;
  queueAttribute = other20.queueAttribute;
  queueQuota = other20.queueQuota;
  deadLetterQueue = other20.deadLetterQueue;
  enablePriority = other20.enablePriority;
  topicQueue = other20.topicQueue;
  deleteMessageForce = other20.deleteMessageForce;
  defaultTagName = other20.defaultTagName;
  redrivePolicy = other20.redrivePolicy;
  __isset = other20.__isset;
}
CreateQueueResponse& CreateQueueResponse::operator=(const CreateQueueResponse& other21) {
  queueName = other21.queueName;
  queueAttribute = other21.queueAttribute;
  queueQuota = other21.queueQuota;
  deadLetterQueue = other21.deadLetterQueue;
  enablePriority = other21.enablePriority;
  topicQueue = other21.topicQueue;
  deleteMessageForce = other21.deleteMessageForce;
  defaultTagName = other21.defaultTagName;
  redrivePolicy = other21.redrivePolicy;
  __isset = other21.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateQueueResponse& obj) {
  using apache::thrift::to_string;
  out << "CreateQueueResponse(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "queueAttribute=" << to_string(obj.queueAttribute);
  out << ", " << "queueQuota="; (obj.__isset.queueQuota ? (out << to_string(obj.queueQuota)) : (out << "<null>"));
  out << ", " << "deadLetterQueue="; (obj.__isset.deadLetterQueue ? (out << to_string(obj.deadLetterQueue)) : (out << "<null>"));
  out << ", " << "enablePriority="; (obj.__isset.enablePriority ? (out << to_string(obj.enablePriority)) : (out << "<null>"));
  out << ", " << "topicQueue="; (obj.__isset.topicQueue ? (out << to_string(obj.topicQueue)) : (out << "<null>"));
  out << ", " << "deleteMessageForce="; (obj.__isset.deleteMessageForce ? (out << to_string(obj.deleteMessageForce)) : (out << "<null>"));
  out << ", " << "defaultTagName="; (obj.__isset.defaultTagName ? (out << to_string(obj.defaultTagName)) : (out << "<null>"));
  out << ", " << "redrivePolicy="; (obj.__isset.redrivePolicy ? (out << to_string(obj.redrivePolicy)) : (out << "<null>"));
  out << ")";
  return out;
}


DeleteQueueRequest::~DeleteQueueRequest() throw() {
}


void DeleteQueueRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

const char* DeleteQueueRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t DeleteQueueRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t DeleteQueueRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeleteQueueRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeleteQueueRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeleteQueueRequest &a, DeleteQueueRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
}

DeleteQueueRequest::DeleteQueueRequest(const DeleteQueueRequest& other22) {
  queueName = other22.queueName;
}
DeleteQueueRequest& DeleteQueueRequest::operator=(const DeleteQueueRequest& other23) {
  queueName = other23.queueName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeleteQueueRequest& obj) {
  using apache::thrift::to_string;
  out << "DeleteQueueRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ")";
  return out;
}


PurgeQueueRequest::~PurgeQueueRequest() throw() {
}


void PurgeQueueRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

const char* PurgeQueueRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t PurgeQueueRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t PurgeQueueRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PurgeQueueRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PurgeQueueRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PurgeQueueRequest &a, PurgeQueueRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
}

PurgeQueueRequest::PurgeQueueRequest(const PurgeQueueRequest& other24) {
  queueName = other24.queueName;
}
PurgeQueueRequest& PurgeQueueRequest::operator=(const PurgeQueueRequest& other25) {
  queueName = other25.queueName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PurgeQueueRequest& obj) {
  using apache::thrift::to_string;
  out << "PurgeQueueRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ")";
  return out;
}


SetQueueAttributesRequest::~SetQueueAttributesRequest() throw() {
}


void SetQueueAttributesRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void SetQueueAttributesRequest::__set_queueAttribute(const QueueAttribute& val) {
  this->queueAttribute = val;
__isset.queueAttribute = true;
}

const char* SetQueueAttributesRequest::ascii_fingerprint = "C8E36B95EF63F65F277F0448CCA51641";
const uint8_t SetQueueAttributesRequest::binary_fingerprint[16] = {0xC8,0xE3,0x6B,0x95,0xEF,0x63,0xF6,0x5F,0x27,0x7F,0x04,0x48,0xCC,0xA5,0x16,0x41};

uint32_t SetQueueAttributesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueAttribute.read(iprot);
          this->__isset.queueAttribute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SetQueueAttributesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SetQueueAttributesRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.queueAttribute) {
    xfer += oprot->writeFieldBegin("queueAttribute", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->queueAttribute.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SetQueueAttributesRequest &a, SetQueueAttributesRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.queueAttribute, b.queueAttribute);
  swap(a.__isset, b.__isset);
}

SetQueueAttributesRequest::SetQueueAttributesRequest(const SetQueueAttributesRequest& other26) {
  queueName = other26.queueName;
  queueAttribute = other26.queueAttribute;
  __isset = other26.__isset;
}
SetQueueAttributesRequest& SetQueueAttributesRequest::operator=(const SetQueueAttributesRequest& other27) {
  queueName = other27.queueName;
  queueAttribute = other27.queueAttribute;
  __isset = other27.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SetQueueAttributesRequest& obj) {
  using apache::thrift::to_string;
  out << "SetQueueAttributesRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "queueAttribute="; (obj.__isset.queueAttribute ? (out << to_string(obj.queueAttribute)) : (out << "<null>"));
  out << ")";
  return out;
}


SetQueueAttributesResponse::~SetQueueAttributesResponse() throw() {
}


void SetQueueAttributesResponse::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void SetQueueAttributesResponse::__set_queueAttribute(const QueueAttribute& val) {
  this->queueAttribute = val;
}

const char* SetQueueAttributesResponse::ascii_fingerprint = "5BCA56CB1583F97B95297BE21187BE74";
const uint8_t SetQueueAttributesResponse::binary_fingerprint[16] = {0x5B,0xCA,0x56,0xCB,0x15,0x83,0xF9,0x7B,0x95,0x29,0x7B,0xE2,0x11,0x87,0xBE,0x74};

uint32_t SetQueueAttributesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_queueAttribute = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueAttribute.read(iprot);
          isset_queueAttribute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_queueAttribute)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SetQueueAttributesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SetQueueAttributesResponse");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queueAttribute", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->queueAttribute.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SetQueueAttributesResponse &a, SetQueueAttributesResponse &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.queueAttribute, b.queueAttribute);
}

SetQueueAttributesResponse::SetQueueAttributesResponse(const SetQueueAttributesResponse& other28) {
  queueName = other28.queueName;
  queueAttribute = other28.queueAttribute;
}
SetQueueAttributesResponse& SetQueueAttributesResponse::operator=(const SetQueueAttributesResponse& other29) {
  queueName = other29.queueName;
  queueAttribute = other29.queueAttribute;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SetQueueAttributesResponse& obj) {
  using apache::thrift::to_string;
  out << "SetQueueAttributesResponse(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "queueAttribute=" << to_string(obj.queueAttribute);
  out << ")";
  return out;
}


SetQueueQuotaRequest::~SetQueueQuotaRequest() throw() {
}


void SetQueueQuotaRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void SetQueueQuotaRequest::__set_queueQuota(const QueueQuota& val) {
  this->queueQuota = val;
__isset.queueQuota = true;
}

const char* SetQueueQuotaRequest::ascii_fingerprint = "8A73A101E00D11AFCF38176BA0A929BB";
const uint8_t SetQueueQuotaRequest::binary_fingerprint[16] = {0x8A,0x73,0xA1,0x01,0xE0,0x0D,0x11,0xAF,0xCF,0x38,0x17,0x6B,0xA0,0xA9,0x29,0xBB};

uint32_t SetQueueQuotaRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueQuota.read(iprot);
          this->__isset.queueQuota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SetQueueQuotaRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SetQueueQuotaRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.queueQuota) {
    xfer += oprot->writeFieldBegin("queueQuota", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->queueQuota.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SetQueueQuotaRequest &a, SetQueueQuotaRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.queueQuota, b.queueQuota);
  swap(a.__isset, b.__isset);
}

SetQueueQuotaRequest::SetQueueQuotaRequest(const SetQueueQuotaRequest& other30) {
  queueName = other30.queueName;
  queueQuota = other30.queueQuota;
  __isset = other30.__isset;
}
SetQueueQuotaRequest& SetQueueQuotaRequest::operator=(const SetQueueQuotaRequest& other31) {
  queueName = other31.queueName;
  queueQuota = other31.queueQuota;
  __isset = other31.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SetQueueQuotaRequest& obj) {
  using apache::thrift::to_string;
  out << "SetQueueQuotaRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "queueQuota="; (obj.__isset.queueQuota ? (out << to_string(obj.queueQuota)) : (out << "<null>"));
  out << ")";
  return out;
}


SetQueueQuotaResponse::~SetQueueQuotaResponse() throw() {
}


void SetQueueQuotaResponse::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void SetQueueQuotaResponse::__set_queueQuota(const QueueQuota& val) {
  this->queueQuota = val;
__isset.queueQuota = true;
}

const char* SetQueueQuotaResponse::ascii_fingerprint = "8A73A101E00D11AFCF38176BA0A929BB";
const uint8_t SetQueueQuotaResponse::binary_fingerprint[16] = {0x8A,0x73,0xA1,0x01,0xE0,0x0D,0x11,0xAF,0xCF,0x38,0x17,0x6B,0xA0,0xA9,0x29,0xBB};

uint32_t SetQueueQuotaResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueQuota.read(iprot);
          this->__isset.queueQuota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SetQueueQuotaResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SetQueueQuotaResponse");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.queueQuota) {
    xfer += oprot->writeFieldBegin("queueQuota", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->queueQuota.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SetQueueQuotaResponse &a, SetQueueQuotaResponse &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.queueQuota, b.queueQuota);
  swap(a.__isset, b.__isset);
}

SetQueueQuotaResponse::SetQueueQuotaResponse(const SetQueueQuotaResponse& other32) {
  queueName = other32.queueName;
  queueQuota = other32.queueQuota;
  __isset = other32.__isset;
}
SetQueueQuotaResponse& SetQueueQuotaResponse::operator=(const SetQueueQuotaResponse& other33) {
  queueName = other33.queueName;
  queueQuota = other33.queueQuota;
  __isset = other33.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SetQueueQuotaResponse& obj) {
  using apache::thrift::to_string;
  out << "SetQueueQuotaResponse(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "queueQuota="; (obj.__isset.queueQuota ? (out << to_string(obj.queueQuota)) : (out << "<null>"));
  out << ")";
  return out;
}


GetQueueInfoRequest::~GetQueueInfoRequest() throw() {
}


void GetQueueInfoRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

const char* GetQueueInfoRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t GetQueueInfoRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t GetQueueInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetQueueInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetQueueInfoRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetQueueInfoRequest &a, GetQueueInfoRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
}

GetQueueInfoRequest::GetQueueInfoRequest(const GetQueueInfoRequest& other34) {
  queueName = other34.queueName;
}
GetQueueInfoRequest& GetQueueInfoRequest::operator=(const GetQueueInfoRequest& other35) {
  queueName = other35.queueName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetQueueInfoRequest& obj) {
  using apache::thrift::to_string;
  out << "GetQueueInfoRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ")";
  return out;
}


GetQueueInfoResponse::~GetQueueInfoResponse() throw() {
}


void GetQueueInfoResponse::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void GetQueueInfoResponse::__set_queueAttribute(const QueueAttribute& val) {
  this->queueAttribute = val;
}

void GetQueueInfoResponse::__set_queueState(const QueueState& val) {
  this->queueState = val;
}

void GetQueueInfoResponse::__set_queueQuota(const QueueQuota& val) {
  this->queueQuota = val;
__isset.queueQuota = true;
}

void GetQueueInfoResponse::__set_isDeadLetterQueue(const bool val) {
  this->isDeadLetterQueue = val;
__isset.isDeadLetterQueue = true;
}

void GetQueueInfoResponse::__set_redrivePolicy(const RedrivePolicy& val) {
  this->redrivePolicy = val;
__isset.redrivePolicy = true;
}

void GetQueueInfoResponse::__set_enablePriority(const bool val) {
  this->enablePriority = val;
__isset.enablePriority = true;
}

void GetQueueInfoResponse::__set_topicQueue(const bool val) {
  this->topicQueue = val;
__isset.topicQueue = true;
}

void GetQueueInfoResponse::__set_deleteMessageForce(const bool val) {
  this->deleteMessageForce = val;
__isset.deleteMessageForce = true;
}

void GetQueueInfoResponse::__set_defaultTagName(const std::string& val) {
  this->defaultTagName = val;
__isset.defaultTagName = true;
}

void GetQueueInfoResponse::__set_sourceQueues(const std::vector<std::string> & val) {
  this->sourceQueues = val;
__isset.sourceQueues = true;
}

const char* GetQueueInfoResponse::ascii_fingerprint = "570DE9048FD7DFC39857E0A74A0363E2";
const uint8_t GetQueueInfoResponse::binary_fingerprint[16] = {0x57,0x0D,0xE9,0x04,0x8F,0xD7,0xDF,0xC3,0x98,0x57,0xE0,0xA7,0x4A,0x03,0x63,0xE2};

uint32_t GetQueueInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_queueAttribute = false;
  bool isset_queueState = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueAttribute.read(iprot);
          isset_queueAttribute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueState.read(iprot);
          isset_queueState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueQuota.read(iprot);
          this->__isset.queueQuota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isDeadLetterQueue);
          this->__isset.isDeadLetterQueue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->redrivePolicy.read(iprot);
          this->__isset.redrivePolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enablePriority);
          this->__isset.enablePriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->topicQueue);
          this->__isset.topicQueue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->deleteMessageForce);
          this->__isset.deleteMessageForce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultTagName);
          this->__isset.defaultTagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sourceQueues.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readListBegin(_etype39, _size36);
            this->sourceQueues.resize(_size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              xfer += iprot->readString(this->sourceQueues[_i40]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sourceQueues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_queueAttribute)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_queueState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetQueueInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetQueueInfoResponse");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queueAttribute", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->queueAttribute.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queueState", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->queueState.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.queueQuota) {
    xfer += oprot->writeFieldBegin("queueQuota", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->queueQuota.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isDeadLetterQueue) {
    xfer += oprot->writeFieldBegin("isDeadLetterQueue", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->isDeadLetterQueue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.redrivePolicy) {
    xfer += oprot->writeFieldBegin("redrivePolicy", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->redrivePolicy.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enablePriority) {
    xfer += oprot->writeFieldBegin("enablePriority", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->enablePriority);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.topicQueue) {
    xfer += oprot->writeFieldBegin("topicQueue", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->topicQueue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deleteMessageForce) {
    xfer += oprot->writeFieldBegin("deleteMessageForce", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->deleteMessageForce);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultTagName) {
    xfer += oprot->writeFieldBegin("defaultTagName", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->defaultTagName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sourceQueues) {
    xfer += oprot->writeFieldBegin("sourceQueues", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->sourceQueues.size()));
      std::vector<std::string> ::const_iterator _iter41;
      for (_iter41 = this->sourceQueues.begin(); _iter41 != this->sourceQueues.end(); ++_iter41)
      {
        xfer += oprot->writeString((*_iter41));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetQueueInfoResponse &a, GetQueueInfoResponse &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.queueAttribute, b.queueAttribute);
  swap(a.queueState, b.queueState);
  swap(a.queueQuota, b.queueQuota);
  swap(a.isDeadLetterQueue, b.isDeadLetterQueue);
  swap(a.redrivePolicy, b.redrivePolicy);
  swap(a.enablePriority, b.enablePriority);
  swap(a.topicQueue, b.topicQueue);
  swap(a.deleteMessageForce, b.deleteMessageForce);
  swap(a.defaultTagName, b.defaultTagName);
  swap(a.sourceQueues, b.sourceQueues);
  swap(a.__isset, b.__isset);
}

GetQueueInfoResponse::GetQueueInfoResponse(const GetQueueInfoResponse& other42) {
  queueName = other42.queueName;
  queueAttribute = other42.queueAttribute;
  queueState = other42.queueState;
  queueQuota = other42.queueQuota;
  isDeadLetterQueue = other42.isDeadLetterQueue;
  redrivePolicy = other42.redrivePolicy;
  enablePriority = other42.enablePriority;
  topicQueue = other42.topicQueue;
  deleteMessageForce = other42.deleteMessageForce;
  defaultTagName = other42.defaultTagName;
  sourceQueues = other42.sourceQueues;
  __isset = other42.__isset;
}
GetQueueInfoResponse& GetQueueInfoResponse::operator=(const GetQueueInfoResponse& other43) {
  queueName = other43.queueName;
  queueAttribute = other43.queueAttribute;
  queueState = other43.queueState;
  queueQuota = other43.queueQuota;
  isDeadLetterQueue = other43.isDeadLetterQueue;
  redrivePolicy = other43.redrivePolicy;
  enablePriority = other43.enablePriority;
  topicQueue = other43.topicQueue;
  deleteMessageForce = other43.deleteMessageForce;
  defaultTagName = other43.defaultTagName;
  sourceQueues = other43.sourceQueues;
  __isset = other43.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetQueueInfoResponse& obj) {
  using apache::thrift::to_string;
  out << "GetQueueInfoResponse(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "queueAttribute=" << to_string(obj.queueAttribute);
  out << ", " << "queueState=" << to_string(obj.queueState);
  out << ", " << "queueQuota="; (obj.__isset.queueQuota ? (out << to_string(obj.queueQuota)) : (out << "<null>"));
  out << ", " << "isDeadLetterQueue="; (obj.__isset.isDeadLetterQueue ? (out << to_string(obj.isDeadLetterQueue)) : (out << "<null>"));
  out << ", " << "redrivePolicy="; (obj.__isset.redrivePolicy ? (out << to_string(obj.redrivePolicy)) : (out << "<null>"));
  out << ", " << "enablePriority="; (obj.__isset.enablePriority ? (out << to_string(obj.enablePriority)) : (out << "<null>"));
  out << ", " << "topicQueue="; (obj.__isset.topicQueue ? (out << to_string(obj.topicQueue)) : (out << "<null>"));
  out << ", " << "deleteMessageForce="; (obj.__isset.deleteMessageForce ? (out << to_string(obj.deleteMessageForce)) : (out << "<null>"));
  out << ", " << "defaultTagName="; (obj.__isset.defaultTagName ? (out << to_string(obj.defaultTagName)) : (out << "<null>"));
  out << ", " << "sourceQueues="; (obj.__isset.sourceQueues ? (out << to_string(obj.sourceQueues)) : (out << "<null>"));
  out << ")";
  return out;
}


SetQueueRedrivePolicyRequest::~SetQueueRedrivePolicyRequest() throw() {
}


void SetQueueRedrivePolicyRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void SetQueueRedrivePolicyRequest::__set_redrivePolicy(const RedrivePolicy& val) {
  this->redrivePolicy = val;
}

const char* SetQueueRedrivePolicyRequest::ascii_fingerprint = "8A6FE535189D3403D9FD6C98A103F76F";
const uint8_t SetQueueRedrivePolicyRequest::binary_fingerprint[16] = {0x8A,0x6F,0xE5,0x35,0x18,0x9D,0x34,0x03,0xD9,0xFD,0x6C,0x98,0xA1,0x03,0xF7,0x6F};

uint32_t SetQueueRedrivePolicyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_redrivePolicy = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->redrivePolicy.read(iprot);
          isset_redrivePolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_redrivePolicy)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SetQueueRedrivePolicyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SetQueueRedrivePolicyRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("redrivePolicy", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->redrivePolicy.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SetQueueRedrivePolicyRequest &a, SetQueueRedrivePolicyRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.redrivePolicy, b.redrivePolicy);
}

SetQueueRedrivePolicyRequest::SetQueueRedrivePolicyRequest(const SetQueueRedrivePolicyRequest& other44) {
  queueName = other44.queueName;
  redrivePolicy = other44.redrivePolicy;
}
SetQueueRedrivePolicyRequest& SetQueueRedrivePolicyRequest::operator=(const SetQueueRedrivePolicyRequest& other45) {
  queueName = other45.queueName;
  redrivePolicy = other45.redrivePolicy;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SetQueueRedrivePolicyRequest& obj) {
  using apache::thrift::to_string;
  out << "SetQueueRedrivePolicyRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "redrivePolicy=" << to_string(obj.redrivePolicy);
  out << ")";
  return out;
}


SetQueueRedrivePolicyResponse::~SetQueueRedrivePolicyResponse() throw() {
}


void SetQueueRedrivePolicyResponse::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void SetQueueRedrivePolicyResponse::__set_redrivePolicy(const RedrivePolicy& val) {
  this->redrivePolicy = val;
}

const char* SetQueueRedrivePolicyResponse::ascii_fingerprint = "8A6FE535189D3403D9FD6C98A103F76F";
const uint8_t SetQueueRedrivePolicyResponse::binary_fingerprint[16] = {0x8A,0x6F,0xE5,0x35,0x18,0x9D,0x34,0x03,0xD9,0xFD,0x6C,0x98,0xA1,0x03,0xF7,0x6F};

uint32_t SetQueueRedrivePolicyResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_redrivePolicy = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->redrivePolicy.read(iprot);
          isset_redrivePolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_redrivePolicy)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SetQueueRedrivePolicyResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SetQueueRedrivePolicyResponse");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("redrivePolicy", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->redrivePolicy.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SetQueueRedrivePolicyResponse &a, SetQueueRedrivePolicyResponse &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.redrivePolicy, b.redrivePolicy);
}

SetQueueRedrivePolicyResponse::SetQueueRedrivePolicyResponse(const SetQueueRedrivePolicyResponse& other46) {
  queueName = other46.queueName;
  redrivePolicy = other46.redrivePolicy;
}
SetQueueRedrivePolicyResponse& SetQueueRedrivePolicyResponse::operator=(const SetQueueRedrivePolicyResponse& other47) {
  queueName = other47.queueName;
  redrivePolicy = other47.redrivePolicy;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SetQueueRedrivePolicyResponse& obj) {
  using apache::thrift::to_string;
  out << "SetQueueRedrivePolicyResponse(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "redrivePolicy=" << to_string(obj.redrivePolicy);
  out << ")";
  return out;
}


RemoveQueueRedrivePolicyRequest::~RemoveQueueRedrivePolicyRequest() throw() {
}


void RemoveQueueRedrivePolicyRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

const char* RemoveQueueRedrivePolicyRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t RemoveQueueRedrivePolicyRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t RemoveQueueRedrivePolicyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RemoveQueueRedrivePolicyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RemoveQueueRedrivePolicyRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RemoveQueueRedrivePolicyRequest &a, RemoveQueueRedrivePolicyRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
}

RemoveQueueRedrivePolicyRequest::RemoveQueueRedrivePolicyRequest(const RemoveQueueRedrivePolicyRequest& other48) {
  queueName = other48.queueName;
}
RemoveQueueRedrivePolicyRequest& RemoveQueueRedrivePolicyRequest::operator=(const RemoveQueueRedrivePolicyRequest& other49) {
  queueName = other49.queueName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RemoveQueueRedrivePolicyRequest& obj) {
  using apache::thrift::to_string;
  out << "RemoveQueueRedrivePolicyRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ")";
  return out;
}


ListQueueRequest::~ListQueueRequest() throw() {
}


void ListQueueRequest::__set_queueNamePrefix(const std::string& val) {
  this->queueNamePrefix = val;
__isset.queueNamePrefix = true;
}

const char* ListQueueRequest::ascii_fingerprint = "66E694018C17E5B65A59AE8F55CCA3CD";
const uint8_t ListQueueRequest::binary_fingerprint[16] = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

uint32_t ListQueueRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueNamePrefix);
          this->__isset.queueNamePrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListQueueRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ListQueueRequest");

  if (this->__isset.queueNamePrefix) {
    xfer += oprot->writeFieldBegin("queueNamePrefix", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->queueNamePrefix);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ListQueueRequest &a, ListQueueRequest &b) {
  using ::std::swap;
  swap(a.queueNamePrefix, b.queueNamePrefix);
  swap(a.__isset, b.__isset);
}

ListQueueRequest::ListQueueRequest(const ListQueueRequest& other50) {
  queueNamePrefix = other50.queueNamePrefix;
  __isset = other50.__isset;
}
ListQueueRequest& ListQueueRequest::operator=(const ListQueueRequest& other51) {
  queueNamePrefix = other51.queueNamePrefix;
  __isset = other51.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ListQueueRequest& obj) {
  using apache::thrift::to_string;
  out << "ListQueueRequest(";
  out << "queueNamePrefix="; (obj.__isset.queueNamePrefix ? (out << to_string(obj.queueNamePrefix)) : (out << "<null>"));
  out << ")";
  return out;
}


ListQueueResponse::~ListQueueResponse() throw() {
}


void ListQueueResponse::__set_queueName(const std::vector<std::string> & val) {
  this->queueName = val;
}

const char* ListQueueResponse::ascii_fingerprint = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
const uint8_t ListQueueResponse::binary_fingerprint[16] = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

uint32_t ListQueueResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->queueName.clear();
            uint32_t _size52;
            ::apache::thrift::protocol::TType _etype55;
            xfer += iprot->readListBegin(_etype55, _size52);
            this->queueName.resize(_size52);
            uint32_t _i56;
            for (_i56 = 0; _i56 < _size52; ++_i56)
            {
              xfer += iprot->readString(this->queueName[_i56]);
            }
            xfer += iprot->readListEnd();
          }
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ListQueueResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ListQueueResponse");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->queueName.size()));
    std::vector<std::string> ::const_iterator _iter57;
    for (_iter57 = this->queueName.begin(); _iter57 != this->queueName.end(); ++_iter57)
    {
      xfer += oprot->writeString((*_iter57));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ListQueueResponse &a, ListQueueResponse &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
}

ListQueueResponse::ListQueueResponse(const ListQueueResponse& other58) {
  queueName = other58.queueName;
}
ListQueueResponse& ListQueueResponse::operator=(const ListQueueResponse& other59) {
  queueName = other59.queueName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ListQueueResponse& obj) {
  using apache::thrift::to_string;
  out << "ListQueueResponse(";
  out << "queueName=" << to_string(obj.queueName);
  out << ")";
  return out;
}


QueryPrivilegedQueueRequest::~QueryPrivilegedQueueRequest() throw() {
}


void QueryPrivilegedQueueRequest::__set_queueNamePrefix(const std::string& val) {
  this->queueNamePrefix = val;
__isset.queueNamePrefix = true;
}

const char* QueryPrivilegedQueueRequest::ascii_fingerprint = "66E694018C17E5B65A59AE8F55CCA3CD";
const uint8_t QueryPrivilegedQueueRequest::binary_fingerprint[16] = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

uint32_t QueryPrivilegedQueueRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueNamePrefix);
          this->__isset.queueNamePrefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryPrivilegedQueueRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("QueryPrivilegedQueueRequest");

  if (this->__isset.queueNamePrefix) {
    xfer += oprot->writeFieldBegin("queueNamePrefix", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->queueNamePrefix);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(QueryPrivilegedQueueRequest &a, QueryPrivilegedQueueRequest &b) {
  using ::std::swap;
  swap(a.queueNamePrefix, b.queueNamePrefix);
  swap(a.__isset, b.__isset);
}

QueryPrivilegedQueueRequest::QueryPrivilegedQueueRequest(const QueryPrivilegedQueueRequest& other60) {
  queueNamePrefix = other60.queueNamePrefix;
  __isset = other60.__isset;
}
QueryPrivilegedQueueRequest& QueryPrivilegedQueueRequest::operator=(const QueryPrivilegedQueueRequest& other61) {
  queueNamePrefix = other61.queueNamePrefix;
  __isset = other61.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const QueryPrivilegedQueueRequest& obj) {
  using apache::thrift::to_string;
  out << "QueryPrivilegedQueueRequest(";
  out << "queueNamePrefix="; (obj.__isset.queueNamePrefix ? (out << to_string(obj.queueNamePrefix)) : (out << "<null>"));
  out << ")";
  return out;
}


QueryPrivilegedQueueResponseEntry::~QueryPrivilegedQueueResponseEntry() throw() {
}


void QueryPrivilegedQueueResponseEntry::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void QueryPrivilegedQueueResponseEntry::__set_approximateMessageNumber(const int64_t val) {
  this->approximateMessageNumber = val;
}

void QueryPrivilegedQueueResponseEntry::__set_approximateAvailableMessageNumber(const int64_t val) {
  this->approximateAvailableMessageNumber = val;
}

void QueryPrivilegedQueueResponseEntry::__set_approximateInvisibilityMessageNumber(const int64_t val) {
  this->approximateInvisibilityMessageNumber = val;
}

const char* QueryPrivilegedQueueResponseEntry::ascii_fingerprint = "01233FF45FD1A48AF6DDBF39A5D0547E";
const uint8_t QueryPrivilegedQueueResponseEntry::binary_fingerprint[16] = {0x01,0x23,0x3F,0xF4,0x5F,0xD1,0xA4,0x8A,0xF6,0xDD,0xBF,0x39,0xA5,0xD0,0x54,0x7E};

uint32_t QueryPrivilegedQueueResponseEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_approximateMessageNumber = false;
  bool isset_approximateAvailableMessageNumber = false;
  bool isset_approximateInvisibilityMessageNumber = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->approximateMessageNumber);
          isset_approximateMessageNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->approximateAvailableMessageNumber);
          isset_approximateAvailableMessageNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->approximateInvisibilityMessageNumber);
          isset_approximateInvisibilityMessageNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_approximateMessageNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_approximateAvailableMessageNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_approximateInvisibilityMessageNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QueryPrivilegedQueueResponseEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("QueryPrivilegedQueueResponseEntry");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("approximateMessageNumber", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->approximateMessageNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("approximateAvailableMessageNumber", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->approximateAvailableMessageNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("approximateInvisibilityMessageNumber", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->approximateInvisibilityMessageNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(QueryPrivilegedQueueResponseEntry &a, QueryPrivilegedQueueResponseEntry &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.approximateMessageNumber, b.approximateMessageNumber);
  swap(a.approximateAvailableMessageNumber, b.approximateAvailableMessageNumber);
  swap(a.approximateInvisibilityMessageNumber, b.approximateInvisibilityMessageNumber);
}

QueryPrivilegedQueueResponseEntry::QueryPrivilegedQueueResponseEntry(const QueryPrivilegedQueueResponseEntry& other62) {
  queueName = other62.queueName;
  approximateMessageNumber = other62.approximateMessageNumber;
  approximateAvailableMessageNumber = other62.approximateAvailableMessageNumber;
  approximateInvisibilityMessageNumber = other62.approximateInvisibilityMessageNumber;
}
QueryPrivilegedQueueResponseEntry& QueryPrivilegedQueueResponseEntry::operator=(const QueryPrivilegedQueueResponseEntry& other63) {
  queueName = other63.queueName;
  approximateMessageNumber = other63.approximateMessageNumber;
  approximateAvailableMessageNumber = other63.approximateAvailableMessageNumber;
  approximateInvisibilityMessageNumber = other63.approximateInvisibilityMessageNumber;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const QueryPrivilegedQueueResponseEntry& obj) {
  using apache::thrift::to_string;
  out << "QueryPrivilegedQueueResponseEntry(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "approximateMessageNumber=" << to_string(obj.approximateMessageNumber);
  out << ", " << "approximateAvailableMessageNumber=" << to_string(obj.approximateAvailableMessageNumber);
  out << ", " << "approximateInvisibilityMessageNumber=" << to_string(obj.approximateInvisibilityMessageNumber);
  out << ")";
  return out;
}


QueryPrivilegedQueueResponse::~QueryPrivilegedQueueResponse() throw() {
}


void QueryPrivilegedQueueResponse::__set_queueList(const std::vector<QueryPrivilegedQueueResponseEntry> & val) {
  this->queueList = val;
}

const char* QueryPrivilegedQueueResponse::ascii_fingerprint = "0442637B87B5E23BF7E06AE1D56D1080";
const uint8_t QueryPrivilegedQueueResponse::binary_fingerprint[16] = {0x04,0x42,0x63,0x7B,0x87,0xB5,0xE2,0x3B,0xF7,0xE0,0x6A,0xE1,0xD5,0x6D,0x10,0x80};

uint32_t QueryPrivilegedQueueResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->queueList.clear();
            uint32_t _size64;
            ::apache::thrift::protocol::TType _etype67;
            xfer += iprot->readListBegin(_etype67, _size64);
            this->queueList.resize(_size64);
            uint32_t _i68;
            for (_i68 = 0; _i68 < _size64; ++_i68)
            {
              xfer += this->queueList[_i68].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_queueList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QueryPrivilegedQueueResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("QueryPrivilegedQueueResponse");

  xfer += oprot->writeFieldBegin("queueList", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->queueList.size()));
    std::vector<QueryPrivilegedQueueResponseEntry> ::const_iterator _iter69;
    for (_iter69 = this->queueList.begin(); _iter69 != this->queueList.end(); ++_iter69)
    {
      xfer += (*_iter69).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(QueryPrivilegedQueueResponse &a, QueryPrivilegedQueueResponse &b) {
  using ::std::swap;
  swap(a.queueList, b.queueList);
}

QueryPrivilegedQueueResponse::QueryPrivilegedQueueResponse(const QueryPrivilegedQueueResponse& other70) {
  queueList = other70.queueList;
}
QueryPrivilegedQueueResponse& QueryPrivilegedQueueResponse::operator=(const QueryPrivilegedQueueResponse& other71) {
  queueList = other71.queueList;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const QueryPrivilegedQueueResponse& obj) {
  using apache::thrift::to_string;
  out << "QueryPrivilegedQueueResponse(";
  out << "queueList=" << to_string(obj.queueList);
  out << ")";
  return out;
}


SetPermissionRequest::~SetPermissionRequest() throw() {
}


void SetPermissionRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void SetPermissionRequest::__set_developerId(const std::string& val) {
  this->developerId = val;
}

void SetPermissionRequest::__set_permission(const Permission::type val) {
  this->permission = val;
}

const char* SetPermissionRequest::ascii_fingerprint = "4F8ABE747D9A2DF14F7E84DDBE60D55C";
const uint8_t SetPermissionRequest::binary_fingerprint[16] = {0x4F,0x8A,0xBE,0x74,0x7D,0x9A,0x2D,0xF1,0x4F,0x7E,0x84,0xDD,0xBE,0x60,0xD5,0x5C};

uint32_t SetPermissionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_developerId = false;
  bool isset_permission = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->developerId);
          isset_developerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast72;
          xfer += iprot->readI32(ecast72);
          this->permission = (Permission::type)ecast72;
          isset_permission = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_developerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_permission)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SetPermissionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SetPermissionRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("developerId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->developerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("permission", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->permission);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SetPermissionRequest &a, SetPermissionRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.developerId, b.developerId);
  swap(a.permission, b.permission);
}

SetPermissionRequest::SetPermissionRequest(const SetPermissionRequest& other73) {
  queueName = other73.queueName;
  developerId = other73.developerId;
  permission = other73.permission;
}
SetPermissionRequest& SetPermissionRequest::operator=(const SetPermissionRequest& other74) {
  queueName = other74.queueName;
  developerId = other74.developerId;
  permission = other74.permission;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SetPermissionRequest& obj) {
  using apache::thrift::to_string;
  out << "SetPermissionRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "developerId=" << to_string(obj.developerId);
  out << ", " << "permission=" << to_string(obj.permission);
  out << ")";
  return out;
}


RevokePermissionRequest::~RevokePermissionRequest() throw() {
}


void RevokePermissionRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void RevokePermissionRequest::__set_developerId(const std::string& val) {
  this->developerId = val;
}

const char* RevokePermissionRequest::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t RevokePermissionRequest::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t RevokePermissionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_developerId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->developerId);
          isset_developerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_developerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RevokePermissionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RevokePermissionRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("developerId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->developerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RevokePermissionRequest &a, RevokePermissionRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.developerId, b.developerId);
}

RevokePermissionRequest::RevokePermissionRequest(const RevokePermissionRequest& other75) {
  queueName = other75.queueName;
  developerId = other75.developerId;
}
RevokePermissionRequest& RevokePermissionRequest::operator=(const RevokePermissionRequest& other76) {
  queueName = other76.queueName;
  developerId = other76.developerId;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RevokePermissionRequest& obj) {
  using apache::thrift::to_string;
  out << "RevokePermissionRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "developerId=" << to_string(obj.developerId);
  out << ")";
  return out;
}


QueryPermissionRequest::~QueryPermissionRequest() throw() {
}


void QueryPermissionRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

const char* QueryPermissionRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t QueryPermissionRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t QueryPermissionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QueryPermissionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("QueryPermissionRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(QueryPermissionRequest &a, QueryPermissionRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
}

QueryPermissionRequest::QueryPermissionRequest(const QueryPermissionRequest& other77) {
  queueName = other77.queueName;
}
QueryPermissionRequest& QueryPermissionRequest::operator=(const QueryPermissionRequest& other78) {
  queueName = other78.queueName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const QueryPermissionRequest& obj) {
  using apache::thrift::to_string;
  out << "QueryPermissionRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ")";
  return out;
}


QueryPermissionResponse::~QueryPermissionResponse() throw() {
}


void QueryPermissionResponse::__set_permission(const Permission::type val) {
  this->permission = val;
}

const char* QueryPermissionResponse::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t QueryPermissionResponse::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t QueryPermissionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_permission = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast79;
          xfer += iprot->readI32(ecast79);
          this->permission = (Permission::type)ecast79;
          isset_permission = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_permission)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QueryPermissionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("QueryPermissionResponse");

  xfer += oprot->writeFieldBegin("permission", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->permission);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(QueryPermissionResponse &a, QueryPermissionResponse &b) {
  using ::std::swap;
  swap(a.permission, b.permission);
}

QueryPermissionResponse::QueryPermissionResponse(const QueryPermissionResponse& other80) {
  permission = other80.permission;
}
QueryPermissionResponse& QueryPermissionResponse::operator=(const QueryPermissionResponse& other81) {
  permission = other81.permission;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const QueryPermissionResponse& obj) {
  using apache::thrift::to_string;
  out << "QueryPermissionResponse(";
  out << "permission=" << to_string(obj.permission);
  out << ")";
  return out;
}


QueryPermissionForIdRequest::~QueryPermissionForIdRequest() throw() {
}


void QueryPermissionForIdRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void QueryPermissionForIdRequest::__set_developerId(const std::string& val) {
  this->developerId = val;
}

const char* QueryPermissionForIdRequest::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t QueryPermissionForIdRequest::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t QueryPermissionForIdRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_developerId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->developerId);
          isset_developerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_developerId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QueryPermissionForIdRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("QueryPermissionForIdRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("developerId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->developerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(QueryPermissionForIdRequest &a, QueryPermissionForIdRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.developerId, b.developerId);
}

QueryPermissionForIdRequest::QueryPermissionForIdRequest(const QueryPermissionForIdRequest& other82) {
  queueName = other82.queueName;
  developerId = other82.developerId;
}
QueryPermissionForIdRequest& QueryPermissionForIdRequest::operator=(const QueryPermissionForIdRequest& other83) {
  queueName = other83.queueName;
  developerId = other83.developerId;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const QueryPermissionForIdRequest& obj) {
  using apache::thrift::to_string;
  out << "QueryPermissionForIdRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "developerId=" << to_string(obj.developerId);
  out << ")";
  return out;
}


QueryPermissionForIdResponse::~QueryPermissionForIdResponse() throw() {
}


void QueryPermissionForIdResponse::__set_permission(const Permission::type val) {
  this->permission = val;
}

const char* QueryPermissionForIdResponse::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t QueryPermissionForIdResponse::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t QueryPermissionForIdResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_permission = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast84;
          xfer += iprot->readI32(ecast84);
          this->permission = (Permission::type)ecast84;
          isset_permission = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_permission)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QueryPermissionForIdResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("QueryPermissionForIdResponse");

  xfer += oprot->writeFieldBegin("permission", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->permission);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(QueryPermissionForIdResponse &a, QueryPermissionForIdResponse &b) {
  using ::std::swap;
  swap(a.permission, b.permission);
}

QueryPermissionForIdResponse::QueryPermissionForIdResponse(const QueryPermissionForIdResponse& other85) {
  permission = other85.permission;
}
QueryPermissionForIdResponse& QueryPermissionForIdResponse::operator=(const QueryPermissionForIdResponse& other86) {
  permission = other86.permission;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const QueryPermissionForIdResponse& obj) {
  using apache::thrift::to_string;
  out << "QueryPermissionForIdResponse(";
  out << "permission=" << to_string(obj.permission);
  out << ")";
  return out;
}


ListPermissionsRequest::~ListPermissionsRequest() throw() {
}


void ListPermissionsRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

const char* ListPermissionsRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ListPermissionsRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ListPermissionsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ListPermissionsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ListPermissionsRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ListPermissionsRequest &a, ListPermissionsRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
}

ListPermissionsRequest::ListPermissionsRequest(const ListPermissionsRequest& other87) {
  queueName = other87.queueName;
}
ListPermissionsRequest& ListPermissionsRequest::operator=(const ListPermissionsRequest& other88) {
  queueName = other88.queueName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ListPermissionsRequest& obj) {
  using apache::thrift::to_string;
  out << "ListPermissionsRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ")";
  return out;
}


ListPermissionsResponse::~ListPermissionsResponse() throw() {
}


void ListPermissionsResponse::__set_permissionList(const std::map<std::string, Permission::type> & val) {
  this->permissionList = val;
}

const char* ListPermissionsResponse::ascii_fingerprint = "73D477D74DAA37CC52A78FF87985BD65";
const uint8_t ListPermissionsResponse::binary_fingerprint[16] = {0x73,0xD4,0x77,0xD7,0x4D,0xAA,0x37,0xCC,0x52,0xA7,0x8F,0xF8,0x79,0x85,0xBD,0x65};

uint32_t ListPermissionsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->permissionList.clear();
            uint32_t _size89;
            ::apache::thrift::protocol::TType _ktype90;
            ::apache::thrift::protocol::TType _vtype91;
            xfer += iprot->readMapBegin(_ktype90, _vtype91, _size89);
            uint32_t _i93;
            for (_i93 = 0; _i93 < _size89; ++_i93)
            {
              std::string _key94;
              xfer += iprot->readString(_key94);
              Permission::type& _val95 = this->permissionList[_key94];
              int32_t ecast96;
              xfer += iprot->readI32(ecast96);
              _val95 = (Permission::type)ecast96;
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.permissionList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListPermissionsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ListPermissionsResponse");

  xfer += oprot->writeFieldBegin("permissionList", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->permissionList.size()));
    std::map<std::string, Permission::type> ::const_iterator _iter97;
    for (_iter97 = this->permissionList.begin(); _iter97 != this->permissionList.end(); ++_iter97)
    {
      xfer += oprot->writeString(_iter97->first);
      xfer += oprot->writeI32((int32_t)_iter97->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ListPermissionsResponse &a, ListPermissionsResponse &b) {
  using ::std::swap;
  swap(a.permissionList, b.permissionList);
  swap(a.__isset, b.__isset);
}

ListPermissionsResponse::ListPermissionsResponse(const ListPermissionsResponse& other98) {
  permissionList = other98.permissionList;
  __isset = other98.__isset;
}
ListPermissionsResponse& ListPermissionsResponse::operator=(const ListPermissionsResponse& other99) {
  permissionList = other99.permissionList;
  __isset = other99.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ListPermissionsResponse& obj) {
  using apache::thrift::to_string;
  out << "ListPermissionsResponse(";
  out << "permissionList=" << to_string(obj.permissionList);
  out << ")";
  return out;
}


AttributesFilter::~AttributesFilter() throw() {
}


void AttributesFilter::__set_attributes(const std::map<std::string,  ::emq::message::MessageAttribute> & val) {
  this->attributes = val;
}

void AttributesFilter::__set_logicalOperator(const LogicalOperator::type val) {
  this->logicalOperator = val;
}

const char* AttributesFilter::ascii_fingerprint = "A13C9967A448848359F04C07CE766ADD";
const uint8_t AttributesFilter::binary_fingerprint[16] = {0xA1,0x3C,0x99,0x67,0xA4,0x48,0x84,0x83,0x59,0xF0,0x4C,0x07,0xCE,0x76,0x6A,0xDD};

uint32_t AttributesFilter::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_attributes = false;
  bool isset_logicalOperator = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->attributes.clear();
            uint32_t _size100;
            ::apache::thrift::protocol::TType _ktype101;
            ::apache::thrift::protocol::TType _vtype102;
            xfer += iprot->readMapBegin(_ktype101, _vtype102, _size100);
            uint32_t _i104;
            for (_i104 = 0; _i104 < _size100; ++_i104)
            {
              std::string _key105;
              xfer += iprot->readString(_key105);
               ::emq::message::MessageAttribute& _val106 = this->attributes[_key105];
              xfer += _val106.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast107;
          xfer += iprot->readI32(ecast107);
          this->logicalOperator = (LogicalOperator::type)ecast107;
          isset_logicalOperator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_attributes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_logicalOperator)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AttributesFilter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AttributesFilter");

  xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attributes.size()));
    std::map<std::string,  ::emq::message::MessageAttribute> ::const_iterator _iter108;
    for (_iter108 = this->attributes.begin(); _iter108 != this->attributes.end(); ++_iter108)
    {
      xfer += oprot->writeString(_iter108->first);
      xfer += _iter108->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logicalOperator", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->logicalOperator);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AttributesFilter &a, AttributesFilter &b) {
  using ::std::swap;
  swap(a.attributes, b.attributes);
  swap(a.logicalOperator, b.logicalOperator);
}

AttributesFilter::AttributesFilter(const AttributesFilter& other109) {
  attributes = other109.attributes;
  logicalOperator = other109.logicalOperator;
}
AttributesFilter& AttributesFilter::operator=(const AttributesFilter& other110) {
  attributes = other110.attributes;
  logicalOperator = other110.logicalOperator;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const AttributesFilter& obj) {
  using apache::thrift::to_string;
  out << "AttributesFilter(";
  out << "attributes=" << to_string(obj.attributes);
  out << ", " << "logicalOperator=" << to_string(obj.logicalOperator);
  out << ")";
  return out;
}


CreateTagRequest::~CreateTagRequest() throw() {
}


void CreateTagRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void CreateTagRequest::__set_tagName(const std::string& val) {
  this->tagName = val;
}

void CreateTagRequest::__set_startTimestamp(const int64_t val) {
  this->startTimestamp = val;
__isset.startTimestamp = true;
}

void CreateTagRequest::__set_readQPSQuota(const int64_t val) {
  this->readQPSQuota = val;
__isset.readQPSQuota = true;
}

void CreateTagRequest::__set_attributeName(const std::string& val) {
  this->attributeName = val;
__isset.attributeName = true;
}

void CreateTagRequest::__set_attributeValue(const  ::emq::message::MessageAttribute& val) {
  this->attributeValue = val;
__isset.attributeValue = true;
}

void CreateTagRequest::__set_userAttributes(const std::map<std::string, std::string> & val) {
  this->userAttributes = val;
__isset.userAttributes = true;
}

void CreateTagRequest::__set_attributesFilter(const AttributesFilter& val) {
  this->attributesFilter = val;
__isset.attributesFilter = true;
}

const char* CreateTagRequest::ascii_fingerprint = "CF26B7CF5932C065283F30EA1ABD3D8C";
const uint8_t CreateTagRequest::binary_fingerprint[16] = {0xCF,0x26,0xB7,0xCF,0x59,0x32,0xC0,0x65,0x28,0x3F,0x30,0xEA,0x1A,0xBD,0x3D,0x8C};

uint32_t CreateTagRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_tagName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          isset_tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTimestamp);
          this->__isset.startTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->readQPSQuota);
          this->__isset.readQPSQuota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->attributeName);
          this->__isset.attributeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attributeValue.read(iprot);
          this->__isset.attributeValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->userAttributes.clear();
            uint32_t _size111;
            ::apache::thrift::protocol::TType _ktype112;
            ::apache::thrift::protocol::TType _vtype113;
            xfer += iprot->readMapBegin(_ktype112, _vtype113, _size111);
            uint32_t _i115;
            for (_i115 = 0; _i115 < _size111; ++_i115)
            {
              std::string _key116;
              xfer += iprot->readString(_key116);
              std::string& _val117 = this->userAttributes[_key116];
              xfer += iprot->readString(_val117);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.userAttributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attributesFilter.read(iprot);
          this->__isset.attributesFilter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tagName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CreateTagRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateTagRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tagName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.startTimestamp) {
    xfer += oprot->writeFieldBegin("startTimestamp", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->startTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.readQPSQuota) {
    xfer += oprot->writeFieldBegin("readQPSQuota", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->readQPSQuota);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributeName) {
    xfer += oprot->writeFieldBegin("attributeName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->attributeName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributeValue) {
    xfer += oprot->writeFieldBegin("attributeValue", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->attributeValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userAttributes) {
    xfer += oprot->writeFieldBegin("userAttributes", ::apache::thrift::protocol::T_MAP, 7);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->userAttributes.size()));
      std::map<std::string, std::string> ::const_iterator _iter118;
      for (_iter118 = this->userAttributes.begin(); _iter118 != this->userAttributes.end(); ++_iter118)
      {
        xfer += oprot->writeString(_iter118->first);
        xfer += oprot->writeString(_iter118->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributesFilter) {
    xfer += oprot->writeFieldBegin("attributesFilter", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->attributesFilter.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateTagRequest &a, CreateTagRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.tagName, b.tagName);
  swap(a.startTimestamp, b.startTimestamp);
  swap(a.readQPSQuota, b.readQPSQuota);
  swap(a.attributeName, b.attributeName);
  swap(a.attributeValue, b.attributeValue);
  swap(a.userAttributes, b.userAttributes);
  swap(a.attributesFilter, b.attributesFilter);
  swap(a.__isset, b.__isset);
}

CreateTagRequest::CreateTagRequest(const CreateTagRequest& other119) {
  queueName = other119.queueName;
  tagName = other119.tagName;
  startTimestamp = other119.startTimestamp;
  readQPSQuota = other119.readQPSQuota;
  attributeName = other119.attributeName;
  attributeValue = other119.attributeValue;
  userAttributes = other119.userAttributes;
  attributesFilter = other119.attributesFilter;
  __isset = other119.__isset;
}
CreateTagRequest& CreateTagRequest::operator=(const CreateTagRequest& other120) {
  queueName = other120.queueName;
  tagName = other120.tagName;
  startTimestamp = other120.startTimestamp;
  readQPSQuota = other120.readQPSQuota;
  attributeName = other120.attributeName;
  attributeValue = other120.attributeValue;
  userAttributes = other120.userAttributes;
  attributesFilter = other120.attributesFilter;
  __isset = other120.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateTagRequest& obj) {
  using apache::thrift::to_string;
  out << "CreateTagRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "tagName=" << to_string(obj.tagName);
  out << ", " << "startTimestamp="; (obj.__isset.startTimestamp ? (out << to_string(obj.startTimestamp)) : (out << "<null>"));
  out << ", " << "readQPSQuota="; (obj.__isset.readQPSQuota ? (out << to_string(obj.readQPSQuota)) : (out << "<null>"));
  out << ", " << "attributeName="; (obj.__isset.attributeName ? (out << to_string(obj.attributeName)) : (out << "<null>"));
  out << ", " << "attributeValue="; (obj.__isset.attributeValue ? (out << to_string(obj.attributeValue)) : (out << "<null>"));
  out << ", " << "userAttributes="; (obj.__isset.userAttributes ? (out << to_string(obj.userAttributes)) : (out << "<null>"));
  out << ", " << "attributesFilter="; (obj.__isset.attributesFilter ? (out << to_string(obj.attributesFilter)) : (out << "<null>"));
  out << ")";
  return out;
}


CreateTagResponse::~CreateTagResponse() throw() {
}


void CreateTagResponse::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void CreateTagResponse::__set_tagName(const std::string& val) {
  this->tagName = val;
}

void CreateTagResponse::__set_startTimestamp(const int64_t val) {
  this->startTimestamp = val;
}

void CreateTagResponse::__set_readQPSQuota(const int64_t val) {
  this->readQPSQuota = val;
__isset.readQPSQuota = true;
}

const char* CreateTagResponse::ascii_fingerprint = "65193E50F85A313DBF87744ADE3A1FBA";
const uint8_t CreateTagResponse::binary_fingerprint[16] = {0x65,0x19,0x3E,0x50,0xF8,0x5A,0x31,0x3D,0xBF,0x87,0x74,0x4A,0xDE,0x3A,0x1F,0xBA};

uint32_t CreateTagResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_tagName = false;
  bool isset_startTimestamp = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          isset_tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTimestamp);
          isset_startTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->readQPSQuota);
          this->__isset.readQPSQuota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tagName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_startTimestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CreateTagResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CreateTagResponse");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tagName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTimestamp", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->startTimestamp);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.readQPSQuota) {
    xfer += oprot->writeFieldBegin("readQPSQuota", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->readQPSQuota);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CreateTagResponse &a, CreateTagResponse &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.tagName, b.tagName);
  swap(a.startTimestamp, b.startTimestamp);
  swap(a.readQPSQuota, b.readQPSQuota);
  swap(a.__isset, b.__isset);
}

CreateTagResponse::CreateTagResponse(const CreateTagResponse& other121) {
  queueName = other121.queueName;
  tagName = other121.tagName;
  startTimestamp = other121.startTimestamp;
  readQPSQuota = other121.readQPSQuota;
  __isset = other121.__isset;
}
CreateTagResponse& CreateTagResponse::operator=(const CreateTagResponse& other122) {
  queueName = other122.queueName;
  tagName = other122.tagName;
  startTimestamp = other122.startTimestamp;
  readQPSQuota = other122.readQPSQuota;
  __isset = other122.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CreateTagResponse& obj) {
  using apache::thrift::to_string;
  out << "CreateTagResponse(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "tagName=" << to_string(obj.tagName);
  out << ", " << "startTimestamp=" << to_string(obj.startTimestamp);
  out << ", " << "readQPSQuota="; (obj.__isset.readQPSQuota ? (out << to_string(obj.readQPSQuota)) : (out << "<null>"));
  out << ")";
  return out;
}


DeleteTagRequest::~DeleteTagRequest() throw() {
}


void DeleteTagRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void DeleteTagRequest::__set_tagName(const std::string& val) {
  this->tagName = val;
}

const char* DeleteTagRequest::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t DeleteTagRequest::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t DeleteTagRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_tagName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          isset_tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tagName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeleteTagRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeleteTagRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tagName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeleteTagRequest &a, DeleteTagRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.tagName, b.tagName);
}

DeleteTagRequest::DeleteTagRequest(const DeleteTagRequest& other123) {
  queueName = other123.queueName;
  tagName = other123.tagName;
}
DeleteTagRequest& DeleteTagRequest::operator=(const DeleteTagRequest& other124) {
  queueName = other124.queueName;
  tagName = other124.tagName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeleteTagRequest& obj) {
  using apache::thrift::to_string;
  out << "DeleteTagRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "tagName=" << to_string(obj.tagName);
  out << ")";
  return out;
}


GetTagInfoRequest::~GetTagInfoRequest() throw() {
}


void GetTagInfoRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void GetTagInfoRequest::__set_tagName(const std::string& val) {
  this->tagName = val;
__isset.tagName = true;
}

const char* GetTagInfoRequest::ascii_fingerprint = "5B708A954C550ECA9C1A49D3C5CAFAB9";
const uint8_t GetTagInfoRequest::binary_fingerprint[16] = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

uint32_t GetTagInfoRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          this->__isset.tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetTagInfoRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetTagInfoRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tagName) {
    xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->tagName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetTagInfoRequest &a, GetTagInfoRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.tagName, b.tagName);
  swap(a.__isset, b.__isset);
}

GetTagInfoRequest::GetTagInfoRequest(const GetTagInfoRequest& other125) {
  queueName = other125.queueName;
  tagName = other125.tagName;
  __isset = other125.__isset;
}
GetTagInfoRequest& GetTagInfoRequest::operator=(const GetTagInfoRequest& other126) {
  queueName = other126.queueName;
  tagName = other126.tagName;
  __isset = other126.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetTagInfoRequest& obj) {
  using apache::thrift::to_string;
  out << "GetTagInfoRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "tagName="; (obj.__isset.tagName ? (out << to_string(obj.tagName)) : (out << "<null>"));
  out << ")";
  return out;
}


GetTagInfoResponse::~GetTagInfoResponse() throw() {
}


void GetTagInfoResponse::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void GetTagInfoResponse::__set_tagName(const std::string& val) {
  this->tagName = val;
__isset.tagName = true;
}

void GetTagInfoResponse::__set_tagState(const QueueState& val) {
  this->tagState = val;
}

void GetTagInfoResponse::__set_startTimestamp(const int64_t val) {
  this->startTimestamp = val;
}

void GetTagInfoResponse::__set_readQPSQuota(const int64_t val) {
  this->readQPSQuota = val;
__isset.readQPSQuota = true;
}

void GetTagInfoResponse::__set_attributeName(const std::string& val) {
  this->attributeName = val;
__isset.attributeName = true;
}

void GetTagInfoResponse::__set_attributeValue(const  ::emq::message::MessageAttribute& val) {
  this->attributeValue = val;
__isset.attributeValue = true;
}

void GetTagInfoResponse::__set_userAttributes(const std::map<std::string, std::string> & val) {
  this->userAttributes = val;
__isset.userAttributes = true;
}

void GetTagInfoResponse::__set_attributesFilter(const AttributesFilter& val) {
  this->attributesFilter = val;
__isset.attributesFilter = true;
}

const char* GetTagInfoResponse::ascii_fingerprint = "29B66DD1039353508F488DFA5F153C35";
const uint8_t GetTagInfoResponse::binary_fingerprint[16] = {0x29,0xB6,0x6D,0xD1,0x03,0x93,0x53,0x50,0x8F,0x48,0x8D,0xFA,0x5F,0x15,0x3C,0x35};

uint32_t GetTagInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_tagState = false;
  bool isset_startTimestamp = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          this->__isset.tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tagState.read(iprot);
          isset_tagState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTimestamp);
          isset_startTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->readQPSQuota);
          this->__isset.readQPSQuota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->attributeName);
          this->__isset.attributeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attributeValue.read(iprot);
          this->__isset.attributeValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->userAttributes.clear();
            uint32_t _size127;
            ::apache::thrift::protocol::TType _ktype128;
            ::apache::thrift::protocol::TType _vtype129;
            xfer += iprot->readMapBegin(_ktype128, _vtype129, _size127);
            uint32_t _i131;
            for (_i131 = 0; _i131 < _size127; ++_i131)
            {
              std::string _key132;
              xfer += iprot->readString(_key132);
              std::string& _val133 = this->userAttributes[_key132];
              xfer += iprot->readString(_val133);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.userAttributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attributesFilter.read(iprot);
          this->__isset.attributesFilter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tagState)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_startTimestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetTagInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetTagInfoResponse");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tagName) {
    xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->tagName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("tagState", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->tagState.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTimestamp", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->startTimestamp);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.readQPSQuota) {
    xfer += oprot->writeFieldBegin("readQPSQuota", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->readQPSQuota);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributeName) {
    xfer += oprot->writeFieldBegin("attributeName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->attributeName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributeValue) {
    xfer += oprot->writeFieldBegin("attributeValue", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->attributeValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userAttributes) {
    xfer += oprot->writeFieldBegin("userAttributes", ::apache::thrift::protocol::T_MAP, 8);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->userAttributes.size()));
      std::map<std::string, std::string> ::const_iterator _iter134;
      for (_iter134 = this->userAttributes.begin(); _iter134 != this->userAttributes.end(); ++_iter134)
      {
        xfer += oprot->writeString(_iter134->first);
        xfer += oprot->writeString(_iter134->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributesFilter) {
    xfer += oprot->writeFieldBegin("attributesFilter", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->attributesFilter.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetTagInfoResponse &a, GetTagInfoResponse &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.tagName, b.tagName);
  swap(a.tagState, b.tagState);
  swap(a.startTimestamp, b.startTimestamp);
  swap(a.readQPSQuota, b.readQPSQuota);
  swap(a.attributeName, b.attributeName);
  swap(a.attributeValue, b.attributeValue);
  swap(a.userAttributes, b.userAttributes);
  swap(a.attributesFilter, b.attributesFilter);
  swap(a.__isset, b.__isset);
}

GetTagInfoResponse::GetTagInfoResponse(const GetTagInfoResponse& other135) {
  queueName = other135.queueName;
  tagName = other135.tagName;
  tagState = other135.tagState;
  startTimestamp = other135.startTimestamp;
  readQPSQuota = other135.readQPSQuota;
  attributeName = other135.attributeName;
  attributeValue = other135.attributeValue;
  userAttributes = other135.userAttributes;
  attributesFilter = other135.attributesFilter;
  __isset = other135.__isset;
}
GetTagInfoResponse& GetTagInfoResponse::operator=(const GetTagInfoResponse& other136) {
  queueName = other136.queueName;
  tagName = other136.tagName;
  tagState = other136.tagState;
  startTimestamp = other136.startTimestamp;
  readQPSQuota = other136.readQPSQuota;
  attributeName = other136.attributeName;
  attributeValue = other136.attributeValue;
  userAttributes = other136.userAttributes;
  attributesFilter = other136.attributesFilter;
  __isset = other136.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetTagInfoResponse& obj) {
  using apache::thrift::to_string;
  out << "GetTagInfoResponse(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "tagName="; (obj.__isset.tagName ? (out << to_string(obj.tagName)) : (out << "<null>"));
  out << ", " << "tagState=" << to_string(obj.tagState);
  out << ", " << "startTimestamp=" << to_string(obj.startTimestamp);
  out << ", " << "readQPSQuota="; (obj.__isset.readQPSQuota ? (out << to_string(obj.readQPSQuota)) : (out << "<null>"));
  out << ", " << "attributeName="; (obj.__isset.attributeName ? (out << to_string(obj.attributeName)) : (out << "<null>"));
  out << ", " << "attributeValue="; (obj.__isset.attributeValue ? (out << to_string(obj.attributeValue)) : (out << "<null>"));
  out << ", " << "userAttributes="; (obj.__isset.userAttributes ? (out << to_string(obj.userAttributes)) : (out << "<null>"));
  out << ", " << "attributesFilter="; (obj.__isset.attributesFilter ? (out << to_string(obj.attributesFilter)) : (out << "<null>"));
  out << ")";
  return out;
}


ListTagRequest::~ListTagRequest() throw() {
}


void ListTagRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

const char* ListTagRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ListTagRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ListTagRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ListTagRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ListTagRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ListTagRequest &a, ListTagRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
}

ListTagRequest::ListTagRequest(const ListTagRequest& other137) {
  queueName = other137.queueName;
}
ListTagRequest& ListTagRequest::operator=(const ListTagRequest& other138) {
  queueName = other138.queueName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ListTagRequest& obj) {
  using apache::thrift::to_string;
  out << "ListTagRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ")";
  return out;
}


ListTagResponse::~ListTagResponse() throw() {
}


void ListTagResponse::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void ListTagResponse::__set_tagName(const std::vector<std::string> & val) {
  this->tagName = val;
}

const char* ListTagResponse::ascii_fingerprint = "25702B8D5E28AA39160F267DABBC8446";
const uint8_t ListTagResponse::binary_fingerprint[16] = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

uint32_t ListTagResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_tagName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagName.clear();
            uint32_t _size139;
            ::apache::thrift::protocol::TType _etype142;
            xfer += iprot->readListBegin(_etype142, _size139);
            this->tagName.resize(_size139);
            uint32_t _i143;
            for (_i143 = 0; _i143 < _size139; ++_i143)
            {
              xfer += iprot->readString(this->tagName[_i143]);
            }
            xfer += iprot->readListEnd();
          }
          isset_tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tagName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ListTagResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ListTagResponse");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tagName.size()));
    std::vector<std::string> ::const_iterator _iter144;
    for (_iter144 = this->tagName.begin(); _iter144 != this->tagName.end(); ++_iter144)
    {
      xfer += oprot->writeString((*_iter144));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ListTagResponse &a, ListTagResponse &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.tagName, b.tagName);
}

ListTagResponse::ListTagResponse(const ListTagResponse& other145) {
  queueName = other145.queueName;
  tagName = other145.tagName;
}
ListTagResponse& ListTagResponse::operator=(const ListTagResponse& other146) {
  queueName = other146.queueName;
  tagName = other146.tagName;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ListTagResponse& obj) {
  using apache::thrift::to_string;
  out << "ListTagResponse(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "tagName=" << to_string(obj.tagName);
  out << ")";
  return out;
}


QueryMetricRequest::~QueryMetricRequest() throw() {
}


void QueryMetricRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
__isset.queueName = true;
}

void QueryMetricRequest::__set_startTime(const int64_t val) {
  this->startTime = val;
__isset.startTime = true;
}

void QueryMetricRequest::__set_endTime(const int64_t val) {
  this->endTime = val;
__isset.endTime = true;
}

void QueryMetricRequest::__set_metrics(const std::string& val) {
  this->metrics = val;
__isset.metrics = true;
}

void QueryMetricRequest::__set_tags(const std::map<std::string, std::string> & val) {
  this->tags = val;
__isset.tags = true;
}

void QueryMetricRequest::__set_aggregator(const std::string& val) {
  this->aggregator = val;
__isset.aggregator = true;
}

void QueryMetricRequest::__set_downsampleAggregator(const std::string& val) {
  this->downsampleAggregator = val;
__isset.downsampleAggregator = true;
}

void QueryMetricRequest::__set_downsampleInterval(const int32_t val) {
  this->downsampleInterval = val;
__isset.downsampleInterval = true;
}

void QueryMetricRequest::__set_downsampleTimeUnit(const std::string& val) {
  this->downsampleTimeUnit = val;
__isset.downsampleTimeUnit = true;
}

void QueryMetricRequest::__set_calRate(const bool val) {
  this->calRate = val;
__isset.calRate = true;
}

void QueryMetricRequest::__set_tagName(const std::string& val) {
  this->tagName = val;
__isset.tagName = true;
}

const char* QueryMetricRequest::ascii_fingerprint = "B3A5A30E20C33B08F68E0C6DDCDDA594";
const uint8_t QueryMetricRequest::binary_fingerprint[16] = {0xB3,0xA5,0xA3,0x0E,0x20,0xC3,0x3B,0x08,0xF6,0x8E,0x0C,0x6D,0xDC,0xDD,0xA5,0x94};

uint32_t QueryMetricRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          this->__isset.queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->metrics);
          this->__isset.metrics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->tags.clear();
            uint32_t _size147;
            ::apache::thrift::protocol::TType _ktype148;
            ::apache::thrift::protocol::TType _vtype149;
            xfer += iprot->readMapBegin(_ktype148, _vtype149, _size147);
            uint32_t _i151;
            for (_i151 = 0; _i151 < _size147; ++_i151)
            {
              std::string _key152;
              xfer += iprot->readString(_key152);
              std::string& _val153 = this->tags[_key152];
              xfer += iprot->readString(_val153);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->aggregator);
          this->__isset.aggregator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->downsampleAggregator);
          this->__isset.downsampleAggregator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->downsampleInterval);
          this->__isset.downsampleInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->downsampleTimeUnit);
          this->__isset.downsampleTimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->calRate);
          this->__isset.calRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          this->__isset.tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryMetricRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("QueryMetricRequest");

  if (this->__isset.queueName) {
    xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->queueName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startTime) {
    xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->startTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.endTime) {
    xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->endTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.metrics) {
    xfer += oprot->writeFieldBegin("metrics", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->metrics);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tags) {
    xfer += oprot->writeFieldBegin("tags", ::apache::thrift::protocol::T_MAP, 5);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tags.size()));
      std::map<std::string, std::string> ::const_iterator _iter154;
      for (_iter154 = this->tags.begin(); _iter154 != this->tags.end(); ++_iter154)
      {
        xfer += oprot->writeString(_iter154->first);
        xfer += oprot->writeString(_iter154->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.aggregator) {
    xfer += oprot->writeFieldBegin("aggregator", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->aggregator);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.downsampleAggregator) {
    xfer += oprot->writeFieldBegin("downsampleAggregator", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->downsampleAggregator);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.downsampleInterval) {
    xfer += oprot->writeFieldBegin("downsampleInterval", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->downsampleInterval);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.downsampleTimeUnit) {
    xfer += oprot->writeFieldBegin("downsampleTimeUnit", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->downsampleTimeUnit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.calRate) {
    xfer += oprot->writeFieldBegin("calRate", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->calRate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tagName) {
    xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->tagName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(QueryMetricRequest &a, QueryMetricRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.startTime, b.startTime);
  swap(a.endTime, b.endTime);
  swap(a.metrics, b.metrics);
  swap(a.tags, b.tags);
  swap(a.aggregator, b.aggregator);
  swap(a.downsampleAggregator, b.downsampleAggregator);
  swap(a.downsampleInterval, b.downsampleInterval);
  swap(a.downsampleTimeUnit, b.downsampleTimeUnit);
  swap(a.calRate, b.calRate);
  swap(a.tagName, b.tagName);
  swap(a.__isset, b.__isset);
}

QueryMetricRequest::QueryMetricRequest(const QueryMetricRequest& other155) {
  queueName = other155.queueName;
  startTime = other155.startTime;
  endTime = other155.endTime;
  metrics = other155.metrics;
  tags = other155.tags;
  aggregator = other155.aggregator;
  downsampleAggregator = other155.downsampleAggregator;
  downsampleInterval = other155.downsampleInterval;
  downsampleTimeUnit = other155.downsampleTimeUnit;
  calRate = other155.calRate;
  tagName = other155.tagName;
  __isset = other155.__isset;
}
QueryMetricRequest& QueryMetricRequest::operator=(const QueryMetricRequest& other156) {
  queueName = other156.queueName;
  startTime = other156.startTime;
  endTime = other156.endTime;
  metrics = other156.metrics;
  tags = other156.tags;
  aggregator = other156.aggregator;
  downsampleAggregator = other156.downsampleAggregator;
  downsampleInterval = other156.downsampleInterval;
  downsampleTimeUnit = other156.downsampleTimeUnit;
  calRate = other156.calRate;
  tagName = other156.tagName;
  __isset = other156.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const QueryMetricRequest& obj) {
  using apache::thrift::to_string;
  out << "QueryMetricRequest(";
  out << "queueName="; (obj.__isset.queueName ? (out << to_string(obj.queueName)) : (out << "<null>"));
  out << ", " << "startTime="; (obj.__isset.startTime ? (out << to_string(obj.startTime)) : (out << "<null>"));
  out << ", " << "endTime="; (obj.__isset.endTime ? (out << to_string(obj.endTime)) : (out << "<null>"));
  out << ", " << "metrics="; (obj.__isset.metrics ? (out << to_string(obj.metrics)) : (out << "<null>"));
  out << ", " << "tags="; (obj.__isset.tags ? (out << to_string(obj.tags)) : (out << "<null>"));
  out << ", " << "aggregator="; (obj.__isset.aggregator ? (out << to_string(obj.aggregator)) : (out << "<null>"));
  out << ", " << "downsampleAggregator="; (obj.__isset.downsampleAggregator ? (out << to_string(obj.downsampleAggregator)) : (out << "<null>"));
  out << ", " << "downsampleInterval="; (obj.__isset.downsampleInterval ? (out << to_string(obj.downsampleInterval)) : (out << "<null>"));
  out << ", " << "downsampleTimeUnit="; (obj.__isset.downsampleTimeUnit ? (out << to_string(obj.downsampleTimeUnit)) : (out << "<null>"));
  out << ", " << "calRate="; (obj.__isset.calRate ? (out << to_string(obj.calRate)) : (out << "<null>"));
  out << ", " << "tagName="; (obj.__isset.tagName ? (out << to_string(obj.tagName)) : (out << "<null>"));
  out << ")";
  return out;
}


TimeSeriesData::~TimeSeriesData() throw() {
}


void TimeSeriesData::__set_metric(const std::string& val) {
  this->metric = val;
__isset.metric = true;
}

void TimeSeriesData::__set_tags(const std::map<std::string, std::string> & val) {
  this->tags = val;
__isset.tags = true;
}

void TimeSeriesData::__set_data(const std::map<int64_t, double> & val) {
  this->data = val;
__isset.data = true;
}

const char* TimeSeriesData::ascii_fingerprint = "4B2F41264B8DD5DA4E9A150854D611F0";
const uint8_t TimeSeriesData::binary_fingerprint[16] = {0x4B,0x2F,0x41,0x26,0x4B,0x8D,0xD5,0xDA,0x4E,0x9A,0x15,0x08,0x54,0xD6,0x11,0xF0};

uint32_t TimeSeriesData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->metric);
          this->__isset.metric = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->tags.clear();
            uint32_t _size157;
            ::apache::thrift::protocol::TType _ktype158;
            ::apache::thrift::protocol::TType _vtype159;
            xfer += iprot->readMapBegin(_ktype158, _vtype159, _size157);
            uint32_t _i161;
            for (_i161 = 0; _i161 < _size157; ++_i161)
            {
              std::string _key162;
              xfer += iprot->readString(_key162);
              std::string& _val163 = this->tags[_key162];
              xfer += iprot->readString(_val163);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->data.clear();
            uint32_t _size164;
            ::apache::thrift::protocol::TType _ktype165;
            ::apache::thrift::protocol::TType _vtype166;
            xfer += iprot->readMapBegin(_ktype165, _vtype166, _size164);
            uint32_t _i168;
            for (_i168 = 0; _i168 < _size164; ++_i168)
            {
              int64_t _key169;
              xfer += iprot->readI64(_key169);
              double& _val170 = this->data[_key169];
              xfer += iprot->readDouble(_val170);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimeSeriesData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TimeSeriesData");

  if (this->__isset.metric) {
    xfer += oprot->writeFieldBegin("metric", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->metric);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tags) {
    xfer += oprot->writeFieldBegin("tags", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tags.size()));
      std::map<std::string, std::string> ::const_iterator _iter171;
      for (_iter171 = this->tags.begin(); _iter171 != this->tags.end(); ++_iter171)
      {
        xfer += oprot->writeString(_iter171->first);
        xfer += oprot->writeString(_iter171->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->data.size()));
      std::map<int64_t, double> ::const_iterator _iter172;
      for (_iter172 = this->data.begin(); _iter172 != this->data.end(); ++_iter172)
      {
        xfer += oprot->writeI64(_iter172->first);
        xfer += oprot->writeDouble(_iter172->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TimeSeriesData &a, TimeSeriesData &b) {
  using ::std::swap;
  swap(a.metric, b.metric);
  swap(a.tags, b.tags);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

TimeSeriesData::TimeSeriesData(const TimeSeriesData& other173) {
  metric = other173.metric;
  tags = other173.tags;
  data = other173.data;
  __isset = other173.__isset;
}
TimeSeriesData& TimeSeriesData::operator=(const TimeSeriesData& other174) {
  metric = other174.metric;
  tags = other174.tags;
  data = other174.data;
  __isset = other174.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TimeSeriesData& obj) {
  using apache::thrift::to_string;
  out << "TimeSeriesData(";
  out << "metric="; (obj.__isset.metric ? (out << to_string(obj.metric)) : (out << "<null>"));
  out << ", " << "tags="; (obj.__isset.tags ? (out << to_string(obj.tags)) : (out << "<null>"));
  out << ", " << "data="; (obj.__isset.data ? (out << to_string(obj.data)) : (out << "<null>"));
  out << ")";
  return out;
}


VerifyEMQAdminResponse::~VerifyEMQAdminResponse() throw() {
}


void VerifyEMQAdminResponse::__set_prefix(const std::string& val) {
  this->prefix = val;
}

const char* VerifyEMQAdminResponse::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t VerifyEMQAdminResponse::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t VerifyEMQAdminResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_prefix = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->prefix);
          isset_prefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_prefix)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t VerifyEMQAdminResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VerifyEMQAdminResponse");

  xfer += oprot->writeFieldBegin("prefix", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->prefix);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VerifyEMQAdminResponse &a, VerifyEMQAdminResponse &b) {
  using ::std::swap;
  swap(a.prefix, b.prefix);
}

VerifyEMQAdminResponse::VerifyEMQAdminResponse(const VerifyEMQAdminResponse& other175) {
  prefix = other175.prefix;
}
VerifyEMQAdminResponse& VerifyEMQAdminResponse::operator=(const VerifyEMQAdminResponse& other176) {
  prefix = other176.prefix;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VerifyEMQAdminResponse& obj) {
  using apache::thrift::to_string;
  out << "VerifyEMQAdminResponse(";
  out << "prefix=" << to_string(obj.prefix);
  out << ")";
  return out;
}


VerifyEMQAdminRoleRequest::~VerifyEMQAdminRoleRequest() throw() {
}


void VerifyEMQAdminRoleRequest::__set_granteeId(const std::string& val) {
  this->granteeId = val;
__isset.granteeId = true;
}

const char* VerifyEMQAdminRoleRequest::ascii_fingerprint = "66E694018C17E5B65A59AE8F55CCA3CD";
const uint8_t VerifyEMQAdminRoleRequest::binary_fingerprint[16] = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

uint32_t VerifyEMQAdminRoleRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->granteeId);
          this->__isset.granteeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VerifyEMQAdminRoleRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VerifyEMQAdminRoleRequest");

  if (this->__isset.granteeId) {
    xfer += oprot->writeFieldBegin("granteeId", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->granteeId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VerifyEMQAdminRoleRequest &a, VerifyEMQAdminRoleRequest &b) {
  using ::std::swap;
  swap(a.granteeId, b.granteeId);
  swap(a.__isset, b.__isset);
}

VerifyEMQAdminRoleRequest::VerifyEMQAdminRoleRequest(const VerifyEMQAdminRoleRequest& other177) {
  granteeId = other177.granteeId;
  __isset = other177.__isset;
}
VerifyEMQAdminRoleRequest& VerifyEMQAdminRoleRequest::operator=(const VerifyEMQAdminRoleRequest& other178) {
  granteeId = other178.granteeId;
  __isset = other178.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VerifyEMQAdminRoleRequest& obj) {
  using apache::thrift::to_string;
  out << "VerifyEMQAdminRoleRequest(";
  out << "granteeId="; (obj.__isset.granteeId ? (out << to_string(obj.granteeId)) : (out << "<null>"));
  out << ")";
  return out;
}


VerifyEMQAdminRoleResponse::~VerifyEMQAdminRoleResponse() throw() {
}


void VerifyEMQAdminRoleResponse::__set_isAdminRole(const bool val) {
  this->isAdminRole = val;
}

const char* VerifyEMQAdminRoleResponse::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t VerifyEMQAdminRoleResponse::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t VerifyEMQAdminRoleResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_isAdminRole = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isAdminRole);
          isset_isAdminRole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_isAdminRole)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t VerifyEMQAdminRoleResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("VerifyEMQAdminRoleResponse");

  xfer += oprot->writeFieldBegin("isAdminRole", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->isAdminRole);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(VerifyEMQAdminRoleResponse &a, VerifyEMQAdminRoleResponse &b) {
  using ::std::swap;
  swap(a.isAdminRole, b.isAdminRole);
}

VerifyEMQAdminRoleResponse::VerifyEMQAdminRoleResponse(const VerifyEMQAdminRoleResponse& other179) {
  isAdminRole = other179.isAdminRole;
}
VerifyEMQAdminRoleResponse& VerifyEMQAdminRoleResponse::operator=(const VerifyEMQAdminRoleResponse& other180) {
  isAdminRole = other180.isAdminRole;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const VerifyEMQAdminRoleResponse& obj) {
  using apache::thrift::to_string;
  out << "VerifyEMQAdminRoleResponse(";
  out << "isAdminRole=" << to_string(obj.isAdminRole);
  out << ")";
  return out;
}


QueueTag::~QueueTag() throw() {
}


void QueueTag::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void QueueTag::__set_tagName(const std::string& val) {
  this->tagName = val;
}

void QueueTag::__set_tagId(const int32_t val) {
  this->tagId = val;
}

void QueueTag::__set_startTimestamp(const int64_t val) {
  this->startTimestamp = val;
__isset.startTimestamp = true;
}

void QueueTag::__set_createTimestamp(const int64_t val) {
  this->createTimestamp = val;
__isset.createTimestamp = true;
}

void QueueTag::__set_attributeName(const std::string& val) {
  this->attributeName = val;
__isset.attributeName = true;
}

void QueueTag::__set_attributeValue(const  ::emq::message::MessageAttribute& val) {
  this->attributeValue = val;
__isset.attributeValue = true;
}

void QueueTag::__set_userAttributes(const std::map<std::string, std::string> & val) {
  this->userAttributes = val;
__isset.userAttributes = true;
}

const char* QueueTag::ascii_fingerprint = "EA9615B148D62A0CBF8725733B801C40";
const uint8_t QueueTag::binary_fingerprint[16] = {0xEA,0x96,0x15,0xB1,0x48,0xD6,0x2A,0x0C,0xBF,0x87,0x25,0x73,0x3B,0x80,0x1C,0x40};

uint32_t QueueTag::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_tagName = false;
  bool isset_tagId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          isset_tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tagId);
          isset_tagId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTimestamp);
          this->__isset.startTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTimestamp);
          this->__isset.createTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->attributeName);
          this->__isset.attributeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attributeValue.read(iprot);
          this->__isset.attributeValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->userAttributes.clear();
            uint32_t _size181;
            ::apache::thrift::protocol::TType _ktype182;
            ::apache::thrift::protocol::TType _vtype183;
            xfer += iprot->readMapBegin(_ktype182, _vtype183, _size181);
            uint32_t _i185;
            for (_i185 = 0; _i185 < _size181; ++_i185)
            {
              std::string _key186;
              xfer += iprot->readString(_key186);
              std::string& _val187 = this->userAttributes[_key186];
              xfer += iprot->readString(_val187);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.userAttributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tagName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tagId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QueueTag::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("QueueTag");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tagName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->tagId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.startTimestamp) {
    xfer += oprot->writeFieldBegin("startTimestamp", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->startTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTimestamp) {
    xfer += oprot->writeFieldBegin("createTimestamp", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->createTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributeName) {
    xfer += oprot->writeFieldBegin("attributeName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->attributeName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributeValue) {
    xfer += oprot->writeFieldBegin("attributeValue", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->attributeValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userAttributes) {
    xfer += oprot->writeFieldBegin("userAttributes", ::apache::thrift::protocol::T_MAP, 8);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->userAttributes.size()));
      std::map<std::string, std::string> ::const_iterator _iter188;
      for (_iter188 = this->userAttributes.begin(); _iter188 != this->userAttributes.end(); ++_iter188)
      {
        xfer += oprot->writeString(_iter188->first);
        xfer += oprot->writeString(_iter188->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(QueueTag &a, QueueTag &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.tagName, b.tagName);
  swap(a.tagId, b.tagId);
  swap(a.startTimestamp, b.startTimestamp);
  swap(a.createTimestamp, b.createTimestamp);
  swap(a.attributeName, b.attributeName);
  swap(a.attributeValue, b.attributeValue);
  swap(a.userAttributes, b.userAttributes);
  swap(a.__isset, b.__isset);
}

QueueTag::QueueTag(const QueueTag& other189) {
  queueName = other189.queueName;
  tagName = other189.tagName;
  tagId = other189.tagId;
  startTimestamp = other189.startTimestamp;
  createTimestamp = other189.createTimestamp;
  attributeName = other189.attributeName;
  attributeValue = other189.attributeValue;
  userAttributes = other189.userAttributes;
  __isset = other189.__isset;
}
QueueTag& QueueTag::operator=(const QueueTag& other190) {
  queueName = other190.queueName;
  tagName = other190.tagName;
  tagId = other190.tagId;
  startTimestamp = other190.startTimestamp;
  createTimestamp = other190.createTimestamp;
  attributeName = other190.attributeName;
  attributeValue = other190.attributeValue;
  userAttributes = other190.userAttributes;
  __isset = other190.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const QueueTag& obj) {
  using apache::thrift::to_string;
  out << "QueueTag(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "tagName=" << to_string(obj.tagName);
  out << ", " << "tagId=" << to_string(obj.tagId);
  out << ", " << "startTimestamp="; (obj.__isset.startTimestamp ? (out << to_string(obj.startTimestamp)) : (out << "<null>"));
  out << ", " << "createTimestamp="; (obj.__isset.createTimestamp ? (out << to_string(obj.createTimestamp)) : (out << "<null>"));
  out << ", " << "attributeName="; (obj.__isset.attributeName ? (out << to_string(obj.attributeName)) : (out << "<null>"));
  out << ", " << "attributeValue="; (obj.__isset.attributeValue ? (out << to_string(obj.attributeValue)) : (out << "<null>"));
  out << ", " << "userAttributes="; (obj.__isset.userAttributes ? (out << to_string(obj.userAttributes)) : (out << "<null>"));
  out << ")";
  return out;
}


QueueMeta::~QueueMeta() throw() {
}


void QueueMeta::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void QueueMeta::__set_queueAttribute(const QueueAttribute& val) {
  this->queueAttribute = val;
}

void QueueMeta::__set_queueQuota(const QueueQuota& val) {
  this->queueQuota = val;
__isset.queueQuota = true;
}

void QueueMeta::__set_enablePriority(const bool val) {
  this->enablePriority = val;
__isset.enablePriority = true;
}

void QueueMeta::__set_topicQueue(const bool val) {
  this->topicQueue = val;
__isset.topicQueue = true;
}

void QueueMeta::__set_deleteMessageForce(const bool val) {
  this->deleteMessageForce = val;
__isset.deleteMessageForce = true;
}

void QueueMeta::__set_defaultTagName(const std::string& val) {
  this->defaultTagName = val;
__isset.defaultTagName = true;
}

void QueueMeta::__set_permissionList(const std::map<std::string, Permission::type> & val) {
  this->permissionList = val;
__isset.permissionList = true;
}

void QueueMeta::__set_redrivePolicy(const RedrivePolicy& val) {
  this->redrivePolicy = val;
__isset.redrivePolicy = true;
}

void QueueMeta::__set_sourceQueues(const std::vector<std::string> & val) {
  this->sourceQueues = val;
__isset.sourceQueues = true;
}

void QueueMeta::__set_createTimestamp(const int64_t val) {
  this->createTimestamp = val;
__isset.createTimestamp = true;
}

void QueueMeta::__set_lastModifiedTimestamp(const int64_t val) {
  this->lastModifiedTimestamp = val;
__isset.lastModifiedTimestamp = true;
}

void QueueMeta::__set_queueTagMap(const std::map<std::string, QueueTag> & val) {
  this->queueTagMap = val;
__isset.queueTagMap = true;
}

const char* QueueMeta::ascii_fingerprint = "5DD9809F708D2B5B86147BB44BE0CCDF";
const uint8_t QueueMeta::binary_fingerprint[16] = {0x5D,0xD9,0x80,0x9F,0x70,0x8D,0x2B,0x5B,0x86,0x14,0x7B,0xB4,0x4B,0xE0,0xCC,0xDF};

uint32_t QueueMeta::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_queueAttribute = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueAttribute.read(iprot);
          isset_queueAttribute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueQuota.read(iprot);
          this->__isset.queueQuota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enablePriority);
          this->__isset.enablePriority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->topicQueue);
          this->__isset.topicQueue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->deleteMessageForce);
          this->__isset.deleteMessageForce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultTagName);
          this->__isset.defaultTagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->permissionList.clear();
            uint32_t _size191;
            ::apache::thrift::protocol::TType _ktype192;
            ::apache::thrift::protocol::TType _vtype193;
            xfer += iprot->readMapBegin(_ktype192, _vtype193, _size191);
            uint32_t _i195;
            for (_i195 = 0; _i195 < _size191; ++_i195)
            {
              std::string _key196;
              xfer += iprot->readString(_key196);
              Permission::type& _val197 = this->permissionList[_key196];
              int32_t ecast198;
              xfer += iprot->readI32(ecast198);
              _val197 = (Permission::type)ecast198;
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.permissionList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->redrivePolicy.read(iprot);
          this->__isset.redrivePolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sourceQueues.clear();
            uint32_t _size199;
            ::apache::thrift::protocol::TType _etype202;
            xfer += iprot->readListBegin(_etype202, _size199);
            this->sourceQueues.resize(_size199);
            uint32_t _i203;
            for (_i203 = 0; _i203 < _size199; ++_i203)
            {
              xfer += iprot->readString(this->sourceQueues[_i203]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sourceQueues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTimestamp);
          this->__isset.createTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastModifiedTimestamp);
          this->__isset.lastModifiedTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->queueTagMap.clear();
            uint32_t _size204;
            ::apache::thrift::protocol::TType _ktype205;
            ::apache::thrift::protocol::TType _vtype206;
            xfer += iprot->readMapBegin(_ktype205, _vtype206, _size204);
            uint32_t _i208;
            for (_i208 = 0; _i208 < _size204; ++_i208)
            {
              std::string _key209;
              xfer += iprot->readString(_key209);
              QueueTag& _val210 = this->queueTagMap[_key209];
              xfer += _val210.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.queueTagMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_queueAttribute)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QueueMeta::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("QueueMeta");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queueAttribute", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->queueAttribute.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.queueQuota) {
    xfer += oprot->writeFieldBegin("queueQuota", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->queueQuota.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enablePriority) {
    xfer += oprot->writeFieldBegin("enablePriority", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->enablePriority);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.topicQueue) {
    xfer += oprot->writeFieldBegin("topicQueue", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->topicQueue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deleteMessageForce) {
    xfer += oprot->writeFieldBegin("deleteMessageForce", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->deleteMessageForce);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultTagName) {
    xfer += oprot->writeFieldBegin("defaultTagName", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->defaultTagName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.permissionList) {
    xfer += oprot->writeFieldBegin("permissionList", ::apache::thrift::protocol::T_MAP, 8);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->permissionList.size()));
      std::map<std::string, Permission::type> ::const_iterator _iter211;
      for (_iter211 = this->permissionList.begin(); _iter211 != this->permissionList.end(); ++_iter211)
      {
        xfer += oprot->writeString(_iter211->first);
        xfer += oprot->writeI32((int32_t)_iter211->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.redrivePolicy) {
    xfer += oprot->writeFieldBegin("redrivePolicy", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->redrivePolicy.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sourceQueues) {
    xfer += oprot->writeFieldBegin("sourceQueues", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->sourceQueues.size()));
      std::vector<std::string> ::const_iterator _iter212;
      for (_iter212 = this->sourceQueues.begin(); _iter212 != this->sourceQueues.end(); ++_iter212)
      {
        xfer += oprot->writeString((*_iter212));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTimestamp) {
    xfer += oprot->writeFieldBegin("createTimestamp", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->createTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastModifiedTimestamp) {
    xfer += oprot->writeFieldBegin("lastModifiedTimestamp", ::apache::thrift::protocol::T_I64, 12);
    xfer += oprot->writeI64(this->lastModifiedTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queueTagMap) {
    xfer += oprot->writeFieldBegin("queueTagMap", ::apache::thrift::protocol::T_MAP, 13);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->queueTagMap.size()));
      std::map<std::string, QueueTag> ::const_iterator _iter213;
      for (_iter213 = this->queueTagMap.begin(); _iter213 != this->queueTagMap.end(); ++_iter213)
      {
        xfer += oprot->writeString(_iter213->first);
        xfer += _iter213->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(QueueMeta &a, QueueMeta &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.queueAttribute, b.queueAttribute);
  swap(a.queueQuota, b.queueQuota);
  swap(a.enablePriority, b.enablePriority);
  swap(a.topicQueue, b.topicQueue);
  swap(a.deleteMessageForce, b.deleteMessageForce);
  swap(a.defaultTagName, b.defaultTagName);
  swap(a.permissionList, b.permissionList);
  swap(a.redrivePolicy, b.redrivePolicy);
  swap(a.sourceQueues, b.sourceQueues);
  swap(a.createTimestamp, b.createTimestamp);
  swap(a.lastModifiedTimestamp, b.lastModifiedTimestamp);
  swap(a.queueTagMap, b.queueTagMap);
  swap(a.__isset, b.__isset);
}

QueueMeta::QueueMeta(const QueueMeta& other214) {
  queueName = other214.queueName;
  queueAttribute = other214.queueAttribute;
  queueQuota = other214.queueQuota;
  enablePriority = other214.enablePriority;
  topicQueue = other214.topicQueue;
  deleteMessageForce = other214.deleteMessageForce;
  defaultTagName = other214.defaultTagName;
  permissionList = other214.permissionList;
  redrivePolicy = other214.redrivePolicy;
  sourceQueues = other214.sourceQueues;
  createTimestamp = other214.createTimestamp;
  lastModifiedTimestamp = other214.lastModifiedTimestamp;
  queueTagMap = other214.queueTagMap;
  __isset = other214.__isset;
}
QueueMeta& QueueMeta::operator=(const QueueMeta& other215) {
  queueName = other215.queueName;
  queueAttribute = other215.queueAttribute;
  queueQuota = other215.queueQuota;
  enablePriority = other215.enablePriority;
  topicQueue = other215.topicQueue;
  deleteMessageForce = other215.deleteMessageForce;
  defaultTagName = other215.defaultTagName;
  permissionList = other215.permissionList;
  redrivePolicy = other215.redrivePolicy;
  sourceQueues = other215.sourceQueues;
  createTimestamp = other215.createTimestamp;
  lastModifiedTimestamp = other215.lastModifiedTimestamp;
  queueTagMap = other215.queueTagMap;
  __isset = other215.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const QueueMeta& obj) {
  using apache::thrift::to_string;
  out << "QueueMeta(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "queueAttribute=" << to_string(obj.queueAttribute);
  out << ", " << "queueQuota="; (obj.__isset.queueQuota ? (out << to_string(obj.queueQuota)) : (out << "<null>"));
  out << ", " << "enablePriority="; (obj.__isset.enablePriority ? (out << to_string(obj.enablePriority)) : (out << "<null>"));
  out << ", " << "topicQueue="; (obj.__isset.topicQueue ? (out << to_string(obj.topicQueue)) : (out << "<null>"));
  out << ", " << "deleteMessageForce="; (obj.__isset.deleteMessageForce ? (out << to_string(obj.deleteMessageForce)) : (out << "<null>"));
  out << ", " << "defaultTagName="; (obj.__isset.defaultTagName ? (out << to_string(obj.defaultTagName)) : (out << "<null>"));
  out << ", " << "permissionList="; (obj.__isset.permissionList ? (out << to_string(obj.permissionList)) : (out << "<null>"));
  out << ", " << "redrivePolicy="; (obj.__isset.redrivePolicy ? (out << to_string(obj.redrivePolicy)) : (out << "<null>"));
  out << ", " << "sourceQueues="; (obj.__isset.sourceQueues ? (out << to_string(obj.sourceQueues)) : (out << "<null>"));
  out << ", " << "createTimestamp="; (obj.__isset.createTimestamp ? (out << to_string(obj.createTimestamp)) : (out << "<null>"));
  out << ", " << "lastModifiedTimestamp="; (obj.__isset.lastModifiedTimestamp ? (out << to_string(obj.lastModifiedTimestamp)) : (out << "<null>"));
  out << ", " << "queueTagMap="; (obj.__isset.queueTagMap ? (out << to_string(obj.queueTagMap)) : (out << "<null>"));
  out << ")";
  return out;
}


GetQueueMetaResponse::~GetQueueMetaResponse() throw() {
}


void GetQueueMetaResponse::__set_queueMeta(const QueueMeta& val) {
  this->queueMeta = val;
}

const char* GetQueueMetaResponse::ascii_fingerprint = "44BA6CC774C2644C839E85ADCD070E22";
const uint8_t GetQueueMetaResponse::binary_fingerprint[16] = {0x44,0xBA,0x6C,0xC7,0x74,0xC2,0x64,0x4C,0x83,0x9E,0x85,0xAD,0xCD,0x07,0x0E,0x22};

uint32_t GetQueueMetaResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueMeta = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueMeta.read(iprot);
          isset_queueMeta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueMeta)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetQueueMetaResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetQueueMetaResponse");

  xfer += oprot->writeFieldBegin("queueMeta", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->queueMeta.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetQueueMetaResponse &a, GetQueueMetaResponse &b) {
  using ::std::swap;
  swap(a.queueMeta, b.queueMeta);
}

GetQueueMetaResponse::GetQueueMetaResponse(const GetQueueMetaResponse& other216) {
  queueMeta = other216.queueMeta;
}
GetQueueMetaResponse& GetQueueMetaResponse::operator=(const GetQueueMetaResponse& other217) {
  queueMeta = other217.queueMeta;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const GetQueueMetaResponse& obj) {
  using apache::thrift::to_string;
  out << "GetQueueMetaResponse(";
  out << "queueMeta=" << to_string(obj.queueMeta);
  out << ")";
  return out;
}


CopyQueueRequest::~CopyQueueRequest() throw() {
}


void CopyQueueRequest::__set_queueMeta(const QueueMeta& val) {
  this->queueMeta = val;
}

const char* CopyQueueRequest::ascii_fingerprint = "44BA6CC774C2644C839E85ADCD070E22";
const uint8_t CopyQueueRequest::binary_fingerprint[16] = {0x44,0xBA,0x6C,0xC7,0x74,0xC2,0x64,0x4C,0x83,0x9E,0x85,0xAD,0xCD,0x07,0x0E,0x22};

uint32_t CopyQueueRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueMeta = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->queueMeta.read(iprot);
          isset_queueMeta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueMeta)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CopyQueueRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("CopyQueueRequest");

  xfer += oprot->writeFieldBegin("queueMeta", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->queueMeta.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(CopyQueueRequest &a, CopyQueueRequest &b) {
  using ::std::swap;
  swap(a.queueMeta, b.queueMeta);
}

CopyQueueRequest::CopyQueueRequest(const CopyQueueRequest& other218) {
  queueMeta = other218.queueMeta;
}
CopyQueueRequest& CopyQueueRequest::operator=(const CopyQueueRequest& other219) {
  queueMeta = other219.queueMeta;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const CopyQueueRequest& obj) {
  using apache::thrift::to_string;
  out << "CopyQueueRequest(";
  out << "queueMeta=" << to_string(obj.queueMeta);
  out << ")";
  return out;
}

}} // namespace
