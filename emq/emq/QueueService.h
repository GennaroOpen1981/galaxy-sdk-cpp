#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QueueService_H
#define QueueService_H

#include <thrift/TDispatchProcessor.h>
#include "Queue_types.h"
#include "EMQBaseService.h"

namespace emq { namespace queue {

class QueueServiceIf : virtual public  ::emq::common::EMQBaseServiceIf {
 public:
  virtual ~QueueServiceIf() {}

  /**
   * Create queue;
   * 
   * 
   * @param request
   */
  virtual void createQueue(CreateQueueResponse& _return, const CreateQueueRequest& request) = 0;

  /**
   * Delete queue;
   * 
   * 
   * @param request
   */
  virtual void deleteQueue(const DeleteQueueRequest& request) = 0;

  /**
   * Purge queue;
   * 
   * 
   * @param request
   */
  virtual void purgeQueue(const PurgeQueueRequest& request) = 0;

  /**
   * Set queue attribute;
   * 
   * 
   * @param request
   */
  virtual void setQueueAttribute(SetQueueAttributesResponse& _return, const SetQueueAttributesRequest& request) = 0;

  /**
   * Set queue quota;
   * 
   * 
   * @param request
   */
  virtual void setQueueQuota(SetQueueQuotaResponse& _return, const SetQueueQuotaRequest& request) = 0;

  /**
   * Get queue info, include QueueAttribute, QueueState and QueueQuota;
   * 
   * 
   * @param request
   */
  virtual void getQueueInfo(GetQueueInfoResponse& _return, const GetQueueInfoRequest& request) = 0;

  /**
   * List queue with queueNamePrefix;
   * 
   * 
   * @param request
   */
  virtual void listQueue(ListQueueResponse& _return, const ListQueueRequest& request) = 0;

  /**
   * Remove queue redrive policy;
   * 
   * 
   * @param request
   */
  virtual void setQueueRedrivePolicy(SetQueueRedrivePolicyResponse& _return, const SetQueueRedrivePolicyRequest& request) = 0;

  /**
   * Remove queue redrive policy;
   * 
   * 
   * @param request
   */
  virtual void removeQueueRedrivePolicy(const RemoveQueueRedrivePolicyRequest& request) = 0;

  /**
   * Set permission for developer
   * FULL_CONTROL required to use this method
   * 
   * 
   * @param request
   */
  virtual void setPermission(const SetPermissionRequest& request) = 0;

  /**
   * Revoke permission for developer
   * FULL_CONTROL required to use this method
   * 
   * @param request
   */
  virtual void revokePermission(const RevokePermissionRequest& request) = 0;

  /**
   * query permission for developer using this method
   * no permission required to use this method
   * 
   * @param request
   */
  virtual void queryPermission(QueryPermissionResponse& _return, const QueryPermissionRequest& request) = 0;

  /**
   * List permission for developer
   * ADMIN_QUEUE required to use this method
   * 
   * @param request
   */
  virtual void queryPermissionForId(QueryPermissionForIdResponse& _return, const QueryPermissionForIdRequest& request) = 0;

  /**
   * list permissions for all users of the queue
   * ADMIN_QUEUE required to use this method
   * 
   * 
   * @param request
   */
  virtual void listPermissions(ListPermissionsResponse& _return, const ListPermissionsRequest& request) = 0;

  /**
   * create tag for queue
   * ADMIN_QUEUE required to use this method
   * 
   * 
   * @param request
   */
  virtual void createTag(CreateTagResponse& _return, const CreateTagRequest& request) = 0;

  /**
   * delete tag for queue
   * ADMIN_QUEUE required to use this method
   * 
   * 
   * @param request
   */
  virtual void deleteTag(const DeleteTagRequest& request) = 0;

  /**
   * get info of tag
   * ADMIN_QUEUE required to use this method
   * 
   * 
   * @param request
   */
  virtual void getTagInfo(GetTagInfoResponse& _return, const GetTagInfoRequest& request) = 0;

  /**
   * list names of all tag of queue
   * ADMIN_QUEUE required to use this method
   * 
   * 
   * @param request
   */
  virtual void listTag(ListTagResponse& _return, const ListTagRequest& request) = 0;

  /**
   * query metrics
   * FULL_CONTROL required to use this method
   * 
   * 
   * @param request
   */
  virtual void queryMetric(TimeSeriesData& _return, const QueryMetricRequest& request) = 0;

  /**
   * query privileged queues
   * No permission required
   * 
   * 
   * @param request
   */
  virtual void queryPrivilegedQueue(QueryPrivilegedQueueResponse& _return, const QueryPrivilegedQueueRequest& request) = 0;
  virtual void verifyEMQAdmin(VerifyEMQAdminResponse& _return) = 0;
  virtual void verifyEMQAdminRole(VerifyEMQAdminRoleResponse& _return, const VerifyEMQAdminRoleRequest& request) = 0;

  /**
   * copy queues using queues meta
   * 
   * 
   * @param request
   */
  virtual void copyQueue(const CopyQueueRequest& request) = 0;
  virtual void getQueueMeta(GetQueueMetaResponse& _return, const std::string& queueName) = 0;
};

class QueueServiceIfFactory : virtual public  ::emq::common::EMQBaseServiceIfFactory {
 public:
  typedef QueueServiceIf Handler;

  virtual ~QueueServiceIfFactory() {}

  virtual QueueServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::emq::common::EMQBaseServiceIf* /* handler */) = 0;
};

class QueueServiceIfSingletonFactory : virtual public QueueServiceIfFactory {
 public:
  QueueServiceIfSingletonFactory(const boost::shared_ptr<QueueServiceIf>& iface) : iface_(iface) {}
  virtual ~QueueServiceIfSingletonFactory() {}

  virtual QueueServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::emq::common::EMQBaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<QueueServiceIf> iface_;
};

class QueueServiceNull : virtual public QueueServiceIf , virtual public  ::emq::common::EMQBaseServiceNull {
 public:
  virtual ~QueueServiceNull() {}
  void createQueue(CreateQueueResponse& /* _return */, const CreateQueueRequest& /* request */) {
    return;
  }
  void deleteQueue(const DeleteQueueRequest& /* request */) {
    return;
  }
  void purgeQueue(const PurgeQueueRequest& /* request */) {
    return;
  }
  void setQueueAttribute(SetQueueAttributesResponse& /* _return */, const SetQueueAttributesRequest& /* request */) {
    return;
  }
  void setQueueQuota(SetQueueQuotaResponse& /* _return */, const SetQueueQuotaRequest& /* request */) {
    return;
  }
  void getQueueInfo(GetQueueInfoResponse& /* _return */, const GetQueueInfoRequest& /* request */) {
    return;
  }
  void listQueue(ListQueueResponse& /* _return */, const ListQueueRequest& /* request */) {
    return;
  }
  void setQueueRedrivePolicy(SetQueueRedrivePolicyResponse& /* _return */, const SetQueueRedrivePolicyRequest& /* request */) {
    return;
  }
  void removeQueueRedrivePolicy(const RemoveQueueRedrivePolicyRequest& /* request */) {
    return;
  }
  void setPermission(const SetPermissionRequest& /* request */) {
    return;
  }
  void revokePermission(const RevokePermissionRequest& /* request */) {
    return;
  }
  void queryPermission(QueryPermissionResponse& /* _return */, const QueryPermissionRequest& /* request */) {
    return;
  }
  void queryPermissionForId(QueryPermissionForIdResponse& /* _return */, const QueryPermissionForIdRequest& /* request */) {
    return;
  }
  void listPermissions(ListPermissionsResponse& /* _return */, const ListPermissionsRequest& /* request */) {
    return;
  }
  void createTag(CreateTagResponse& /* _return */, const CreateTagRequest& /* request */) {
    return;
  }
  void deleteTag(const DeleteTagRequest& /* request */) {
    return;
  }
  void getTagInfo(GetTagInfoResponse& /* _return */, const GetTagInfoRequest& /* request */) {
    return;
  }
  void listTag(ListTagResponse& /* _return */, const ListTagRequest& /* request */) {
    return;
  }
  void queryMetric(TimeSeriesData& /* _return */, const QueryMetricRequest& /* request */) {
    return;
  }
  void queryPrivilegedQueue(QueryPrivilegedQueueResponse& /* _return */, const QueryPrivilegedQueueRequest& /* request */) {
    return;
  }
  void verifyEMQAdmin(VerifyEMQAdminResponse& /* _return */) {
    return;
  }
  void verifyEMQAdminRole(VerifyEMQAdminRoleResponse& /* _return */, const VerifyEMQAdminRoleRequest& /* request */) {
    return;
  }
  void copyQueue(const CopyQueueRequest& /* request */) {
    return;
  }
  void getQueueMeta(GetQueueMetaResponse& /* _return */, const std::string& /* queueName */) {
    return;
  }
};

typedef struct _QueueService_createQueue_args__isset {
  _QueueService_createQueue_args__isset() : request(false) {}
  bool request :1;
} _QueueService_createQueue_args__isset;

class QueueService_createQueue_args {
 public:

  static const char* ascii_fingerprint; // = "180F7E36F6AB3BE8C465FA88E7E09262";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x0F,0x7E,0x36,0xF6,0xAB,0x3B,0xE8,0xC4,0x65,0xFA,0x88,0xE7,0xE0,0x92,0x62};

  QueueService_createQueue_args(const QueueService_createQueue_args&);
  QueueService_createQueue_args& operator=(const QueueService_createQueue_args&);
  QueueService_createQueue_args() {
  }

  virtual ~QueueService_createQueue_args() throw();
  CreateQueueRequest request;

  _QueueService_createQueue_args__isset __isset;

  void __set_request(const CreateQueueRequest& val);

  bool operator == (const QueueService_createQueue_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_createQueue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_createQueue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_createQueue_args& obj);
};


class QueueService_createQueue_pargs {
 public:

  static const char* ascii_fingerprint; // = "180F7E36F6AB3BE8C465FA88E7E09262";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x0F,0x7E,0x36,0xF6,0xAB,0x3B,0xE8,0xC4,0x65,0xFA,0x88,0xE7,0xE0,0x92,0x62};


  virtual ~QueueService_createQueue_pargs() throw();
  const CreateQueueRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_createQueue_pargs& obj);
};

typedef struct _QueueService_createQueue_result__isset {
  _QueueService_createQueue_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_createQueue_result__isset;

class QueueService_createQueue_result {
 public:

  static const char* ascii_fingerprint; // = "01D15CDEA1D64CF3FC12D8016C3F20B7";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0xD1,0x5C,0xDE,0xA1,0xD6,0x4C,0xF3,0xFC,0x12,0xD8,0x01,0x6C,0x3F,0x20,0xB7};

  QueueService_createQueue_result(const QueueService_createQueue_result&);
  QueueService_createQueue_result& operator=(const QueueService_createQueue_result&);
  QueueService_createQueue_result() {
  }

  virtual ~QueueService_createQueue_result() throw();
  CreateQueueResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_createQueue_result__isset __isset;

  void __set_success(const CreateQueueResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_createQueue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_createQueue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_createQueue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_createQueue_result& obj);
};

typedef struct _QueueService_createQueue_presult__isset {
  _QueueService_createQueue_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_createQueue_presult__isset;

class QueueService_createQueue_presult {
 public:

  static const char* ascii_fingerprint; // = "01D15CDEA1D64CF3FC12D8016C3F20B7";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0xD1,0x5C,0xDE,0xA1,0xD6,0x4C,0xF3,0xFC,0x12,0xD8,0x01,0x6C,0x3F,0x20,0xB7};


  virtual ~QueueService_createQueue_presult() throw();
  CreateQueueResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_createQueue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_createQueue_presult& obj);
};

typedef struct _QueueService_deleteQueue_args__isset {
  _QueueService_deleteQueue_args__isset() : request(false) {}
  bool request :1;
} _QueueService_deleteQueue_args__isset;

class QueueService_deleteQueue_args {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  QueueService_deleteQueue_args(const QueueService_deleteQueue_args&);
  QueueService_deleteQueue_args& operator=(const QueueService_deleteQueue_args&);
  QueueService_deleteQueue_args() {
  }

  virtual ~QueueService_deleteQueue_args() throw();
  DeleteQueueRequest request;

  _QueueService_deleteQueue_args__isset __isset;

  void __set_request(const DeleteQueueRequest& val);

  bool operator == (const QueueService_deleteQueue_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_deleteQueue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_deleteQueue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_deleteQueue_args& obj);
};


class QueueService_deleteQueue_pargs {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~QueueService_deleteQueue_pargs() throw();
  const DeleteQueueRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_deleteQueue_pargs& obj);
};

typedef struct _QueueService_deleteQueue_result__isset {
  _QueueService_deleteQueue_result__isset() : e(false) {}
  bool e :1;
} _QueueService_deleteQueue_result__isset;

class QueueService_deleteQueue_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  QueueService_deleteQueue_result(const QueueService_deleteQueue_result&);
  QueueService_deleteQueue_result& operator=(const QueueService_deleteQueue_result&);
  QueueService_deleteQueue_result() {
  }

  virtual ~QueueService_deleteQueue_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_deleteQueue_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_deleteQueue_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_deleteQueue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_deleteQueue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_deleteQueue_result& obj);
};

typedef struct _QueueService_deleteQueue_presult__isset {
  _QueueService_deleteQueue_presult__isset() : e(false) {}
  bool e :1;
} _QueueService_deleteQueue_presult__isset;

class QueueService_deleteQueue_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~QueueService_deleteQueue_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_deleteQueue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_deleteQueue_presult& obj);
};

typedef struct _QueueService_purgeQueue_args__isset {
  _QueueService_purgeQueue_args__isset() : request(false) {}
  bool request :1;
} _QueueService_purgeQueue_args__isset;

class QueueService_purgeQueue_args {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  QueueService_purgeQueue_args(const QueueService_purgeQueue_args&);
  QueueService_purgeQueue_args& operator=(const QueueService_purgeQueue_args&);
  QueueService_purgeQueue_args() {
  }

  virtual ~QueueService_purgeQueue_args() throw();
  PurgeQueueRequest request;

  _QueueService_purgeQueue_args__isset __isset;

  void __set_request(const PurgeQueueRequest& val);

  bool operator == (const QueueService_purgeQueue_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_purgeQueue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_purgeQueue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_purgeQueue_args& obj);
};


class QueueService_purgeQueue_pargs {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~QueueService_purgeQueue_pargs() throw();
  const PurgeQueueRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_purgeQueue_pargs& obj);
};

typedef struct _QueueService_purgeQueue_result__isset {
  _QueueService_purgeQueue_result__isset() : e(false) {}
  bool e :1;
} _QueueService_purgeQueue_result__isset;

class QueueService_purgeQueue_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  QueueService_purgeQueue_result(const QueueService_purgeQueue_result&);
  QueueService_purgeQueue_result& operator=(const QueueService_purgeQueue_result&);
  QueueService_purgeQueue_result() {
  }

  virtual ~QueueService_purgeQueue_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_purgeQueue_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_purgeQueue_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_purgeQueue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_purgeQueue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_purgeQueue_result& obj);
};

typedef struct _QueueService_purgeQueue_presult__isset {
  _QueueService_purgeQueue_presult__isset() : e(false) {}
  bool e :1;
} _QueueService_purgeQueue_presult__isset;

class QueueService_purgeQueue_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~QueueService_purgeQueue_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_purgeQueue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_purgeQueue_presult& obj);
};

typedef struct _QueueService_setQueueAttribute_args__isset {
  _QueueService_setQueueAttribute_args__isset() : request(false) {}
  bool request :1;
} _QueueService_setQueueAttribute_args__isset;

class QueueService_setQueueAttribute_args {
 public:

  static const char* ascii_fingerprint; // = "7B190B5FF955D9678A9AB1887EFE67D4";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0x19,0x0B,0x5F,0xF9,0x55,0xD9,0x67,0x8A,0x9A,0xB1,0x88,0x7E,0xFE,0x67,0xD4};

  QueueService_setQueueAttribute_args(const QueueService_setQueueAttribute_args&);
  QueueService_setQueueAttribute_args& operator=(const QueueService_setQueueAttribute_args&);
  QueueService_setQueueAttribute_args() {
  }

  virtual ~QueueService_setQueueAttribute_args() throw();
  SetQueueAttributesRequest request;

  _QueueService_setQueueAttribute_args__isset __isset;

  void __set_request(const SetQueueAttributesRequest& val);

  bool operator == (const QueueService_setQueueAttribute_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_setQueueAttribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_setQueueAttribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setQueueAttribute_args& obj);
};


class QueueService_setQueueAttribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "7B190B5FF955D9678A9AB1887EFE67D4";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0x19,0x0B,0x5F,0xF9,0x55,0xD9,0x67,0x8A,0x9A,0xB1,0x88,0x7E,0xFE,0x67,0xD4};


  virtual ~QueueService_setQueueAttribute_pargs() throw();
  const SetQueueAttributesRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setQueueAttribute_pargs& obj);
};

typedef struct _QueueService_setQueueAttribute_result__isset {
  _QueueService_setQueueAttribute_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_setQueueAttribute_result__isset;

class QueueService_setQueueAttribute_result {
 public:

  static const char* ascii_fingerprint; // = "B7DDC2EEB7EDDAB91A39F1279C063CF8";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0xDD,0xC2,0xEE,0xB7,0xED,0xDA,0xB9,0x1A,0x39,0xF1,0x27,0x9C,0x06,0x3C,0xF8};

  QueueService_setQueueAttribute_result(const QueueService_setQueueAttribute_result&);
  QueueService_setQueueAttribute_result& operator=(const QueueService_setQueueAttribute_result&);
  QueueService_setQueueAttribute_result() {
  }

  virtual ~QueueService_setQueueAttribute_result() throw();
  SetQueueAttributesResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_setQueueAttribute_result__isset __isset;

  void __set_success(const SetQueueAttributesResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_setQueueAttribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_setQueueAttribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_setQueueAttribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setQueueAttribute_result& obj);
};

typedef struct _QueueService_setQueueAttribute_presult__isset {
  _QueueService_setQueueAttribute_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_setQueueAttribute_presult__isset;

class QueueService_setQueueAttribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B7DDC2EEB7EDDAB91A39F1279C063CF8";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0xDD,0xC2,0xEE,0xB7,0xED,0xDA,0xB9,0x1A,0x39,0xF1,0x27,0x9C,0x06,0x3C,0xF8};


  virtual ~QueueService_setQueueAttribute_presult() throw();
  SetQueueAttributesResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_setQueueAttribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setQueueAttribute_presult& obj);
};

typedef struct _QueueService_setQueueQuota_args__isset {
  _QueueService_setQueueQuota_args__isset() : request(false) {}
  bool request :1;
} _QueueService_setQueueQuota_args__isset;

class QueueService_setQueueQuota_args {
 public:

  static const char* ascii_fingerprint; // = "459935AB0A2C9A9ED6B8461D51E1F16A";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x99,0x35,0xAB,0x0A,0x2C,0x9A,0x9E,0xD6,0xB8,0x46,0x1D,0x51,0xE1,0xF1,0x6A};

  QueueService_setQueueQuota_args(const QueueService_setQueueQuota_args&);
  QueueService_setQueueQuota_args& operator=(const QueueService_setQueueQuota_args&);
  QueueService_setQueueQuota_args() {
  }

  virtual ~QueueService_setQueueQuota_args() throw();
  SetQueueQuotaRequest request;

  _QueueService_setQueueQuota_args__isset __isset;

  void __set_request(const SetQueueQuotaRequest& val);

  bool operator == (const QueueService_setQueueQuota_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_setQueueQuota_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_setQueueQuota_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setQueueQuota_args& obj);
};


class QueueService_setQueueQuota_pargs {
 public:

  static const char* ascii_fingerprint; // = "459935AB0A2C9A9ED6B8461D51E1F16A";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x99,0x35,0xAB,0x0A,0x2C,0x9A,0x9E,0xD6,0xB8,0x46,0x1D,0x51,0xE1,0xF1,0x6A};


  virtual ~QueueService_setQueueQuota_pargs() throw();
  const SetQueueQuotaRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setQueueQuota_pargs& obj);
};

typedef struct _QueueService_setQueueQuota_result__isset {
  _QueueService_setQueueQuota_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_setQueueQuota_result__isset;

class QueueService_setQueueQuota_result {
 public:

  static const char* ascii_fingerprint; // = "0025AA4FC60236F5A293BE69B63E7611";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x25,0xAA,0x4F,0xC6,0x02,0x36,0xF5,0xA2,0x93,0xBE,0x69,0xB6,0x3E,0x76,0x11};

  QueueService_setQueueQuota_result(const QueueService_setQueueQuota_result&);
  QueueService_setQueueQuota_result& operator=(const QueueService_setQueueQuota_result&);
  QueueService_setQueueQuota_result() {
  }

  virtual ~QueueService_setQueueQuota_result() throw();
  SetQueueQuotaResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_setQueueQuota_result__isset __isset;

  void __set_success(const SetQueueQuotaResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_setQueueQuota_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_setQueueQuota_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_setQueueQuota_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setQueueQuota_result& obj);
};

typedef struct _QueueService_setQueueQuota_presult__isset {
  _QueueService_setQueueQuota_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_setQueueQuota_presult__isset;

class QueueService_setQueueQuota_presult {
 public:

  static const char* ascii_fingerprint; // = "0025AA4FC60236F5A293BE69B63E7611";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x25,0xAA,0x4F,0xC6,0x02,0x36,0xF5,0xA2,0x93,0xBE,0x69,0xB6,0x3E,0x76,0x11};


  virtual ~QueueService_setQueueQuota_presult() throw();
  SetQueueQuotaResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_setQueueQuota_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setQueueQuota_presult& obj);
};

typedef struct _QueueService_getQueueInfo_args__isset {
  _QueueService_getQueueInfo_args__isset() : request(false) {}
  bool request :1;
} _QueueService_getQueueInfo_args__isset;

class QueueService_getQueueInfo_args {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  QueueService_getQueueInfo_args(const QueueService_getQueueInfo_args&);
  QueueService_getQueueInfo_args& operator=(const QueueService_getQueueInfo_args&);
  QueueService_getQueueInfo_args() {
  }

  virtual ~QueueService_getQueueInfo_args() throw();
  GetQueueInfoRequest request;

  _QueueService_getQueueInfo_args__isset __isset;

  void __set_request(const GetQueueInfoRequest& val);

  bool operator == (const QueueService_getQueueInfo_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_getQueueInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_getQueueInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_getQueueInfo_args& obj);
};


class QueueService_getQueueInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~QueueService_getQueueInfo_pargs() throw();
  const GetQueueInfoRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_getQueueInfo_pargs& obj);
};

typedef struct _QueueService_getQueueInfo_result__isset {
  _QueueService_getQueueInfo_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_getQueueInfo_result__isset;

class QueueService_getQueueInfo_result {
 public:

  static const char* ascii_fingerprint; // = "B7AFA816DE82602186578FA15FEEF881";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0xAF,0xA8,0x16,0xDE,0x82,0x60,0x21,0x86,0x57,0x8F,0xA1,0x5F,0xEE,0xF8,0x81};

  QueueService_getQueueInfo_result(const QueueService_getQueueInfo_result&);
  QueueService_getQueueInfo_result& operator=(const QueueService_getQueueInfo_result&);
  QueueService_getQueueInfo_result() {
  }

  virtual ~QueueService_getQueueInfo_result() throw();
  GetQueueInfoResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_getQueueInfo_result__isset __isset;

  void __set_success(const GetQueueInfoResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_getQueueInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_getQueueInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_getQueueInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_getQueueInfo_result& obj);
};

typedef struct _QueueService_getQueueInfo_presult__isset {
  _QueueService_getQueueInfo_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_getQueueInfo_presult__isset;

class QueueService_getQueueInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "B7AFA816DE82602186578FA15FEEF881";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0xAF,0xA8,0x16,0xDE,0x82,0x60,0x21,0x86,0x57,0x8F,0xA1,0x5F,0xEE,0xF8,0x81};


  virtual ~QueueService_getQueueInfo_presult() throw();
  GetQueueInfoResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_getQueueInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_getQueueInfo_presult& obj);
};

typedef struct _QueueService_listQueue_args__isset {
  _QueueService_listQueue_args__isset() : request(false) {}
  bool request :1;
} _QueueService_listQueue_args__isset;

class QueueService_listQueue_args {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  QueueService_listQueue_args(const QueueService_listQueue_args&);
  QueueService_listQueue_args& operator=(const QueueService_listQueue_args&);
  QueueService_listQueue_args() {
  }

  virtual ~QueueService_listQueue_args() throw();
  ListQueueRequest request;

  _QueueService_listQueue_args__isset __isset;

  void __set_request(const ListQueueRequest& val);

  bool operator == (const QueueService_listQueue_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_listQueue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_listQueue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_listQueue_args& obj);
};


class QueueService_listQueue_pargs {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~QueueService_listQueue_pargs() throw();
  const ListQueueRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_listQueue_pargs& obj);
};

typedef struct _QueueService_listQueue_result__isset {
  _QueueService_listQueue_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_listQueue_result__isset;

class QueueService_listQueue_result {
 public:

  static const char* ascii_fingerprint; // = "4D5420B88B73BDC21A4132A8833CD8FA";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0x54,0x20,0xB8,0x8B,0x73,0xBD,0xC2,0x1A,0x41,0x32,0xA8,0x83,0x3C,0xD8,0xFA};

  QueueService_listQueue_result(const QueueService_listQueue_result&);
  QueueService_listQueue_result& operator=(const QueueService_listQueue_result&);
  QueueService_listQueue_result() {
  }

  virtual ~QueueService_listQueue_result() throw();
  ListQueueResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_listQueue_result__isset __isset;

  void __set_success(const ListQueueResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_listQueue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_listQueue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_listQueue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_listQueue_result& obj);
};

typedef struct _QueueService_listQueue_presult__isset {
  _QueueService_listQueue_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_listQueue_presult__isset;

class QueueService_listQueue_presult {
 public:

  static const char* ascii_fingerprint; // = "4D5420B88B73BDC21A4132A8833CD8FA";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0x54,0x20,0xB8,0x8B,0x73,0xBD,0xC2,0x1A,0x41,0x32,0xA8,0x83,0x3C,0xD8,0xFA};


  virtual ~QueueService_listQueue_presult() throw();
  ListQueueResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_listQueue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_listQueue_presult& obj);
};

typedef struct _QueueService_setQueueRedrivePolicy_args__isset {
  _QueueService_setQueueRedrivePolicy_args__isset() : request(false) {}
  bool request :1;
} _QueueService_setQueueRedrivePolicy_args__isset;

class QueueService_setQueueRedrivePolicy_args {
 public:

  static const char* ascii_fingerprint; // = "76CA403A7DEFDB75632F67578E84EC79";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0xCA,0x40,0x3A,0x7D,0xEF,0xDB,0x75,0x63,0x2F,0x67,0x57,0x8E,0x84,0xEC,0x79};

  QueueService_setQueueRedrivePolicy_args(const QueueService_setQueueRedrivePolicy_args&);
  QueueService_setQueueRedrivePolicy_args& operator=(const QueueService_setQueueRedrivePolicy_args&);
  QueueService_setQueueRedrivePolicy_args() {
  }

  virtual ~QueueService_setQueueRedrivePolicy_args() throw();
  SetQueueRedrivePolicyRequest request;

  _QueueService_setQueueRedrivePolicy_args__isset __isset;

  void __set_request(const SetQueueRedrivePolicyRequest& val);

  bool operator == (const QueueService_setQueueRedrivePolicy_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_setQueueRedrivePolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_setQueueRedrivePolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setQueueRedrivePolicy_args& obj);
};


class QueueService_setQueueRedrivePolicy_pargs {
 public:

  static const char* ascii_fingerprint; // = "76CA403A7DEFDB75632F67578E84EC79";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0xCA,0x40,0x3A,0x7D,0xEF,0xDB,0x75,0x63,0x2F,0x67,0x57,0x8E,0x84,0xEC,0x79};


  virtual ~QueueService_setQueueRedrivePolicy_pargs() throw();
  const SetQueueRedrivePolicyRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setQueueRedrivePolicy_pargs& obj);
};

typedef struct _QueueService_setQueueRedrivePolicy_result__isset {
  _QueueService_setQueueRedrivePolicy_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_setQueueRedrivePolicy_result__isset;

class QueueService_setQueueRedrivePolicy_result {
 public:

  static const char* ascii_fingerprint; // = "424DB3C0A90B45160A6437A55563A103";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x4D,0xB3,0xC0,0xA9,0x0B,0x45,0x16,0x0A,0x64,0x37,0xA5,0x55,0x63,0xA1,0x03};

  QueueService_setQueueRedrivePolicy_result(const QueueService_setQueueRedrivePolicy_result&);
  QueueService_setQueueRedrivePolicy_result& operator=(const QueueService_setQueueRedrivePolicy_result&);
  QueueService_setQueueRedrivePolicy_result() {
  }

  virtual ~QueueService_setQueueRedrivePolicy_result() throw();
  SetQueueRedrivePolicyResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_setQueueRedrivePolicy_result__isset __isset;

  void __set_success(const SetQueueRedrivePolicyResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_setQueueRedrivePolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_setQueueRedrivePolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_setQueueRedrivePolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setQueueRedrivePolicy_result& obj);
};

typedef struct _QueueService_setQueueRedrivePolicy_presult__isset {
  _QueueService_setQueueRedrivePolicy_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_setQueueRedrivePolicy_presult__isset;

class QueueService_setQueueRedrivePolicy_presult {
 public:

  static const char* ascii_fingerprint; // = "424DB3C0A90B45160A6437A55563A103";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x4D,0xB3,0xC0,0xA9,0x0B,0x45,0x16,0x0A,0x64,0x37,0xA5,0x55,0x63,0xA1,0x03};


  virtual ~QueueService_setQueueRedrivePolicy_presult() throw();
  SetQueueRedrivePolicyResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_setQueueRedrivePolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setQueueRedrivePolicy_presult& obj);
};

typedef struct _QueueService_removeQueueRedrivePolicy_args__isset {
  _QueueService_removeQueueRedrivePolicy_args__isset() : request(false) {}
  bool request :1;
} _QueueService_removeQueueRedrivePolicy_args__isset;

class QueueService_removeQueueRedrivePolicy_args {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  QueueService_removeQueueRedrivePolicy_args(const QueueService_removeQueueRedrivePolicy_args&);
  QueueService_removeQueueRedrivePolicy_args& operator=(const QueueService_removeQueueRedrivePolicy_args&);
  QueueService_removeQueueRedrivePolicy_args() {
  }

  virtual ~QueueService_removeQueueRedrivePolicy_args() throw();
  RemoveQueueRedrivePolicyRequest request;

  _QueueService_removeQueueRedrivePolicy_args__isset __isset;

  void __set_request(const RemoveQueueRedrivePolicyRequest& val);

  bool operator == (const QueueService_removeQueueRedrivePolicy_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_removeQueueRedrivePolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_removeQueueRedrivePolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_removeQueueRedrivePolicy_args& obj);
};


class QueueService_removeQueueRedrivePolicy_pargs {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~QueueService_removeQueueRedrivePolicy_pargs() throw();
  const RemoveQueueRedrivePolicyRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_removeQueueRedrivePolicy_pargs& obj);
};

typedef struct _QueueService_removeQueueRedrivePolicy_result__isset {
  _QueueService_removeQueueRedrivePolicy_result__isset() : e(false) {}
  bool e :1;
} _QueueService_removeQueueRedrivePolicy_result__isset;

class QueueService_removeQueueRedrivePolicy_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  QueueService_removeQueueRedrivePolicy_result(const QueueService_removeQueueRedrivePolicy_result&);
  QueueService_removeQueueRedrivePolicy_result& operator=(const QueueService_removeQueueRedrivePolicy_result&);
  QueueService_removeQueueRedrivePolicy_result() {
  }

  virtual ~QueueService_removeQueueRedrivePolicy_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_removeQueueRedrivePolicy_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_removeQueueRedrivePolicy_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_removeQueueRedrivePolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_removeQueueRedrivePolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_removeQueueRedrivePolicy_result& obj);
};

typedef struct _QueueService_removeQueueRedrivePolicy_presult__isset {
  _QueueService_removeQueueRedrivePolicy_presult__isset() : e(false) {}
  bool e :1;
} _QueueService_removeQueueRedrivePolicy_presult__isset;

class QueueService_removeQueueRedrivePolicy_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~QueueService_removeQueueRedrivePolicy_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_removeQueueRedrivePolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_removeQueueRedrivePolicy_presult& obj);
};

typedef struct _QueueService_setPermission_args__isset {
  _QueueService_setPermission_args__isset() : request(false) {}
  bool request :1;
} _QueueService_setPermission_args__isset;

class QueueService_setPermission_args {
 public:

  static const char* ascii_fingerprint; // = "C7BE0C35CD569E56B0727EBDC4EF11B6";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0xBE,0x0C,0x35,0xCD,0x56,0x9E,0x56,0xB0,0x72,0x7E,0xBD,0xC4,0xEF,0x11,0xB6};

  QueueService_setPermission_args(const QueueService_setPermission_args&);
  QueueService_setPermission_args& operator=(const QueueService_setPermission_args&);
  QueueService_setPermission_args() {
  }

  virtual ~QueueService_setPermission_args() throw();
  SetPermissionRequest request;

  _QueueService_setPermission_args__isset __isset;

  void __set_request(const SetPermissionRequest& val);

  bool operator == (const QueueService_setPermission_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_setPermission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_setPermission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setPermission_args& obj);
};


class QueueService_setPermission_pargs {
 public:

  static const char* ascii_fingerprint; // = "C7BE0C35CD569E56B0727EBDC4EF11B6";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0xBE,0x0C,0x35,0xCD,0x56,0x9E,0x56,0xB0,0x72,0x7E,0xBD,0xC4,0xEF,0x11,0xB6};


  virtual ~QueueService_setPermission_pargs() throw();
  const SetPermissionRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setPermission_pargs& obj);
};

typedef struct _QueueService_setPermission_result__isset {
  _QueueService_setPermission_result__isset() : e(false) {}
  bool e :1;
} _QueueService_setPermission_result__isset;

class QueueService_setPermission_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  QueueService_setPermission_result(const QueueService_setPermission_result&);
  QueueService_setPermission_result& operator=(const QueueService_setPermission_result&);
  QueueService_setPermission_result() {
  }

  virtual ~QueueService_setPermission_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_setPermission_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_setPermission_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_setPermission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_setPermission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setPermission_result& obj);
};

typedef struct _QueueService_setPermission_presult__isset {
  _QueueService_setPermission_presult__isset() : e(false) {}
  bool e :1;
} _QueueService_setPermission_presult__isset;

class QueueService_setPermission_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~QueueService_setPermission_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_setPermission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_setPermission_presult& obj);
};

typedef struct _QueueService_revokePermission_args__isset {
  _QueueService_revokePermission_args__isset() : request(false) {}
  bool request :1;
} _QueueService_revokePermission_args__isset;

class QueueService_revokePermission_args {
 public:

  static const char* ascii_fingerprint; // = "A756D3DBE614FB13F70BF7F7B6EB3D73";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x56,0xD3,0xDB,0xE6,0x14,0xFB,0x13,0xF7,0x0B,0xF7,0xF7,0xB6,0xEB,0x3D,0x73};

  QueueService_revokePermission_args(const QueueService_revokePermission_args&);
  QueueService_revokePermission_args& operator=(const QueueService_revokePermission_args&);
  QueueService_revokePermission_args() {
  }

  virtual ~QueueService_revokePermission_args() throw();
  RevokePermissionRequest request;

  _QueueService_revokePermission_args__isset __isset;

  void __set_request(const RevokePermissionRequest& val);

  bool operator == (const QueueService_revokePermission_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_revokePermission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_revokePermission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_revokePermission_args& obj);
};


class QueueService_revokePermission_pargs {
 public:

  static const char* ascii_fingerprint; // = "A756D3DBE614FB13F70BF7F7B6EB3D73";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x56,0xD3,0xDB,0xE6,0x14,0xFB,0x13,0xF7,0x0B,0xF7,0xF7,0xB6,0xEB,0x3D,0x73};


  virtual ~QueueService_revokePermission_pargs() throw();
  const RevokePermissionRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_revokePermission_pargs& obj);
};

typedef struct _QueueService_revokePermission_result__isset {
  _QueueService_revokePermission_result__isset() : e(false) {}
  bool e :1;
} _QueueService_revokePermission_result__isset;

class QueueService_revokePermission_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  QueueService_revokePermission_result(const QueueService_revokePermission_result&);
  QueueService_revokePermission_result& operator=(const QueueService_revokePermission_result&);
  QueueService_revokePermission_result() {
  }

  virtual ~QueueService_revokePermission_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_revokePermission_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_revokePermission_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_revokePermission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_revokePermission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_revokePermission_result& obj);
};

typedef struct _QueueService_revokePermission_presult__isset {
  _QueueService_revokePermission_presult__isset() : e(false) {}
  bool e :1;
} _QueueService_revokePermission_presult__isset;

class QueueService_revokePermission_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~QueueService_revokePermission_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_revokePermission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_revokePermission_presult& obj);
};

typedef struct _QueueService_queryPermission_args__isset {
  _QueueService_queryPermission_args__isset() : request(false) {}
  bool request :1;
} _QueueService_queryPermission_args__isset;

class QueueService_queryPermission_args {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  QueueService_queryPermission_args(const QueueService_queryPermission_args&);
  QueueService_queryPermission_args& operator=(const QueueService_queryPermission_args&);
  QueueService_queryPermission_args() {
  }

  virtual ~QueueService_queryPermission_args() throw();
  QueryPermissionRequest request;

  _QueueService_queryPermission_args__isset __isset;

  void __set_request(const QueryPermissionRequest& val);

  bool operator == (const QueueService_queryPermission_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_queryPermission_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_queryPermission_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryPermission_args& obj);
};


class QueueService_queryPermission_pargs {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~QueueService_queryPermission_pargs() throw();
  const QueryPermissionRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryPermission_pargs& obj);
};

typedef struct _QueueService_queryPermission_result__isset {
  _QueueService_queryPermission_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_queryPermission_result__isset;

class QueueService_queryPermission_result {
 public:

  static const char* ascii_fingerprint; // = "1274FA9365562AACBABE8BD1F15D5285";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0x74,0xFA,0x93,0x65,0x56,0x2A,0xAC,0xBA,0xBE,0x8B,0xD1,0xF1,0x5D,0x52,0x85};

  QueueService_queryPermission_result(const QueueService_queryPermission_result&);
  QueueService_queryPermission_result& operator=(const QueueService_queryPermission_result&);
  QueueService_queryPermission_result() {
  }

  virtual ~QueueService_queryPermission_result() throw();
  QueryPermissionResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_queryPermission_result__isset __isset;

  void __set_success(const QueryPermissionResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_queryPermission_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_queryPermission_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_queryPermission_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryPermission_result& obj);
};

typedef struct _QueueService_queryPermission_presult__isset {
  _QueueService_queryPermission_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_queryPermission_presult__isset;

class QueueService_queryPermission_presult {
 public:

  static const char* ascii_fingerprint; // = "1274FA9365562AACBABE8BD1F15D5285";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0x74,0xFA,0x93,0x65,0x56,0x2A,0xAC,0xBA,0xBE,0x8B,0xD1,0xF1,0x5D,0x52,0x85};


  virtual ~QueueService_queryPermission_presult() throw();
  QueryPermissionResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_queryPermission_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryPermission_presult& obj);
};

typedef struct _QueueService_queryPermissionForId_args__isset {
  _QueueService_queryPermissionForId_args__isset() : request(false) {}
  bool request :1;
} _QueueService_queryPermissionForId_args__isset;

class QueueService_queryPermissionForId_args {
 public:

  static const char* ascii_fingerprint; // = "A756D3DBE614FB13F70BF7F7B6EB3D73";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x56,0xD3,0xDB,0xE6,0x14,0xFB,0x13,0xF7,0x0B,0xF7,0xF7,0xB6,0xEB,0x3D,0x73};

  QueueService_queryPermissionForId_args(const QueueService_queryPermissionForId_args&);
  QueueService_queryPermissionForId_args& operator=(const QueueService_queryPermissionForId_args&);
  QueueService_queryPermissionForId_args() {
  }

  virtual ~QueueService_queryPermissionForId_args() throw();
  QueryPermissionForIdRequest request;

  _QueueService_queryPermissionForId_args__isset __isset;

  void __set_request(const QueryPermissionForIdRequest& val);

  bool operator == (const QueueService_queryPermissionForId_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_queryPermissionForId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_queryPermissionForId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryPermissionForId_args& obj);
};


class QueueService_queryPermissionForId_pargs {
 public:

  static const char* ascii_fingerprint; // = "A756D3DBE614FB13F70BF7F7B6EB3D73";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x56,0xD3,0xDB,0xE6,0x14,0xFB,0x13,0xF7,0x0B,0xF7,0xF7,0xB6,0xEB,0x3D,0x73};


  virtual ~QueueService_queryPermissionForId_pargs() throw();
  const QueryPermissionForIdRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryPermissionForId_pargs& obj);
};

typedef struct _QueueService_queryPermissionForId_result__isset {
  _QueueService_queryPermissionForId_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_queryPermissionForId_result__isset;

class QueueService_queryPermissionForId_result {
 public:

  static const char* ascii_fingerprint; // = "1274FA9365562AACBABE8BD1F15D5285";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0x74,0xFA,0x93,0x65,0x56,0x2A,0xAC,0xBA,0xBE,0x8B,0xD1,0xF1,0x5D,0x52,0x85};

  QueueService_queryPermissionForId_result(const QueueService_queryPermissionForId_result&);
  QueueService_queryPermissionForId_result& operator=(const QueueService_queryPermissionForId_result&);
  QueueService_queryPermissionForId_result() {
  }

  virtual ~QueueService_queryPermissionForId_result() throw();
  QueryPermissionForIdResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_queryPermissionForId_result__isset __isset;

  void __set_success(const QueryPermissionForIdResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_queryPermissionForId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_queryPermissionForId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_queryPermissionForId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryPermissionForId_result& obj);
};

typedef struct _QueueService_queryPermissionForId_presult__isset {
  _QueueService_queryPermissionForId_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_queryPermissionForId_presult__isset;

class QueueService_queryPermissionForId_presult {
 public:

  static const char* ascii_fingerprint; // = "1274FA9365562AACBABE8BD1F15D5285";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0x74,0xFA,0x93,0x65,0x56,0x2A,0xAC,0xBA,0xBE,0x8B,0xD1,0xF1,0x5D,0x52,0x85};


  virtual ~QueueService_queryPermissionForId_presult() throw();
  QueryPermissionForIdResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_queryPermissionForId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryPermissionForId_presult& obj);
};

typedef struct _QueueService_listPermissions_args__isset {
  _QueueService_listPermissions_args__isset() : request(false) {}
  bool request :1;
} _QueueService_listPermissions_args__isset;

class QueueService_listPermissions_args {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  QueueService_listPermissions_args(const QueueService_listPermissions_args&);
  QueueService_listPermissions_args& operator=(const QueueService_listPermissions_args&);
  QueueService_listPermissions_args() {
  }

  virtual ~QueueService_listPermissions_args() throw();
  ListPermissionsRequest request;

  _QueueService_listPermissions_args__isset __isset;

  void __set_request(const ListPermissionsRequest& val);

  bool operator == (const QueueService_listPermissions_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_listPermissions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_listPermissions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_listPermissions_args& obj);
};


class QueueService_listPermissions_pargs {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~QueueService_listPermissions_pargs() throw();
  const ListPermissionsRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_listPermissions_pargs& obj);
};

typedef struct _QueueService_listPermissions_result__isset {
  _QueueService_listPermissions_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_listPermissions_result__isset;

class QueueService_listPermissions_result {
 public:

  static const char* ascii_fingerprint; // = "F27ED5B839439D9CF34C47A6EAA8A513";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0x7E,0xD5,0xB8,0x39,0x43,0x9D,0x9C,0xF3,0x4C,0x47,0xA6,0xEA,0xA8,0xA5,0x13};

  QueueService_listPermissions_result(const QueueService_listPermissions_result&);
  QueueService_listPermissions_result& operator=(const QueueService_listPermissions_result&);
  QueueService_listPermissions_result() {
  }

  virtual ~QueueService_listPermissions_result() throw();
  ListPermissionsResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_listPermissions_result__isset __isset;

  void __set_success(const ListPermissionsResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_listPermissions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_listPermissions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_listPermissions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_listPermissions_result& obj);
};

typedef struct _QueueService_listPermissions_presult__isset {
  _QueueService_listPermissions_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_listPermissions_presult__isset;

class QueueService_listPermissions_presult {
 public:

  static const char* ascii_fingerprint; // = "F27ED5B839439D9CF34C47A6EAA8A513";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0x7E,0xD5,0xB8,0x39,0x43,0x9D,0x9C,0xF3,0x4C,0x47,0xA6,0xEA,0xA8,0xA5,0x13};


  virtual ~QueueService_listPermissions_presult() throw();
  ListPermissionsResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_listPermissions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_listPermissions_presult& obj);
};

typedef struct _QueueService_createTag_args__isset {
  _QueueService_createTag_args__isset() : request(false) {}
  bool request :1;
} _QueueService_createTag_args__isset;

class QueueService_createTag_args {
 public:

  static const char* ascii_fingerprint; // = "68E0AFCA4A73FB2554946B61297697BE";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0xE0,0xAF,0xCA,0x4A,0x73,0xFB,0x25,0x54,0x94,0x6B,0x61,0x29,0x76,0x97,0xBE};

  QueueService_createTag_args(const QueueService_createTag_args&);
  QueueService_createTag_args& operator=(const QueueService_createTag_args&);
  QueueService_createTag_args() {
  }

  virtual ~QueueService_createTag_args() throw();
  CreateTagRequest request;

  _QueueService_createTag_args__isset __isset;

  void __set_request(const CreateTagRequest& val);

  bool operator == (const QueueService_createTag_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_createTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_createTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_createTag_args& obj);
};


class QueueService_createTag_pargs {
 public:

  static const char* ascii_fingerprint; // = "68E0AFCA4A73FB2554946B61297697BE";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0xE0,0xAF,0xCA,0x4A,0x73,0xFB,0x25,0x54,0x94,0x6B,0x61,0x29,0x76,0x97,0xBE};


  virtual ~QueueService_createTag_pargs() throw();
  const CreateTagRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_createTag_pargs& obj);
};

typedef struct _QueueService_createTag_result__isset {
  _QueueService_createTag_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_createTag_result__isset;

class QueueService_createTag_result {
 public:

  static const char* ascii_fingerprint; // = "B9D4F1833E6C9E1CC1C398F2D3C1FD44";
  static const uint8_t binary_fingerprint[16]; // = {0xB9,0xD4,0xF1,0x83,0x3E,0x6C,0x9E,0x1C,0xC1,0xC3,0x98,0xF2,0xD3,0xC1,0xFD,0x44};

  QueueService_createTag_result(const QueueService_createTag_result&);
  QueueService_createTag_result& operator=(const QueueService_createTag_result&);
  QueueService_createTag_result() {
  }

  virtual ~QueueService_createTag_result() throw();
  CreateTagResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_createTag_result__isset __isset;

  void __set_success(const CreateTagResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_createTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_createTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_createTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_createTag_result& obj);
};

typedef struct _QueueService_createTag_presult__isset {
  _QueueService_createTag_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_createTag_presult__isset;

class QueueService_createTag_presult {
 public:

  static const char* ascii_fingerprint; // = "B9D4F1833E6C9E1CC1C398F2D3C1FD44";
  static const uint8_t binary_fingerprint[16]; // = {0xB9,0xD4,0xF1,0x83,0x3E,0x6C,0x9E,0x1C,0xC1,0xC3,0x98,0xF2,0xD3,0xC1,0xFD,0x44};


  virtual ~QueueService_createTag_presult() throw();
  CreateTagResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_createTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_createTag_presult& obj);
};

typedef struct _QueueService_deleteTag_args__isset {
  _QueueService_deleteTag_args__isset() : request(false) {}
  bool request :1;
} _QueueService_deleteTag_args__isset;

class QueueService_deleteTag_args {
 public:

  static const char* ascii_fingerprint; // = "A756D3DBE614FB13F70BF7F7B6EB3D73";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x56,0xD3,0xDB,0xE6,0x14,0xFB,0x13,0xF7,0x0B,0xF7,0xF7,0xB6,0xEB,0x3D,0x73};

  QueueService_deleteTag_args(const QueueService_deleteTag_args&);
  QueueService_deleteTag_args& operator=(const QueueService_deleteTag_args&);
  QueueService_deleteTag_args() {
  }

  virtual ~QueueService_deleteTag_args() throw();
  DeleteTagRequest request;

  _QueueService_deleteTag_args__isset __isset;

  void __set_request(const DeleteTagRequest& val);

  bool operator == (const QueueService_deleteTag_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_deleteTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_deleteTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_deleteTag_args& obj);
};


class QueueService_deleteTag_pargs {
 public:

  static const char* ascii_fingerprint; // = "A756D3DBE614FB13F70BF7F7B6EB3D73";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x56,0xD3,0xDB,0xE6,0x14,0xFB,0x13,0xF7,0x0B,0xF7,0xF7,0xB6,0xEB,0x3D,0x73};


  virtual ~QueueService_deleteTag_pargs() throw();
  const DeleteTagRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_deleteTag_pargs& obj);
};

typedef struct _QueueService_deleteTag_result__isset {
  _QueueService_deleteTag_result__isset() : e(false) {}
  bool e :1;
} _QueueService_deleteTag_result__isset;

class QueueService_deleteTag_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  QueueService_deleteTag_result(const QueueService_deleteTag_result&);
  QueueService_deleteTag_result& operator=(const QueueService_deleteTag_result&);
  QueueService_deleteTag_result() {
  }

  virtual ~QueueService_deleteTag_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_deleteTag_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_deleteTag_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_deleteTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_deleteTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_deleteTag_result& obj);
};

typedef struct _QueueService_deleteTag_presult__isset {
  _QueueService_deleteTag_presult__isset() : e(false) {}
  bool e :1;
} _QueueService_deleteTag_presult__isset;

class QueueService_deleteTag_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~QueueService_deleteTag_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_deleteTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_deleteTag_presult& obj);
};

typedef struct _QueueService_getTagInfo_args__isset {
  _QueueService_getTagInfo_args__isset() : request(false) {}
  bool request :1;
} _QueueService_getTagInfo_args__isset;

class QueueService_getTagInfo_args {
 public:

  static const char* ascii_fingerprint; // = "EFF88FC43ADB539A8BDEFB83AC2241F4";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xF8,0x8F,0xC4,0x3A,0xDB,0x53,0x9A,0x8B,0xDE,0xFB,0x83,0xAC,0x22,0x41,0xF4};

  QueueService_getTagInfo_args(const QueueService_getTagInfo_args&);
  QueueService_getTagInfo_args& operator=(const QueueService_getTagInfo_args&);
  QueueService_getTagInfo_args() {
  }

  virtual ~QueueService_getTagInfo_args() throw();
  GetTagInfoRequest request;

  _QueueService_getTagInfo_args__isset __isset;

  void __set_request(const GetTagInfoRequest& val);

  bool operator == (const QueueService_getTagInfo_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_getTagInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_getTagInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_getTagInfo_args& obj);
};


class QueueService_getTagInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFF88FC43ADB539A8BDEFB83AC2241F4";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xF8,0x8F,0xC4,0x3A,0xDB,0x53,0x9A,0x8B,0xDE,0xFB,0x83,0xAC,0x22,0x41,0xF4};


  virtual ~QueueService_getTagInfo_pargs() throw();
  const GetTagInfoRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_getTagInfo_pargs& obj);
};

typedef struct _QueueService_getTagInfo_result__isset {
  _QueueService_getTagInfo_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_getTagInfo_result__isset;

class QueueService_getTagInfo_result {
 public:

  static const char* ascii_fingerprint; // = "3FCBD582B0C017A5DC62BB070A62612D";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0xCB,0xD5,0x82,0xB0,0xC0,0x17,0xA5,0xDC,0x62,0xBB,0x07,0x0A,0x62,0x61,0x2D};

  QueueService_getTagInfo_result(const QueueService_getTagInfo_result&);
  QueueService_getTagInfo_result& operator=(const QueueService_getTagInfo_result&);
  QueueService_getTagInfo_result() {
  }

  virtual ~QueueService_getTagInfo_result() throw();
  GetTagInfoResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_getTagInfo_result__isset __isset;

  void __set_success(const GetTagInfoResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_getTagInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_getTagInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_getTagInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_getTagInfo_result& obj);
};

typedef struct _QueueService_getTagInfo_presult__isset {
  _QueueService_getTagInfo_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_getTagInfo_presult__isset;

class QueueService_getTagInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "3FCBD582B0C017A5DC62BB070A62612D";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0xCB,0xD5,0x82,0xB0,0xC0,0x17,0xA5,0xDC,0x62,0xBB,0x07,0x0A,0x62,0x61,0x2D};


  virtual ~QueueService_getTagInfo_presult() throw();
  GetTagInfoResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_getTagInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_getTagInfo_presult& obj);
};

typedef struct _QueueService_listTag_args__isset {
  _QueueService_listTag_args__isset() : request(false) {}
  bool request :1;
} _QueueService_listTag_args__isset;

class QueueService_listTag_args {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  QueueService_listTag_args(const QueueService_listTag_args&);
  QueueService_listTag_args& operator=(const QueueService_listTag_args&);
  QueueService_listTag_args() {
  }

  virtual ~QueueService_listTag_args() throw();
  ListTagRequest request;

  _QueueService_listTag_args__isset __isset;

  void __set_request(const ListTagRequest& val);

  bool operator == (const QueueService_listTag_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_listTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_listTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_listTag_args& obj);
};


class QueueService_listTag_pargs {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~QueueService_listTag_pargs() throw();
  const ListTagRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_listTag_pargs& obj);
};

typedef struct _QueueService_listTag_result__isset {
  _QueueService_listTag_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_listTag_result__isset;

class QueueService_listTag_result {
 public:

  static const char* ascii_fingerprint; // = "96A80B6F2A7775AAA0190A238514038E";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0xA8,0x0B,0x6F,0x2A,0x77,0x75,0xAA,0xA0,0x19,0x0A,0x23,0x85,0x14,0x03,0x8E};

  QueueService_listTag_result(const QueueService_listTag_result&);
  QueueService_listTag_result& operator=(const QueueService_listTag_result&);
  QueueService_listTag_result() {
  }

  virtual ~QueueService_listTag_result() throw();
  ListTagResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_listTag_result__isset __isset;

  void __set_success(const ListTagResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_listTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_listTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_listTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_listTag_result& obj);
};

typedef struct _QueueService_listTag_presult__isset {
  _QueueService_listTag_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_listTag_presult__isset;

class QueueService_listTag_presult {
 public:

  static const char* ascii_fingerprint; // = "96A80B6F2A7775AAA0190A238514038E";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0xA8,0x0B,0x6F,0x2A,0x77,0x75,0xAA,0xA0,0x19,0x0A,0x23,0x85,0x14,0x03,0x8E};


  virtual ~QueueService_listTag_presult() throw();
  ListTagResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_listTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_listTag_presult& obj);
};

typedef struct _QueueService_queryMetric_args__isset {
  _QueueService_queryMetric_args__isset() : request(false) {}
  bool request :1;
} _QueueService_queryMetric_args__isset;

class QueueService_queryMetric_args {
 public:

  static const char* ascii_fingerprint; // = "E5D7CB36EE6F6D076036494353CE90C1";
  static const uint8_t binary_fingerprint[16]; // = {0xE5,0xD7,0xCB,0x36,0xEE,0x6F,0x6D,0x07,0x60,0x36,0x49,0x43,0x53,0xCE,0x90,0xC1};

  QueueService_queryMetric_args(const QueueService_queryMetric_args&);
  QueueService_queryMetric_args& operator=(const QueueService_queryMetric_args&);
  QueueService_queryMetric_args() {
  }

  virtual ~QueueService_queryMetric_args() throw();
  QueryMetricRequest request;

  _QueueService_queryMetric_args__isset __isset;

  void __set_request(const QueryMetricRequest& val);

  bool operator == (const QueueService_queryMetric_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_queryMetric_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_queryMetric_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryMetric_args& obj);
};


class QueueService_queryMetric_pargs {
 public:

  static const char* ascii_fingerprint; // = "E5D7CB36EE6F6D076036494353CE90C1";
  static const uint8_t binary_fingerprint[16]; // = {0xE5,0xD7,0xCB,0x36,0xEE,0x6F,0x6D,0x07,0x60,0x36,0x49,0x43,0x53,0xCE,0x90,0xC1};


  virtual ~QueueService_queryMetric_pargs() throw();
  const QueryMetricRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryMetric_pargs& obj);
};

typedef struct _QueueService_queryMetric_result__isset {
  _QueueService_queryMetric_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_queryMetric_result__isset;

class QueueService_queryMetric_result {
 public:

  static const char* ascii_fingerprint; // = "93A69E0268B23A2C0635133AACB4FE0F";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0xA6,0x9E,0x02,0x68,0xB2,0x3A,0x2C,0x06,0x35,0x13,0x3A,0xAC,0xB4,0xFE,0x0F};

  QueueService_queryMetric_result(const QueueService_queryMetric_result&);
  QueueService_queryMetric_result& operator=(const QueueService_queryMetric_result&);
  QueueService_queryMetric_result() {
  }

  virtual ~QueueService_queryMetric_result() throw();
  TimeSeriesData success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_queryMetric_result__isset __isset;

  void __set_success(const TimeSeriesData& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_queryMetric_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_queryMetric_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_queryMetric_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryMetric_result& obj);
};

typedef struct _QueueService_queryMetric_presult__isset {
  _QueueService_queryMetric_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_queryMetric_presult__isset;

class QueueService_queryMetric_presult {
 public:

  static const char* ascii_fingerprint; // = "93A69E0268B23A2C0635133AACB4FE0F";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0xA6,0x9E,0x02,0x68,0xB2,0x3A,0x2C,0x06,0x35,0x13,0x3A,0xAC,0xB4,0xFE,0x0F};


  virtual ~QueueService_queryMetric_presult() throw();
  TimeSeriesData* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_queryMetric_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryMetric_presult& obj);
};

typedef struct _QueueService_queryPrivilegedQueue_args__isset {
  _QueueService_queryPrivilegedQueue_args__isset() : request(false) {}
  bool request :1;
} _QueueService_queryPrivilegedQueue_args__isset;

class QueueService_queryPrivilegedQueue_args {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  QueueService_queryPrivilegedQueue_args(const QueueService_queryPrivilegedQueue_args&);
  QueueService_queryPrivilegedQueue_args& operator=(const QueueService_queryPrivilegedQueue_args&);
  QueueService_queryPrivilegedQueue_args() {
  }

  virtual ~QueueService_queryPrivilegedQueue_args() throw();
  QueryPrivilegedQueueRequest request;

  _QueueService_queryPrivilegedQueue_args__isset __isset;

  void __set_request(const QueryPrivilegedQueueRequest& val);

  bool operator == (const QueueService_queryPrivilegedQueue_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_queryPrivilegedQueue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_queryPrivilegedQueue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryPrivilegedQueue_args& obj);
};


class QueueService_queryPrivilegedQueue_pargs {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~QueueService_queryPrivilegedQueue_pargs() throw();
  const QueryPrivilegedQueueRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryPrivilegedQueue_pargs& obj);
};

typedef struct _QueueService_queryPrivilegedQueue_result__isset {
  _QueueService_queryPrivilegedQueue_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_queryPrivilegedQueue_result__isset;

class QueueService_queryPrivilegedQueue_result {
 public:

  static const char* ascii_fingerprint; // = "E6F269D39889E705506CC48A80573CDF";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0xF2,0x69,0xD3,0x98,0x89,0xE7,0x05,0x50,0x6C,0xC4,0x8A,0x80,0x57,0x3C,0xDF};

  QueueService_queryPrivilegedQueue_result(const QueueService_queryPrivilegedQueue_result&);
  QueueService_queryPrivilegedQueue_result& operator=(const QueueService_queryPrivilegedQueue_result&);
  QueueService_queryPrivilegedQueue_result() {
  }

  virtual ~QueueService_queryPrivilegedQueue_result() throw();
  QueryPrivilegedQueueResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_queryPrivilegedQueue_result__isset __isset;

  void __set_success(const QueryPrivilegedQueueResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_queryPrivilegedQueue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_queryPrivilegedQueue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_queryPrivilegedQueue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryPrivilegedQueue_result& obj);
};

typedef struct _QueueService_queryPrivilegedQueue_presult__isset {
  _QueueService_queryPrivilegedQueue_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_queryPrivilegedQueue_presult__isset;

class QueueService_queryPrivilegedQueue_presult {
 public:

  static const char* ascii_fingerprint; // = "E6F269D39889E705506CC48A80573CDF";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0xF2,0x69,0xD3,0x98,0x89,0xE7,0x05,0x50,0x6C,0xC4,0x8A,0x80,0x57,0x3C,0xDF};


  virtual ~QueueService_queryPrivilegedQueue_presult() throw();
  QueryPrivilegedQueueResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_queryPrivilegedQueue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_queryPrivilegedQueue_presult& obj);
};


class QueueService_verifyEMQAdmin_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  QueueService_verifyEMQAdmin_args(const QueueService_verifyEMQAdmin_args&);
  QueueService_verifyEMQAdmin_args& operator=(const QueueService_verifyEMQAdmin_args&);
  QueueService_verifyEMQAdmin_args() {
  }

  virtual ~QueueService_verifyEMQAdmin_args() throw();

  bool operator == (const QueueService_verifyEMQAdmin_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const QueueService_verifyEMQAdmin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_verifyEMQAdmin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_verifyEMQAdmin_args& obj);
};


class QueueService_verifyEMQAdmin_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~QueueService_verifyEMQAdmin_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_verifyEMQAdmin_pargs& obj);
};

typedef struct _QueueService_verifyEMQAdmin_result__isset {
  _QueueService_verifyEMQAdmin_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_verifyEMQAdmin_result__isset;

class QueueService_verifyEMQAdmin_result {
 public:

  static const char* ascii_fingerprint; // = "788A31210404B8BAC204F20369DEBB45";
  static const uint8_t binary_fingerprint[16]; // = {0x78,0x8A,0x31,0x21,0x04,0x04,0xB8,0xBA,0xC2,0x04,0xF2,0x03,0x69,0xDE,0xBB,0x45};

  QueueService_verifyEMQAdmin_result(const QueueService_verifyEMQAdmin_result&);
  QueueService_verifyEMQAdmin_result& operator=(const QueueService_verifyEMQAdmin_result&);
  QueueService_verifyEMQAdmin_result() {
  }

  virtual ~QueueService_verifyEMQAdmin_result() throw();
  VerifyEMQAdminResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_verifyEMQAdmin_result__isset __isset;

  void __set_success(const VerifyEMQAdminResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_verifyEMQAdmin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_verifyEMQAdmin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_verifyEMQAdmin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_verifyEMQAdmin_result& obj);
};

typedef struct _QueueService_verifyEMQAdmin_presult__isset {
  _QueueService_verifyEMQAdmin_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_verifyEMQAdmin_presult__isset;

class QueueService_verifyEMQAdmin_presult {
 public:

  static const char* ascii_fingerprint; // = "788A31210404B8BAC204F20369DEBB45";
  static const uint8_t binary_fingerprint[16]; // = {0x78,0x8A,0x31,0x21,0x04,0x04,0xB8,0xBA,0xC2,0x04,0xF2,0x03,0x69,0xDE,0xBB,0x45};


  virtual ~QueueService_verifyEMQAdmin_presult() throw();
  VerifyEMQAdminResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_verifyEMQAdmin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_verifyEMQAdmin_presult& obj);
};

typedef struct _QueueService_verifyEMQAdminRole_args__isset {
  _QueueService_verifyEMQAdminRole_args__isset() : request(false) {}
  bool request :1;
} _QueueService_verifyEMQAdminRole_args__isset;

class QueueService_verifyEMQAdminRole_args {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  QueueService_verifyEMQAdminRole_args(const QueueService_verifyEMQAdminRole_args&);
  QueueService_verifyEMQAdminRole_args& operator=(const QueueService_verifyEMQAdminRole_args&);
  QueueService_verifyEMQAdminRole_args() {
  }

  virtual ~QueueService_verifyEMQAdminRole_args() throw();
  VerifyEMQAdminRoleRequest request;

  _QueueService_verifyEMQAdminRole_args__isset __isset;

  void __set_request(const VerifyEMQAdminRoleRequest& val);

  bool operator == (const QueueService_verifyEMQAdminRole_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_verifyEMQAdminRole_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_verifyEMQAdminRole_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_verifyEMQAdminRole_args& obj);
};


class QueueService_verifyEMQAdminRole_pargs {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~QueueService_verifyEMQAdminRole_pargs() throw();
  const VerifyEMQAdminRoleRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_verifyEMQAdminRole_pargs& obj);
};

typedef struct _QueueService_verifyEMQAdminRole_result__isset {
  _QueueService_verifyEMQAdminRole_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_verifyEMQAdminRole_result__isset;

class QueueService_verifyEMQAdminRole_result {
 public:

  static const char* ascii_fingerprint; // = "5F525E1F18606E3AE287FC32E3BD8C36";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x52,0x5E,0x1F,0x18,0x60,0x6E,0x3A,0xE2,0x87,0xFC,0x32,0xE3,0xBD,0x8C,0x36};

  QueueService_verifyEMQAdminRole_result(const QueueService_verifyEMQAdminRole_result&);
  QueueService_verifyEMQAdminRole_result& operator=(const QueueService_verifyEMQAdminRole_result&);
  QueueService_verifyEMQAdminRole_result() {
  }

  virtual ~QueueService_verifyEMQAdminRole_result() throw();
  VerifyEMQAdminRoleResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_verifyEMQAdminRole_result__isset __isset;

  void __set_success(const VerifyEMQAdminRoleResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_verifyEMQAdminRole_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_verifyEMQAdminRole_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_verifyEMQAdminRole_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_verifyEMQAdminRole_result& obj);
};

typedef struct _QueueService_verifyEMQAdminRole_presult__isset {
  _QueueService_verifyEMQAdminRole_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_verifyEMQAdminRole_presult__isset;

class QueueService_verifyEMQAdminRole_presult {
 public:

  static const char* ascii_fingerprint; // = "5F525E1F18606E3AE287FC32E3BD8C36";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x52,0x5E,0x1F,0x18,0x60,0x6E,0x3A,0xE2,0x87,0xFC,0x32,0xE3,0xBD,0x8C,0x36};


  virtual ~QueueService_verifyEMQAdminRole_presult() throw();
  VerifyEMQAdminRoleResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_verifyEMQAdminRole_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_verifyEMQAdminRole_presult& obj);
};

typedef struct _QueueService_copyQueue_args__isset {
  _QueueService_copyQueue_args__isset() : request(false) {}
  bool request :1;
} _QueueService_copyQueue_args__isset;

class QueueService_copyQueue_args {
 public:

  static const char* ascii_fingerprint; // = "EDE927241751F0D34709B7DB50A0F3B4";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0xE9,0x27,0x24,0x17,0x51,0xF0,0xD3,0x47,0x09,0xB7,0xDB,0x50,0xA0,0xF3,0xB4};

  QueueService_copyQueue_args(const QueueService_copyQueue_args&);
  QueueService_copyQueue_args& operator=(const QueueService_copyQueue_args&);
  QueueService_copyQueue_args() {
  }

  virtual ~QueueService_copyQueue_args() throw();
  CopyQueueRequest request;

  _QueueService_copyQueue_args__isset __isset;

  void __set_request(const CopyQueueRequest& val);

  bool operator == (const QueueService_copyQueue_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const QueueService_copyQueue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_copyQueue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_copyQueue_args& obj);
};


class QueueService_copyQueue_pargs {
 public:

  static const char* ascii_fingerprint; // = "EDE927241751F0D34709B7DB50A0F3B4";
  static const uint8_t binary_fingerprint[16]; // = {0xED,0xE9,0x27,0x24,0x17,0x51,0xF0,0xD3,0x47,0x09,0xB7,0xDB,0x50,0xA0,0xF3,0xB4};


  virtual ~QueueService_copyQueue_pargs() throw();
  const CopyQueueRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_copyQueue_pargs& obj);
};

typedef struct _QueueService_copyQueue_result__isset {
  _QueueService_copyQueue_result__isset() : e(false) {}
  bool e :1;
} _QueueService_copyQueue_result__isset;

class QueueService_copyQueue_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  QueueService_copyQueue_result(const QueueService_copyQueue_result&);
  QueueService_copyQueue_result& operator=(const QueueService_copyQueue_result&);
  QueueService_copyQueue_result() {
  }

  virtual ~QueueService_copyQueue_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_copyQueue_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_copyQueue_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_copyQueue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_copyQueue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_copyQueue_result& obj);
};

typedef struct _QueueService_copyQueue_presult__isset {
  _QueueService_copyQueue_presult__isset() : e(false) {}
  bool e :1;
} _QueueService_copyQueue_presult__isset;

class QueueService_copyQueue_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~QueueService_copyQueue_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_copyQueue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_copyQueue_presult& obj);
};

typedef struct _QueueService_getQueueMeta_args__isset {
  _QueueService_getQueueMeta_args__isset() : queueName(false) {}
  bool queueName :1;
} _QueueService_getQueueMeta_args__isset;

class QueueService_getQueueMeta_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  QueueService_getQueueMeta_args(const QueueService_getQueueMeta_args&);
  QueueService_getQueueMeta_args& operator=(const QueueService_getQueueMeta_args&);
  QueueService_getQueueMeta_args() : queueName() {
  }

  virtual ~QueueService_getQueueMeta_args() throw();
  std::string queueName;

  _QueueService_getQueueMeta_args__isset __isset;

  void __set_queueName(const std::string& val);

  bool operator == (const QueueService_getQueueMeta_args & rhs) const
  {
    if (!(queueName == rhs.queueName))
      return false;
    return true;
  }
  bool operator != (const QueueService_getQueueMeta_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_getQueueMeta_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_getQueueMeta_args& obj);
};


class QueueService_getQueueMeta_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~QueueService_getQueueMeta_pargs() throw();
  const std::string* queueName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_getQueueMeta_pargs& obj);
};

typedef struct _QueueService_getQueueMeta_result__isset {
  _QueueService_getQueueMeta_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_getQueueMeta_result__isset;

class QueueService_getQueueMeta_result {
 public:

  static const char* ascii_fingerprint; // = "5AE685A1C7824D861666DF9561E7C189";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0xE6,0x85,0xA1,0xC7,0x82,0x4D,0x86,0x16,0x66,0xDF,0x95,0x61,0xE7,0xC1,0x89};

  QueueService_getQueueMeta_result(const QueueService_getQueueMeta_result&);
  QueueService_getQueueMeta_result& operator=(const QueueService_getQueueMeta_result&);
  QueueService_getQueueMeta_result() {
  }

  virtual ~QueueService_getQueueMeta_result() throw();
  GetQueueMetaResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_getQueueMeta_result__isset __isset;

  void __set_success(const GetQueueMetaResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const QueueService_getQueueMeta_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const QueueService_getQueueMeta_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueueService_getQueueMeta_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QueueService_getQueueMeta_result& obj);
};

typedef struct _QueueService_getQueueMeta_presult__isset {
  _QueueService_getQueueMeta_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _QueueService_getQueueMeta_presult__isset;

class QueueService_getQueueMeta_presult {
 public:

  static const char* ascii_fingerprint; // = "5AE685A1C7824D861666DF9561E7C189";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0xE6,0x85,0xA1,0xC7,0x82,0x4D,0x86,0x16,0x66,0xDF,0x95,0x61,0xE7,0xC1,0x89};


  virtual ~QueueService_getQueueMeta_presult() throw();
  GetQueueMetaResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _QueueService_getQueueMeta_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const QueueService_getQueueMeta_presult& obj);
};

class QueueServiceClient : virtual public QueueServiceIf, public  ::emq::common::EMQBaseServiceClient {
 public:
  QueueServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::emq::common::EMQBaseServiceClient(prot, prot) {}
  QueueServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::emq::common::EMQBaseServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createQueue(CreateQueueResponse& _return, const CreateQueueRequest& request);
  void send_createQueue(const CreateQueueRequest& request);
  void recv_createQueue(CreateQueueResponse& _return);
  void deleteQueue(const DeleteQueueRequest& request);
  void send_deleteQueue(const DeleteQueueRequest& request);
  void recv_deleteQueue();
  void purgeQueue(const PurgeQueueRequest& request);
  void send_purgeQueue(const PurgeQueueRequest& request);
  void recv_purgeQueue();
  void setQueueAttribute(SetQueueAttributesResponse& _return, const SetQueueAttributesRequest& request);
  void send_setQueueAttribute(const SetQueueAttributesRequest& request);
  void recv_setQueueAttribute(SetQueueAttributesResponse& _return);
  void setQueueQuota(SetQueueQuotaResponse& _return, const SetQueueQuotaRequest& request);
  void send_setQueueQuota(const SetQueueQuotaRequest& request);
  void recv_setQueueQuota(SetQueueQuotaResponse& _return);
  void getQueueInfo(GetQueueInfoResponse& _return, const GetQueueInfoRequest& request);
  void send_getQueueInfo(const GetQueueInfoRequest& request);
  void recv_getQueueInfo(GetQueueInfoResponse& _return);
  void listQueue(ListQueueResponse& _return, const ListQueueRequest& request);
  void send_listQueue(const ListQueueRequest& request);
  void recv_listQueue(ListQueueResponse& _return);
  void setQueueRedrivePolicy(SetQueueRedrivePolicyResponse& _return, const SetQueueRedrivePolicyRequest& request);
  void send_setQueueRedrivePolicy(const SetQueueRedrivePolicyRequest& request);
  void recv_setQueueRedrivePolicy(SetQueueRedrivePolicyResponse& _return);
  void removeQueueRedrivePolicy(const RemoveQueueRedrivePolicyRequest& request);
  void send_removeQueueRedrivePolicy(const RemoveQueueRedrivePolicyRequest& request);
  void recv_removeQueueRedrivePolicy();
  void setPermission(const SetPermissionRequest& request);
  void send_setPermission(const SetPermissionRequest& request);
  void recv_setPermission();
  void revokePermission(const RevokePermissionRequest& request);
  void send_revokePermission(const RevokePermissionRequest& request);
  void recv_revokePermission();
  void queryPermission(QueryPermissionResponse& _return, const QueryPermissionRequest& request);
  void send_queryPermission(const QueryPermissionRequest& request);
  void recv_queryPermission(QueryPermissionResponse& _return);
  void queryPermissionForId(QueryPermissionForIdResponse& _return, const QueryPermissionForIdRequest& request);
  void send_queryPermissionForId(const QueryPermissionForIdRequest& request);
  void recv_queryPermissionForId(QueryPermissionForIdResponse& _return);
  void listPermissions(ListPermissionsResponse& _return, const ListPermissionsRequest& request);
  void send_listPermissions(const ListPermissionsRequest& request);
  void recv_listPermissions(ListPermissionsResponse& _return);
  void createTag(CreateTagResponse& _return, const CreateTagRequest& request);
  void send_createTag(const CreateTagRequest& request);
  void recv_createTag(CreateTagResponse& _return);
  void deleteTag(const DeleteTagRequest& request);
  void send_deleteTag(const DeleteTagRequest& request);
  void recv_deleteTag();
  void getTagInfo(GetTagInfoResponse& _return, const GetTagInfoRequest& request);
  void send_getTagInfo(const GetTagInfoRequest& request);
  void recv_getTagInfo(GetTagInfoResponse& _return);
  void listTag(ListTagResponse& _return, const ListTagRequest& request);
  void send_listTag(const ListTagRequest& request);
  void recv_listTag(ListTagResponse& _return);
  void queryMetric(TimeSeriesData& _return, const QueryMetricRequest& request);
  void send_queryMetric(const QueryMetricRequest& request);
  void recv_queryMetric(TimeSeriesData& _return);
  void queryPrivilegedQueue(QueryPrivilegedQueueResponse& _return, const QueryPrivilegedQueueRequest& request);
  void send_queryPrivilegedQueue(const QueryPrivilegedQueueRequest& request);
  void recv_queryPrivilegedQueue(QueryPrivilegedQueueResponse& _return);
  void verifyEMQAdmin(VerifyEMQAdminResponse& _return);
  void send_verifyEMQAdmin();
  void recv_verifyEMQAdmin(VerifyEMQAdminResponse& _return);
  void verifyEMQAdminRole(VerifyEMQAdminRoleResponse& _return, const VerifyEMQAdminRoleRequest& request);
  void send_verifyEMQAdminRole(const VerifyEMQAdminRoleRequest& request);
  void recv_verifyEMQAdminRole(VerifyEMQAdminRoleResponse& _return);
  void copyQueue(const CopyQueueRequest& request);
  void send_copyQueue(const CopyQueueRequest& request);
  void recv_copyQueue();
  void getQueueMeta(GetQueueMetaResponse& _return, const std::string& queueName);
  void send_getQueueMeta(const std::string& queueName);
  void recv_getQueueMeta(GetQueueMetaResponse& _return);
};

class QueueServiceProcessor : public  ::emq::common::EMQBaseServiceProcessor {
 protected:
  boost::shared_ptr<QueueServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (QueueServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createQueue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteQueue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_purgeQueue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setQueueAttribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setQueueQuota(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getQueueInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listQueue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setQueueRedrivePolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeQueueRedrivePolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setPermission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_revokePermission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryPermission(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryPermissionForId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listPermissions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTagInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryMetric(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryPrivilegedQueue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verifyEMQAdmin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verifyEMQAdminRole(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_copyQueue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getQueueMeta(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  QueueServiceProcessor(boost::shared_ptr<QueueServiceIf> iface) :
     ::emq::common::EMQBaseServiceProcessor(iface),
    iface_(iface) {
    processMap_["createQueue"] = &QueueServiceProcessor::process_createQueue;
    processMap_["deleteQueue"] = &QueueServiceProcessor::process_deleteQueue;
    processMap_["purgeQueue"] = &QueueServiceProcessor::process_purgeQueue;
    processMap_["setQueueAttribute"] = &QueueServiceProcessor::process_setQueueAttribute;
    processMap_["setQueueQuota"] = &QueueServiceProcessor::process_setQueueQuota;
    processMap_["getQueueInfo"] = &QueueServiceProcessor::process_getQueueInfo;
    processMap_["listQueue"] = &QueueServiceProcessor::process_listQueue;
    processMap_["setQueueRedrivePolicy"] = &QueueServiceProcessor::process_setQueueRedrivePolicy;
    processMap_["removeQueueRedrivePolicy"] = &QueueServiceProcessor::process_removeQueueRedrivePolicy;
    processMap_["setPermission"] = &QueueServiceProcessor::process_setPermission;
    processMap_["revokePermission"] = &QueueServiceProcessor::process_revokePermission;
    processMap_["queryPermission"] = &QueueServiceProcessor::process_queryPermission;
    processMap_["queryPermissionForId"] = &QueueServiceProcessor::process_queryPermissionForId;
    processMap_["listPermissions"] = &QueueServiceProcessor::process_listPermissions;
    processMap_["createTag"] = &QueueServiceProcessor::process_createTag;
    processMap_["deleteTag"] = &QueueServiceProcessor::process_deleteTag;
    processMap_["getTagInfo"] = &QueueServiceProcessor::process_getTagInfo;
    processMap_["listTag"] = &QueueServiceProcessor::process_listTag;
    processMap_["queryMetric"] = &QueueServiceProcessor::process_queryMetric;
    processMap_["queryPrivilegedQueue"] = &QueueServiceProcessor::process_queryPrivilegedQueue;
    processMap_["verifyEMQAdmin"] = &QueueServiceProcessor::process_verifyEMQAdmin;
    processMap_["verifyEMQAdminRole"] = &QueueServiceProcessor::process_verifyEMQAdminRole;
    processMap_["copyQueue"] = &QueueServiceProcessor::process_copyQueue;
    processMap_["getQueueMeta"] = &QueueServiceProcessor::process_getQueueMeta;
  }

  virtual ~QueueServiceProcessor() {}
};

class QueueServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  QueueServiceProcessorFactory(const ::boost::shared_ptr< QueueServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< QueueServiceIfFactory > handlerFactory_;
};

class QueueServiceMultiface : virtual public QueueServiceIf, public  ::emq::common::EMQBaseServiceMultiface {
 public:
  QueueServiceMultiface(std::vector<boost::shared_ptr<QueueServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<QueueServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::emq::common::EMQBaseServiceMultiface::add(*iter);
    }
  }
  virtual ~QueueServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<QueueServiceIf> > ifaces_;
  QueueServiceMultiface() {}
  void add(boost::shared_ptr<QueueServiceIf> iface) {
     ::emq::common::EMQBaseServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void createQueue(CreateQueueResponse& _return, const CreateQueueRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createQueue(_return, request);
    }
    ifaces_[i]->createQueue(_return, request);
    return;
  }

  void deleteQueue(const DeleteQueueRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteQueue(request);
    }
    ifaces_[i]->deleteQueue(request);
  }

  void purgeQueue(const PurgeQueueRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->purgeQueue(request);
    }
    ifaces_[i]->purgeQueue(request);
  }

  void setQueueAttribute(SetQueueAttributesResponse& _return, const SetQueueAttributesRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setQueueAttribute(_return, request);
    }
    ifaces_[i]->setQueueAttribute(_return, request);
    return;
  }

  void setQueueQuota(SetQueueQuotaResponse& _return, const SetQueueQuotaRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setQueueQuota(_return, request);
    }
    ifaces_[i]->setQueueQuota(_return, request);
    return;
  }

  void getQueueInfo(GetQueueInfoResponse& _return, const GetQueueInfoRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getQueueInfo(_return, request);
    }
    ifaces_[i]->getQueueInfo(_return, request);
    return;
  }

  void listQueue(ListQueueResponse& _return, const ListQueueRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listQueue(_return, request);
    }
    ifaces_[i]->listQueue(_return, request);
    return;
  }

  void setQueueRedrivePolicy(SetQueueRedrivePolicyResponse& _return, const SetQueueRedrivePolicyRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setQueueRedrivePolicy(_return, request);
    }
    ifaces_[i]->setQueueRedrivePolicy(_return, request);
    return;
  }

  void removeQueueRedrivePolicy(const RemoveQueueRedrivePolicyRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeQueueRedrivePolicy(request);
    }
    ifaces_[i]->removeQueueRedrivePolicy(request);
  }

  void setPermission(const SetPermissionRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setPermission(request);
    }
    ifaces_[i]->setPermission(request);
  }

  void revokePermission(const RevokePermissionRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->revokePermission(request);
    }
    ifaces_[i]->revokePermission(request);
  }

  void queryPermission(QueryPermissionResponse& _return, const QueryPermissionRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryPermission(_return, request);
    }
    ifaces_[i]->queryPermission(_return, request);
    return;
  }

  void queryPermissionForId(QueryPermissionForIdResponse& _return, const QueryPermissionForIdRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryPermissionForId(_return, request);
    }
    ifaces_[i]->queryPermissionForId(_return, request);
    return;
  }

  void listPermissions(ListPermissionsResponse& _return, const ListPermissionsRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listPermissions(_return, request);
    }
    ifaces_[i]->listPermissions(_return, request);
    return;
  }

  void createTag(CreateTagResponse& _return, const CreateTagRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createTag(_return, request);
    }
    ifaces_[i]->createTag(_return, request);
    return;
  }

  void deleteTag(const DeleteTagRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteTag(request);
    }
    ifaces_[i]->deleteTag(request);
  }

  void getTagInfo(GetTagInfoResponse& _return, const GetTagInfoRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTagInfo(_return, request);
    }
    ifaces_[i]->getTagInfo(_return, request);
    return;
  }

  void listTag(ListTagResponse& _return, const ListTagRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listTag(_return, request);
    }
    ifaces_[i]->listTag(_return, request);
    return;
  }

  void queryMetric(TimeSeriesData& _return, const QueryMetricRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryMetric(_return, request);
    }
    ifaces_[i]->queryMetric(_return, request);
    return;
  }

  void queryPrivilegedQueue(QueryPrivilegedQueueResponse& _return, const QueryPrivilegedQueueRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryPrivilegedQueue(_return, request);
    }
    ifaces_[i]->queryPrivilegedQueue(_return, request);
    return;
  }

  void verifyEMQAdmin(VerifyEMQAdminResponse& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verifyEMQAdmin(_return);
    }
    ifaces_[i]->verifyEMQAdmin(_return);
    return;
  }

  void verifyEMQAdminRole(VerifyEMQAdminRoleResponse& _return, const VerifyEMQAdminRoleRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verifyEMQAdminRole(_return, request);
    }
    ifaces_[i]->verifyEMQAdminRole(_return, request);
    return;
  }

  void copyQueue(const CopyQueueRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->copyQueue(request);
    }
    ifaces_[i]->copyQueue(request);
  }

  void getQueueMeta(GetQueueMetaResponse& _return, const std::string& queueName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getQueueMeta(_return, queueName);
    }
    ifaces_[i]->getQueueMeta(_return, queueName);
    return;
  }

};

}} // namespace

#endif
