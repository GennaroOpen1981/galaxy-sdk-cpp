#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StatisticsService_H
#define StatisticsService_H

#include <thrift/TDispatchProcessor.h>
#include "Statistics_types.h"
#include "EMQBaseService.h"

namespace emq { namespace statistics {

class StatisticsServiceIf : virtual public  ::emq::common::EMQBaseServiceIf {
 public:
  virtual ~StatisticsServiceIf() {}

  /**
   * Set user quota, must be ADMIN user;
   * 
   * 
   * @param request
   */
  virtual void setUserQuota(const SetUserQuotaRequest& request) = 0;

  /**
   * Get user quota;
   * 
   * 
   * @param request
   */
  virtual void getUserQuota(GetUserQuotaResponse& _return, const GetUserQuotaRequest& request) = 0;

  /**
   * Get user used quota;
   * 
   * 
   * @param request
   */
  virtual void getUserUsedQuota(GetUserQuotaResponse& _return, const GetUserUsedQuotaRequest& request) = 0;

  /**
   * Set user info;
   * 
   * 
   * @param request
   */
  virtual void setUserInfo(const SetUserInfoRequest& request) = 0;

  /**
   * Get user info;
   * 
   * 
   * @param request
   */
  virtual void getUserInfo(GetUserInfoResponse& _return, const GetUserInfoRequest& request) = 0;

  /**
   * Add an alert policy for queue;
   * 
   * 
   * @param request
   */
  virtual void addQueueAlertPolicy(const AddQueueAlertPolicyRequest& request) = 0;

  /**
   * Add an alert policy for tag;
   * 
   * 
   * @param request
   */
  virtual void addTagAlertPolicy(const AddTagAlertPolicyRequest& request) = 0;

  /**
   * Delete an alert policy for queue;
   * 
   * 
   * @param request
   */
  virtual void deleteQueueAlertPolicy(const DeleteQueueAlertPolicyRequest& request) = 0;

  /**
   * Delete an alert policy for tag
   * 
   * 
   * @param request
   */
  virtual void deleteTagAlertPolicy(const DeleteTagAlertPolicyRequest& request) = 0;

  /**
   * Clear alert policies for queue;
   * 
   * 
   * @param request
   */
  virtual void listQueueAlertPolicies(ListQueueAlertPoliciesResponse& _return, const ListQueueAlertPoliciesRequest& request) = 0;

  /**
   * Clear alert policies for tag;
   * 
   * 
   * @param request
   */
  virtual void listTagAlertPolicies(ListTagAlertPoliciesResponse& _return, const ListTagAlertPoliciesRequest& request) = 0;

  /**
   * Set daily statistics state for queue;
   * 
   * 
   * @param request
   */
  virtual void setQueueDailyStatisticsState(const SetQueueDailyStatisticsStateRequest& request) = 0;

  /**
   * Get daily statistics state of queue;
   * 
   * 
   * @param request
   */
  virtual void getQueueDailyStatisticsState(GetQueueDailyStatisticsStateResponse& _return, const GetQueueDailyStatisticsStateRequest& request) = 0;
};

class StatisticsServiceIfFactory : virtual public  ::emq::common::EMQBaseServiceIfFactory {
 public:
  typedef StatisticsServiceIf Handler;

  virtual ~StatisticsServiceIfFactory() {}

  virtual StatisticsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::emq::common::EMQBaseServiceIf* /* handler */) = 0;
};

class StatisticsServiceIfSingletonFactory : virtual public StatisticsServiceIfFactory {
 public:
  StatisticsServiceIfSingletonFactory(const boost::shared_ptr<StatisticsServiceIf>& iface) : iface_(iface) {}
  virtual ~StatisticsServiceIfSingletonFactory() {}

  virtual StatisticsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::emq::common::EMQBaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<StatisticsServiceIf> iface_;
};

class StatisticsServiceNull : virtual public StatisticsServiceIf , virtual public  ::emq::common::EMQBaseServiceNull {
 public:
  virtual ~StatisticsServiceNull() {}
  void setUserQuota(const SetUserQuotaRequest& /* request */) {
    return;
  }
  void getUserQuota(GetUserQuotaResponse& /* _return */, const GetUserQuotaRequest& /* request */) {
    return;
  }
  void getUserUsedQuota(GetUserQuotaResponse& /* _return */, const GetUserUsedQuotaRequest& /* request */) {
    return;
  }
  void setUserInfo(const SetUserInfoRequest& /* request */) {
    return;
  }
  void getUserInfo(GetUserInfoResponse& /* _return */, const GetUserInfoRequest& /* request */) {
    return;
  }
  void addQueueAlertPolicy(const AddQueueAlertPolicyRequest& /* request */) {
    return;
  }
  void addTagAlertPolicy(const AddTagAlertPolicyRequest& /* request */) {
    return;
  }
  void deleteQueueAlertPolicy(const DeleteQueueAlertPolicyRequest& /* request */) {
    return;
  }
  void deleteTagAlertPolicy(const DeleteTagAlertPolicyRequest& /* request */) {
    return;
  }
  void listQueueAlertPolicies(ListQueueAlertPoliciesResponse& /* _return */, const ListQueueAlertPoliciesRequest& /* request */) {
    return;
  }
  void listTagAlertPolicies(ListTagAlertPoliciesResponse& /* _return */, const ListTagAlertPoliciesRequest& /* request */) {
    return;
  }
  void setQueueDailyStatisticsState(const SetQueueDailyStatisticsStateRequest& /* request */) {
    return;
  }
  void getQueueDailyStatisticsState(GetQueueDailyStatisticsStateResponse& /* _return */, const GetQueueDailyStatisticsStateRequest& /* request */) {
    return;
  }
};

typedef struct _StatisticsService_setUserQuota_args__isset {
  _StatisticsService_setUserQuota_args__isset() : request(false) {}
  bool request :1;
} _StatisticsService_setUserQuota_args__isset;

class StatisticsService_setUserQuota_args {
 public:

  static const char* ascii_fingerprint; // = "F12C7726371B6220755C3DF0C4890543";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0x2C,0x77,0x26,0x37,0x1B,0x62,0x20,0x75,0x5C,0x3D,0xF0,0xC4,0x89,0x05,0x43};

  StatisticsService_setUserQuota_args(const StatisticsService_setUserQuota_args&);
  StatisticsService_setUserQuota_args& operator=(const StatisticsService_setUserQuota_args&);
  StatisticsService_setUserQuota_args() {
  }

  virtual ~StatisticsService_setUserQuota_args() throw();
  SetUserQuotaRequest request;

  _StatisticsService_setUserQuota_args__isset __isset;

  void __set_request(const SetUserQuotaRequest& val);

  bool operator == (const StatisticsService_setUserQuota_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_setUserQuota_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_setUserQuota_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_setUserQuota_args& obj);
};


class StatisticsService_setUserQuota_pargs {
 public:

  static const char* ascii_fingerprint; // = "F12C7726371B6220755C3DF0C4890543";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0x2C,0x77,0x26,0x37,0x1B,0x62,0x20,0x75,0x5C,0x3D,0xF0,0xC4,0x89,0x05,0x43};


  virtual ~StatisticsService_setUserQuota_pargs() throw();
  const SetUserQuotaRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_setUserQuota_pargs& obj);
};

typedef struct _StatisticsService_setUserQuota_result__isset {
  _StatisticsService_setUserQuota_result__isset() : e(false) {}
  bool e :1;
} _StatisticsService_setUserQuota_result__isset;

class StatisticsService_setUserQuota_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  StatisticsService_setUserQuota_result(const StatisticsService_setUserQuota_result&);
  StatisticsService_setUserQuota_result& operator=(const StatisticsService_setUserQuota_result&);
  StatisticsService_setUserQuota_result() {
  }

  virtual ~StatisticsService_setUserQuota_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_setUserQuota_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const StatisticsService_setUserQuota_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_setUserQuota_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_setUserQuota_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_setUserQuota_result& obj);
};

typedef struct _StatisticsService_setUserQuota_presult__isset {
  _StatisticsService_setUserQuota_presult__isset() : e(false) {}
  bool e :1;
} _StatisticsService_setUserQuota_presult__isset;

class StatisticsService_setUserQuota_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~StatisticsService_setUserQuota_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_setUserQuota_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_setUserQuota_presult& obj);
};

typedef struct _StatisticsService_getUserQuota_args__isset {
  _StatisticsService_getUserQuota_args__isset() : request(false) {}
  bool request :1;
} _StatisticsService_getUserQuota_args__isset;

class StatisticsService_getUserQuota_args {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  StatisticsService_getUserQuota_args(const StatisticsService_getUserQuota_args&);
  StatisticsService_getUserQuota_args& operator=(const StatisticsService_getUserQuota_args&);
  StatisticsService_getUserQuota_args() {
  }

  virtual ~StatisticsService_getUserQuota_args() throw();
  GetUserQuotaRequest request;

  _StatisticsService_getUserQuota_args__isset __isset;

  void __set_request(const GetUserQuotaRequest& val);

  bool operator == (const StatisticsService_getUserQuota_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_getUserQuota_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_getUserQuota_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getUserQuota_args& obj);
};


class StatisticsService_getUserQuota_pargs {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~StatisticsService_getUserQuota_pargs() throw();
  const GetUserQuotaRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getUserQuota_pargs& obj);
};

typedef struct _StatisticsService_getUserQuota_result__isset {
  _StatisticsService_getUserQuota_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _StatisticsService_getUserQuota_result__isset;

class StatisticsService_getUserQuota_result {
 public:

  static const char* ascii_fingerprint; // = "AC55B109CCD4BAC739A90DB3F137B6C7";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0x55,0xB1,0x09,0xCC,0xD4,0xBA,0xC7,0x39,0xA9,0x0D,0xB3,0xF1,0x37,0xB6,0xC7};

  StatisticsService_getUserQuota_result(const StatisticsService_getUserQuota_result&);
  StatisticsService_getUserQuota_result& operator=(const StatisticsService_getUserQuota_result&);
  StatisticsService_getUserQuota_result() {
  }

  virtual ~StatisticsService_getUserQuota_result() throw();
  GetUserQuotaResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_getUserQuota_result__isset __isset;

  void __set_success(const GetUserQuotaResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const StatisticsService_getUserQuota_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_getUserQuota_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_getUserQuota_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getUserQuota_result& obj);
};

typedef struct _StatisticsService_getUserQuota_presult__isset {
  _StatisticsService_getUserQuota_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _StatisticsService_getUserQuota_presult__isset;

class StatisticsService_getUserQuota_presult {
 public:

  static const char* ascii_fingerprint; // = "AC55B109CCD4BAC739A90DB3F137B6C7";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0x55,0xB1,0x09,0xCC,0xD4,0xBA,0xC7,0x39,0xA9,0x0D,0xB3,0xF1,0x37,0xB6,0xC7};


  virtual ~StatisticsService_getUserQuota_presult() throw();
  GetUserQuotaResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_getUserQuota_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getUserQuota_presult& obj);
};

typedef struct _StatisticsService_getUserUsedQuota_args__isset {
  _StatisticsService_getUserUsedQuota_args__isset() : request(false) {}
  bool request :1;
} _StatisticsService_getUserUsedQuota_args__isset;

class StatisticsService_getUserUsedQuota_args {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  StatisticsService_getUserUsedQuota_args(const StatisticsService_getUserUsedQuota_args&);
  StatisticsService_getUserUsedQuota_args& operator=(const StatisticsService_getUserUsedQuota_args&);
  StatisticsService_getUserUsedQuota_args() {
  }

  virtual ~StatisticsService_getUserUsedQuota_args() throw();
  GetUserUsedQuotaRequest request;

  _StatisticsService_getUserUsedQuota_args__isset __isset;

  void __set_request(const GetUserUsedQuotaRequest& val);

  bool operator == (const StatisticsService_getUserUsedQuota_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_getUserUsedQuota_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_getUserUsedQuota_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getUserUsedQuota_args& obj);
};


class StatisticsService_getUserUsedQuota_pargs {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~StatisticsService_getUserUsedQuota_pargs() throw();
  const GetUserUsedQuotaRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getUserUsedQuota_pargs& obj);
};

typedef struct _StatisticsService_getUserUsedQuota_result__isset {
  _StatisticsService_getUserUsedQuota_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _StatisticsService_getUserUsedQuota_result__isset;

class StatisticsService_getUserUsedQuota_result {
 public:

  static const char* ascii_fingerprint; // = "AC55B109CCD4BAC739A90DB3F137B6C7";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0x55,0xB1,0x09,0xCC,0xD4,0xBA,0xC7,0x39,0xA9,0x0D,0xB3,0xF1,0x37,0xB6,0xC7};

  StatisticsService_getUserUsedQuota_result(const StatisticsService_getUserUsedQuota_result&);
  StatisticsService_getUserUsedQuota_result& operator=(const StatisticsService_getUserUsedQuota_result&);
  StatisticsService_getUserUsedQuota_result() {
  }

  virtual ~StatisticsService_getUserUsedQuota_result() throw();
  GetUserQuotaResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_getUserUsedQuota_result__isset __isset;

  void __set_success(const GetUserQuotaResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const StatisticsService_getUserUsedQuota_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_getUserUsedQuota_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_getUserUsedQuota_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getUserUsedQuota_result& obj);
};

typedef struct _StatisticsService_getUserUsedQuota_presult__isset {
  _StatisticsService_getUserUsedQuota_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _StatisticsService_getUserUsedQuota_presult__isset;

class StatisticsService_getUserUsedQuota_presult {
 public:

  static const char* ascii_fingerprint; // = "AC55B109CCD4BAC739A90DB3F137B6C7";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0x55,0xB1,0x09,0xCC,0xD4,0xBA,0xC7,0x39,0xA9,0x0D,0xB3,0xF1,0x37,0xB6,0xC7};


  virtual ~StatisticsService_getUserUsedQuota_presult() throw();
  GetUserQuotaResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_getUserUsedQuota_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getUserUsedQuota_presult& obj);
};

typedef struct _StatisticsService_setUserInfo_args__isset {
  _StatisticsService_setUserInfo_args__isset() : request(false) {}
  bool request :1;
} _StatisticsService_setUserInfo_args__isset;

class StatisticsService_setUserInfo_args {
 public:

  static const char* ascii_fingerprint; // = "B10C31C7B2148289BD421E65CBB9A00D";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0x0C,0x31,0xC7,0xB2,0x14,0x82,0x89,0xBD,0x42,0x1E,0x65,0xCB,0xB9,0xA0,0x0D};

  StatisticsService_setUserInfo_args(const StatisticsService_setUserInfo_args&);
  StatisticsService_setUserInfo_args& operator=(const StatisticsService_setUserInfo_args&);
  StatisticsService_setUserInfo_args() {
  }

  virtual ~StatisticsService_setUserInfo_args() throw();
  SetUserInfoRequest request;

  _StatisticsService_setUserInfo_args__isset __isset;

  void __set_request(const SetUserInfoRequest& val);

  bool operator == (const StatisticsService_setUserInfo_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_setUserInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_setUserInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_setUserInfo_args& obj);
};


class StatisticsService_setUserInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "B10C31C7B2148289BD421E65CBB9A00D";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0x0C,0x31,0xC7,0xB2,0x14,0x82,0x89,0xBD,0x42,0x1E,0x65,0xCB,0xB9,0xA0,0x0D};


  virtual ~StatisticsService_setUserInfo_pargs() throw();
  const SetUserInfoRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_setUserInfo_pargs& obj);
};

typedef struct _StatisticsService_setUserInfo_result__isset {
  _StatisticsService_setUserInfo_result__isset() : e(false) {}
  bool e :1;
} _StatisticsService_setUserInfo_result__isset;

class StatisticsService_setUserInfo_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  StatisticsService_setUserInfo_result(const StatisticsService_setUserInfo_result&);
  StatisticsService_setUserInfo_result& operator=(const StatisticsService_setUserInfo_result&);
  StatisticsService_setUserInfo_result() {
  }

  virtual ~StatisticsService_setUserInfo_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_setUserInfo_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const StatisticsService_setUserInfo_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_setUserInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_setUserInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_setUserInfo_result& obj);
};

typedef struct _StatisticsService_setUserInfo_presult__isset {
  _StatisticsService_setUserInfo_presult__isset() : e(false) {}
  bool e :1;
} _StatisticsService_setUserInfo_presult__isset;

class StatisticsService_setUserInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~StatisticsService_setUserInfo_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_setUserInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_setUserInfo_presult& obj);
};

typedef struct _StatisticsService_getUserInfo_args__isset {
  _StatisticsService_getUserInfo_args__isset() : request(false) {}
  bool request :1;
} _StatisticsService_getUserInfo_args__isset;

class StatisticsService_getUserInfo_args {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};

  StatisticsService_getUserInfo_args(const StatisticsService_getUserInfo_args&);
  StatisticsService_getUserInfo_args& operator=(const StatisticsService_getUserInfo_args&);
  StatisticsService_getUserInfo_args() {
  }

  virtual ~StatisticsService_getUserInfo_args() throw();
  GetUserInfoRequest request;

  _StatisticsService_getUserInfo_args__isset __isset;

  void __set_request(const GetUserInfoRequest& val);

  bool operator == (const StatisticsService_getUserInfo_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_getUserInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_getUserInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getUserInfo_args& obj);
};


class StatisticsService_getUserInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "DBAF2AD71D1470DBFC004F94C495FC06";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xAF,0x2A,0xD7,0x1D,0x14,0x70,0xDB,0xFC,0x00,0x4F,0x94,0xC4,0x95,0xFC,0x06};


  virtual ~StatisticsService_getUserInfo_pargs() throw();
  const GetUserInfoRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getUserInfo_pargs& obj);
};

typedef struct _StatisticsService_getUserInfo_result__isset {
  _StatisticsService_getUserInfo_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _StatisticsService_getUserInfo_result__isset;

class StatisticsService_getUserInfo_result {
 public:

  static const char* ascii_fingerprint; // = "6C9C0546375C5D925C8F7E16AA4EADF5";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0x9C,0x05,0x46,0x37,0x5C,0x5D,0x92,0x5C,0x8F,0x7E,0x16,0xAA,0x4E,0xAD,0xF5};

  StatisticsService_getUserInfo_result(const StatisticsService_getUserInfo_result&);
  StatisticsService_getUserInfo_result& operator=(const StatisticsService_getUserInfo_result&);
  StatisticsService_getUserInfo_result() {
  }

  virtual ~StatisticsService_getUserInfo_result() throw();
  GetUserInfoResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_getUserInfo_result__isset __isset;

  void __set_success(const GetUserInfoResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const StatisticsService_getUserInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_getUserInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_getUserInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getUserInfo_result& obj);
};

typedef struct _StatisticsService_getUserInfo_presult__isset {
  _StatisticsService_getUserInfo_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _StatisticsService_getUserInfo_presult__isset;

class StatisticsService_getUserInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "6C9C0546375C5D925C8F7E16AA4EADF5";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0x9C,0x05,0x46,0x37,0x5C,0x5D,0x92,0x5C,0x8F,0x7E,0x16,0xAA,0x4E,0xAD,0xF5};


  virtual ~StatisticsService_getUserInfo_presult() throw();
  GetUserInfoResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_getUserInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getUserInfo_presult& obj);
};

typedef struct _StatisticsService_addQueueAlertPolicy_args__isset {
  _StatisticsService_addQueueAlertPolicy_args__isset() : request(false) {}
  bool request :1;
} _StatisticsService_addQueueAlertPolicy_args__isset;

class StatisticsService_addQueueAlertPolicy_args {
 public:

  static const char* ascii_fingerprint; // = "9652817150A5E8346F2A3E392DE29C5D";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x52,0x81,0x71,0x50,0xA5,0xE8,0x34,0x6F,0x2A,0x3E,0x39,0x2D,0xE2,0x9C,0x5D};

  StatisticsService_addQueueAlertPolicy_args(const StatisticsService_addQueueAlertPolicy_args&);
  StatisticsService_addQueueAlertPolicy_args& operator=(const StatisticsService_addQueueAlertPolicy_args&);
  StatisticsService_addQueueAlertPolicy_args() {
  }

  virtual ~StatisticsService_addQueueAlertPolicy_args() throw();
  AddQueueAlertPolicyRequest request;

  _StatisticsService_addQueueAlertPolicy_args__isset __isset;

  void __set_request(const AddQueueAlertPolicyRequest& val);

  bool operator == (const StatisticsService_addQueueAlertPolicy_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_addQueueAlertPolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_addQueueAlertPolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_addQueueAlertPolicy_args& obj);
};


class StatisticsService_addQueueAlertPolicy_pargs {
 public:

  static const char* ascii_fingerprint; // = "9652817150A5E8346F2A3E392DE29C5D";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x52,0x81,0x71,0x50,0xA5,0xE8,0x34,0x6F,0x2A,0x3E,0x39,0x2D,0xE2,0x9C,0x5D};


  virtual ~StatisticsService_addQueueAlertPolicy_pargs() throw();
  const AddQueueAlertPolicyRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_addQueueAlertPolicy_pargs& obj);
};

typedef struct _StatisticsService_addQueueAlertPolicy_result__isset {
  _StatisticsService_addQueueAlertPolicy_result__isset() : e(false) {}
  bool e :1;
} _StatisticsService_addQueueAlertPolicy_result__isset;

class StatisticsService_addQueueAlertPolicy_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  StatisticsService_addQueueAlertPolicy_result(const StatisticsService_addQueueAlertPolicy_result&);
  StatisticsService_addQueueAlertPolicy_result& operator=(const StatisticsService_addQueueAlertPolicy_result&);
  StatisticsService_addQueueAlertPolicy_result() {
  }

  virtual ~StatisticsService_addQueueAlertPolicy_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_addQueueAlertPolicy_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const StatisticsService_addQueueAlertPolicy_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_addQueueAlertPolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_addQueueAlertPolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_addQueueAlertPolicy_result& obj);
};

typedef struct _StatisticsService_addQueueAlertPolicy_presult__isset {
  _StatisticsService_addQueueAlertPolicy_presult__isset() : e(false) {}
  bool e :1;
} _StatisticsService_addQueueAlertPolicy_presult__isset;

class StatisticsService_addQueueAlertPolicy_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~StatisticsService_addQueueAlertPolicy_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_addQueueAlertPolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_addQueueAlertPolicy_presult& obj);
};

typedef struct _StatisticsService_addTagAlertPolicy_args__isset {
  _StatisticsService_addTagAlertPolicy_args__isset() : request(false) {}
  bool request :1;
} _StatisticsService_addTagAlertPolicy_args__isset;

class StatisticsService_addTagAlertPolicy_args {
 public:

  static const char* ascii_fingerprint; // = "5B71943D3618132CC2AAFCD91926DBFA";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x71,0x94,0x3D,0x36,0x18,0x13,0x2C,0xC2,0xAA,0xFC,0xD9,0x19,0x26,0xDB,0xFA};

  StatisticsService_addTagAlertPolicy_args(const StatisticsService_addTagAlertPolicy_args&);
  StatisticsService_addTagAlertPolicy_args& operator=(const StatisticsService_addTagAlertPolicy_args&);
  StatisticsService_addTagAlertPolicy_args() {
  }

  virtual ~StatisticsService_addTagAlertPolicy_args() throw();
  AddTagAlertPolicyRequest request;

  _StatisticsService_addTagAlertPolicy_args__isset __isset;

  void __set_request(const AddTagAlertPolicyRequest& val);

  bool operator == (const StatisticsService_addTagAlertPolicy_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_addTagAlertPolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_addTagAlertPolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_addTagAlertPolicy_args& obj);
};


class StatisticsService_addTagAlertPolicy_pargs {
 public:

  static const char* ascii_fingerprint; // = "5B71943D3618132CC2AAFCD91926DBFA";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x71,0x94,0x3D,0x36,0x18,0x13,0x2C,0xC2,0xAA,0xFC,0xD9,0x19,0x26,0xDB,0xFA};


  virtual ~StatisticsService_addTagAlertPolicy_pargs() throw();
  const AddTagAlertPolicyRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_addTagAlertPolicy_pargs& obj);
};

typedef struct _StatisticsService_addTagAlertPolicy_result__isset {
  _StatisticsService_addTagAlertPolicy_result__isset() : e(false) {}
  bool e :1;
} _StatisticsService_addTagAlertPolicy_result__isset;

class StatisticsService_addTagAlertPolicy_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  StatisticsService_addTagAlertPolicy_result(const StatisticsService_addTagAlertPolicy_result&);
  StatisticsService_addTagAlertPolicy_result& operator=(const StatisticsService_addTagAlertPolicy_result&);
  StatisticsService_addTagAlertPolicy_result() {
  }

  virtual ~StatisticsService_addTagAlertPolicy_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_addTagAlertPolicy_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const StatisticsService_addTagAlertPolicy_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_addTagAlertPolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_addTagAlertPolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_addTagAlertPolicy_result& obj);
};

typedef struct _StatisticsService_addTagAlertPolicy_presult__isset {
  _StatisticsService_addTagAlertPolicy_presult__isset() : e(false) {}
  bool e :1;
} _StatisticsService_addTagAlertPolicy_presult__isset;

class StatisticsService_addTagAlertPolicy_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~StatisticsService_addTagAlertPolicy_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_addTagAlertPolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_addTagAlertPolicy_presult& obj);
};

typedef struct _StatisticsService_deleteQueueAlertPolicy_args__isset {
  _StatisticsService_deleteQueueAlertPolicy_args__isset() : request(false) {}
  bool request :1;
} _StatisticsService_deleteQueueAlertPolicy_args__isset;

class StatisticsService_deleteQueueAlertPolicy_args {
 public:

  static const char* ascii_fingerprint; // = "9652817150A5E8346F2A3E392DE29C5D";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x52,0x81,0x71,0x50,0xA5,0xE8,0x34,0x6F,0x2A,0x3E,0x39,0x2D,0xE2,0x9C,0x5D};

  StatisticsService_deleteQueueAlertPolicy_args(const StatisticsService_deleteQueueAlertPolicy_args&);
  StatisticsService_deleteQueueAlertPolicy_args& operator=(const StatisticsService_deleteQueueAlertPolicy_args&);
  StatisticsService_deleteQueueAlertPolicy_args() {
  }

  virtual ~StatisticsService_deleteQueueAlertPolicy_args() throw();
  DeleteQueueAlertPolicyRequest request;

  _StatisticsService_deleteQueueAlertPolicy_args__isset __isset;

  void __set_request(const DeleteQueueAlertPolicyRequest& val);

  bool operator == (const StatisticsService_deleteQueueAlertPolicy_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_deleteQueueAlertPolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_deleteQueueAlertPolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_deleteQueueAlertPolicy_args& obj);
};


class StatisticsService_deleteQueueAlertPolicy_pargs {
 public:

  static const char* ascii_fingerprint; // = "9652817150A5E8346F2A3E392DE29C5D";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x52,0x81,0x71,0x50,0xA5,0xE8,0x34,0x6F,0x2A,0x3E,0x39,0x2D,0xE2,0x9C,0x5D};


  virtual ~StatisticsService_deleteQueueAlertPolicy_pargs() throw();
  const DeleteQueueAlertPolicyRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_deleteQueueAlertPolicy_pargs& obj);
};

typedef struct _StatisticsService_deleteQueueAlertPolicy_result__isset {
  _StatisticsService_deleteQueueAlertPolicy_result__isset() : e(false) {}
  bool e :1;
} _StatisticsService_deleteQueueAlertPolicy_result__isset;

class StatisticsService_deleteQueueAlertPolicy_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  StatisticsService_deleteQueueAlertPolicy_result(const StatisticsService_deleteQueueAlertPolicy_result&);
  StatisticsService_deleteQueueAlertPolicy_result& operator=(const StatisticsService_deleteQueueAlertPolicy_result&);
  StatisticsService_deleteQueueAlertPolicy_result() {
  }

  virtual ~StatisticsService_deleteQueueAlertPolicy_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_deleteQueueAlertPolicy_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const StatisticsService_deleteQueueAlertPolicy_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_deleteQueueAlertPolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_deleteQueueAlertPolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_deleteQueueAlertPolicy_result& obj);
};

typedef struct _StatisticsService_deleteQueueAlertPolicy_presult__isset {
  _StatisticsService_deleteQueueAlertPolicy_presult__isset() : e(false) {}
  bool e :1;
} _StatisticsService_deleteQueueAlertPolicy_presult__isset;

class StatisticsService_deleteQueueAlertPolicy_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~StatisticsService_deleteQueueAlertPolicy_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_deleteQueueAlertPolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_deleteQueueAlertPolicy_presult& obj);
};

typedef struct _StatisticsService_deleteTagAlertPolicy_args__isset {
  _StatisticsService_deleteTagAlertPolicy_args__isset() : request(false) {}
  bool request :1;
} _StatisticsService_deleteTagAlertPolicy_args__isset;

class StatisticsService_deleteTagAlertPolicy_args {
 public:

  static const char* ascii_fingerprint; // = "5B71943D3618132CC2AAFCD91926DBFA";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x71,0x94,0x3D,0x36,0x18,0x13,0x2C,0xC2,0xAA,0xFC,0xD9,0x19,0x26,0xDB,0xFA};

  StatisticsService_deleteTagAlertPolicy_args(const StatisticsService_deleteTagAlertPolicy_args&);
  StatisticsService_deleteTagAlertPolicy_args& operator=(const StatisticsService_deleteTagAlertPolicy_args&);
  StatisticsService_deleteTagAlertPolicy_args() {
  }

  virtual ~StatisticsService_deleteTagAlertPolicy_args() throw();
  DeleteTagAlertPolicyRequest request;

  _StatisticsService_deleteTagAlertPolicy_args__isset __isset;

  void __set_request(const DeleteTagAlertPolicyRequest& val);

  bool operator == (const StatisticsService_deleteTagAlertPolicy_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_deleteTagAlertPolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_deleteTagAlertPolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_deleteTagAlertPolicy_args& obj);
};


class StatisticsService_deleteTagAlertPolicy_pargs {
 public:

  static const char* ascii_fingerprint; // = "5B71943D3618132CC2AAFCD91926DBFA";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x71,0x94,0x3D,0x36,0x18,0x13,0x2C,0xC2,0xAA,0xFC,0xD9,0x19,0x26,0xDB,0xFA};


  virtual ~StatisticsService_deleteTagAlertPolicy_pargs() throw();
  const DeleteTagAlertPolicyRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_deleteTagAlertPolicy_pargs& obj);
};

typedef struct _StatisticsService_deleteTagAlertPolicy_result__isset {
  _StatisticsService_deleteTagAlertPolicy_result__isset() : e(false) {}
  bool e :1;
} _StatisticsService_deleteTagAlertPolicy_result__isset;

class StatisticsService_deleteTagAlertPolicy_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  StatisticsService_deleteTagAlertPolicy_result(const StatisticsService_deleteTagAlertPolicy_result&);
  StatisticsService_deleteTagAlertPolicy_result& operator=(const StatisticsService_deleteTagAlertPolicy_result&);
  StatisticsService_deleteTagAlertPolicy_result() {
  }

  virtual ~StatisticsService_deleteTagAlertPolicy_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_deleteTagAlertPolicy_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const StatisticsService_deleteTagAlertPolicy_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_deleteTagAlertPolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_deleteTagAlertPolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_deleteTagAlertPolicy_result& obj);
};

typedef struct _StatisticsService_deleteTagAlertPolicy_presult__isset {
  _StatisticsService_deleteTagAlertPolicy_presult__isset() : e(false) {}
  bool e :1;
} _StatisticsService_deleteTagAlertPolicy_presult__isset;

class StatisticsService_deleteTagAlertPolicy_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~StatisticsService_deleteTagAlertPolicy_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_deleteTagAlertPolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_deleteTagAlertPolicy_presult& obj);
};

typedef struct _StatisticsService_listQueueAlertPolicies_args__isset {
  _StatisticsService_listQueueAlertPolicies_args__isset() : request(false) {}
  bool request :1;
} _StatisticsService_listQueueAlertPolicies_args__isset;

class StatisticsService_listQueueAlertPolicies_args {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  StatisticsService_listQueueAlertPolicies_args(const StatisticsService_listQueueAlertPolicies_args&);
  StatisticsService_listQueueAlertPolicies_args& operator=(const StatisticsService_listQueueAlertPolicies_args&);
  StatisticsService_listQueueAlertPolicies_args() {
  }

  virtual ~StatisticsService_listQueueAlertPolicies_args() throw();
  ListQueueAlertPoliciesRequest request;

  _StatisticsService_listQueueAlertPolicies_args__isset __isset;

  void __set_request(const ListQueueAlertPoliciesRequest& val);

  bool operator == (const StatisticsService_listQueueAlertPolicies_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_listQueueAlertPolicies_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_listQueueAlertPolicies_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_listQueueAlertPolicies_args& obj);
};


class StatisticsService_listQueueAlertPolicies_pargs {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~StatisticsService_listQueueAlertPolicies_pargs() throw();
  const ListQueueAlertPoliciesRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_listQueueAlertPolicies_pargs& obj);
};

typedef struct _StatisticsService_listQueueAlertPolicies_result__isset {
  _StatisticsService_listQueueAlertPolicies_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _StatisticsService_listQueueAlertPolicies_result__isset;

class StatisticsService_listQueueAlertPolicies_result {
 public:

  static const char* ascii_fingerprint; // = "6711A4EC50B5551CE71F4A548A6E47F8";
  static const uint8_t binary_fingerprint[16]; // = {0x67,0x11,0xA4,0xEC,0x50,0xB5,0x55,0x1C,0xE7,0x1F,0x4A,0x54,0x8A,0x6E,0x47,0xF8};

  StatisticsService_listQueueAlertPolicies_result(const StatisticsService_listQueueAlertPolicies_result&);
  StatisticsService_listQueueAlertPolicies_result& operator=(const StatisticsService_listQueueAlertPolicies_result&);
  StatisticsService_listQueueAlertPolicies_result() {
  }

  virtual ~StatisticsService_listQueueAlertPolicies_result() throw();
  ListQueueAlertPoliciesResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_listQueueAlertPolicies_result__isset __isset;

  void __set_success(const ListQueueAlertPoliciesResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const StatisticsService_listQueueAlertPolicies_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_listQueueAlertPolicies_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_listQueueAlertPolicies_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_listQueueAlertPolicies_result& obj);
};

typedef struct _StatisticsService_listQueueAlertPolicies_presult__isset {
  _StatisticsService_listQueueAlertPolicies_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _StatisticsService_listQueueAlertPolicies_presult__isset;

class StatisticsService_listQueueAlertPolicies_presult {
 public:

  static const char* ascii_fingerprint; // = "6711A4EC50B5551CE71F4A548A6E47F8";
  static const uint8_t binary_fingerprint[16]; // = {0x67,0x11,0xA4,0xEC,0x50,0xB5,0x55,0x1C,0xE7,0x1F,0x4A,0x54,0x8A,0x6E,0x47,0xF8};


  virtual ~StatisticsService_listQueueAlertPolicies_presult() throw();
  ListQueueAlertPoliciesResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_listQueueAlertPolicies_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_listQueueAlertPolicies_presult& obj);
};

typedef struct _StatisticsService_listTagAlertPolicies_args__isset {
  _StatisticsService_listTagAlertPolicies_args__isset() : request(false) {}
  bool request :1;
} _StatisticsService_listTagAlertPolicies_args__isset;

class StatisticsService_listTagAlertPolicies_args {
 public:

  static const char* ascii_fingerprint; // = "EFF88FC43ADB539A8BDEFB83AC2241F4";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xF8,0x8F,0xC4,0x3A,0xDB,0x53,0x9A,0x8B,0xDE,0xFB,0x83,0xAC,0x22,0x41,0xF4};

  StatisticsService_listTagAlertPolicies_args(const StatisticsService_listTagAlertPolicies_args&);
  StatisticsService_listTagAlertPolicies_args& operator=(const StatisticsService_listTagAlertPolicies_args&);
  StatisticsService_listTagAlertPolicies_args() {
  }

  virtual ~StatisticsService_listTagAlertPolicies_args() throw();
  ListTagAlertPoliciesRequest request;

  _StatisticsService_listTagAlertPolicies_args__isset __isset;

  void __set_request(const ListTagAlertPoliciesRequest& val);

  bool operator == (const StatisticsService_listTagAlertPolicies_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_listTagAlertPolicies_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_listTagAlertPolicies_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_listTagAlertPolicies_args& obj);
};


class StatisticsService_listTagAlertPolicies_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFF88FC43ADB539A8BDEFB83AC2241F4";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xF8,0x8F,0xC4,0x3A,0xDB,0x53,0x9A,0x8B,0xDE,0xFB,0x83,0xAC,0x22,0x41,0xF4};


  virtual ~StatisticsService_listTagAlertPolicies_pargs() throw();
  const ListTagAlertPoliciesRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_listTagAlertPolicies_pargs& obj);
};

typedef struct _StatisticsService_listTagAlertPolicies_result__isset {
  _StatisticsService_listTagAlertPolicies_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _StatisticsService_listTagAlertPolicies_result__isset;

class StatisticsService_listTagAlertPolicies_result {
 public:

  static const char* ascii_fingerprint; // = "F7DFBEF3D447850704B94EC13D93AA15";
  static const uint8_t binary_fingerprint[16]; // = {0xF7,0xDF,0xBE,0xF3,0xD4,0x47,0x85,0x07,0x04,0xB9,0x4E,0xC1,0x3D,0x93,0xAA,0x15};

  StatisticsService_listTagAlertPolicies_result(const StatisticsService_listTagAlertPolicies_result&);
  StatisticsService_listTagAlertPolicies_result& operator=(const StatisticsService_listTagAlertPolicies_result&);
  StatisticsService_listTagAlertPolicies_result() {
  }

  virtual ~StatisticsService_listTagAlertPolicies_result() throw();
  ListTagAlertPoliciesResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_listTagAlertPolicies_result__isset __isset;

  void __set_success(const ListTagAlertPoliciesResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const StatisticsService_listTagAlertPolicies_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_listTagAlertPolicies_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_listTagAlertPolicies_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_listTagAlertPolicies_result& obj);
};

typedef struct _StatisticsService_listTagAlertPolicies_presult__isset {
  _StatisticsService_listTagAlertPolicies_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _StatisticsService_listTagAlertPolicies_presult__isset;

class StatisticsService_listTagAlertPolicies_presult {
 public:

  static const char* ascii_fingerprint; // = "F7DFBEF3D447850704B94EC13D93AA15";
  static const uint8_t binary_fingerprint[16]; // = {0xF7,0xDF,0xBE,0xF3,0xD4,0x47,0x85,0x07,0x04,0xB9,0x4E,0xC1,0x3D,0x93,0xAA,0x15};


  virtual ~StatisticsService_listTagAlertPolicies_presult() throw();
  ListTagAlertPoliciesResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_listTagAlertPolicies_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_listTagAlertPolicies_presult& obj);
};

typedef struct _StatisticsService_setQueueDailyStatisticsState_args__isset {
  _StatisticsService_setQueueDailyStatisticsState_args__isset() : request(false) {}
  bool request :1;
} _StatisticsService_setQueueDailyStatisticsState_args__isset;

class StatisticsService_setQueueDailyStatisticsState_args {
 public:

  static const char* ascii_fingerprint; // = "EE4488E22CBA9A65FA46EE5311FB669E";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x44,0x88,0xE2,0x2C,0xBA,0x9A,0x65,0xFA,0x46,0xEE,0x53,0x11,0xFB,0x66,0x9E};

  StatisticsService_setQueueDailyStatisticsState_args(const StatisticsService_setQueueDailyStatisticsState_args&);
  StatisticsService_setQueueDailyStatisticsState_args& operator=(const StatisticsService_setQueueDailyStatisticsState_args&);
  StatisticsService_setQueueDailyStatisticsState_args() {
  }

  virtual ~StatisticsService_setQueueDailyStatisticsState_args() throw();
  SetQueueDailyStatisticsStateRequest request;

  _StatisticsService_setQueueDailyStatisticsState_args__isset __isset;

  void __set_request(const SetQueueDailyStatisticsStateRequest& val);

  bool operator == (const StatisticsService_setQueueDailyStatisticsState_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_setQueueDailyStatisticsState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_setQueueDailyStatisticsState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_setQueueDailyStatisticsState_args& obj);
};


class StatisticsService_setQueueDailyStatisticsState_pargs {
 public:

  static const char* ascii_fingerprint; // = "EE4488E22CBA9A65FA46EE5311FB669E";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x44,0x88,0xE2,0x2C,0xBA,0x9A,0x65,0xFA,0x46,0xEE,0x53,0x11,0xFB,0x66,0x9E};


  virtual ~StatisticsService_setQueueDailyStatisticsState_pargs() throw();
  const SetQueueDailyStatisticsStateRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_setQueueDailyStatisticsState_pargs& obj);
};

typedef struct _StatisticsService_setQueueDailyStatisticsState_result__isset {
  _StatisticsService_setQueueDailyStatisticsState_result__isset() : e(false) {}
  bool e :1;
} _StatisticsService_setQueueDailyStatisticsState_result__isset;

class StatisticsService_setQueueDailyStatisticsState_result {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};

  StatisticsService_setQueueDailyStatisticsState_result(const StatisticsService_setQueueDailyStatisticsState_result&);
  StatisticsService_setQueueDailyStatisticsState_result& operator=(const StatisticsService_setQueueDailyStatisticsState_result&);
  StatisticsService_setQueueDailyStatisticsState_result() {
  }

  virtual ~StatisticsService_setQueueDailyStatisticsState_result() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_setQueueDailyStatisticsState_result__isset __isset;

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const StatisticsService_setQueueDailyStatisticsState_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_setQueueDailyStatisticsState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_setQueueDailyStatisticsState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_setQueueDailyStatisticsState_result& obj);
};

typedef struct _StatisticsService_setQueueDailyStatisticsState_presult__isset {
  _StatisticsService_setQueueDailyStatisticsState_presult__isset() : e(false) {}
  bool e :1;
} _StatisticsService_setQueueDailyStatisticsState_presult__isset;

class StatisticsService_setQueueDailyStatisticsState_presult {
 public:

  static const char* ascii_fingerprint; // = "A2F65054E5F622394FA717621012DFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xF6,0x50,0x54,0xE5,0xF6,0x22,0x39,0x4F,0xA7,0x17,0x62,0x10,0x12,0xDF,0xC2};


  virtual ~StatisticsService_setQueueDailyStatisticsState_presult() throw();
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_setQueueDailyStatisticsState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_setQueueDailyStatisticsState_presult& obj);
};

typedef struct _StatisticsService_getQueueDailyStatisticsState_args__isset {
  _StatisticsService_getQueueDailyStatisticsState_args__isset() : request(false) {}
  bool request :1;
} _StatisticsService_getQueueDailyStatisticsState_args__isset;

class StatisticsService_getQueueDailyStatisticsState_args {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  StatisticsService_getQueueDailyStatisticsState_args(const StatisticsService_getQueueDailyStatisticsState_args&);
  StatisticsService_getQueueDailyStatisticsState_args& operator=(const StatisticsService_getQueueDailyStatisticsState_args&);
  StatisticsService_getQueueDailyStatisticsState_args() {
  }

  virtual ~StatisticsService_getQueueDailyStatisticsState_args() throw();
  GetQueueDailyStatisticsStateRequest request;

  _StatisticsService_getQueueDailyStatisticsState_args__isset __isset;

  void __set_request(const GetQueueDailyStatisticsStateRequest& val);

  bool operator == (const StatisticsService_getQueueDailyStatisticsState_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_getQueueDailyStatisticsState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_getQueueDailyStatisticsState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getQueueDailyStatisticsState_args& obj);
};


class StatisticsService_getQueueDailyStatisticsState_pargs {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~StatisticsService_getQueueDailyStatisticsState_pargs() throw();
  const GetQueueDailyStatisticsStateRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getQueueDailyStatisticsState_pargs& obj);
};

typedef struct _StatisticsService_getQueueDailyStatisticsState_result__isset {
  _StatisticsService_getQueueDailyStatisticsState_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _StatisticsService_getQueueDailyStatisticsState_result__isset;

class StatisticsService_getQueueDailyStatisticsState_result {
 public:

  static const char* ascii_fingerprint; // = "D2983ABEDCA538EBE3BF89C5EB9D945E";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0x98,0x3A,0xBE,0xDC,0xA5,0x38,0xEB,0xE3,0xBF,0x89,0xC5,0xEB,0x9D,0x94,0x5E};

  StatisticsService_getQueueDailyStatisticsState_result(const StatisticsService_getQueueDailyStatisticsState_result&);
  StatisticsService_getQueueDailyStatisticsState_result& operator=(const StatisticsService_getQueueDailyStatisticsState_result&);
  StatisticsService_getQueueDailyStatisticsState_result() {
  }

  virtual ~StatisticsService_getQueueDailyStatisticsState_result() throw();
  GetQueueDailyStatisticsStateResponse success;
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_getQueueDailyStatisticsState_result__isset __isset;

  void __set_success(const GetQueueDailyStatisticsStateResponse& val);

  void __set_e(const  ::emq::common::GalaxyEmqServiceException& val);

  bool operator == (const StatisticsService_getQueueDailyStatisticsState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const StatisticsService_getQueueDailyStatisticsState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatisticsService_getQueueDailyStatisticsState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getQueueDailyStatisticsState_result& obj);
};

typedef struct _StatisticsService_getQueueDailyStatisticsState_presult__isset {
  _StatisticsService_getQueueDailyStatisticsState_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _StatisticsService_getQueueDailyStatisticsState_presult__isset;

class StatisticsService_getQueueDailyStatisticsState_presult {
 public:

  static const char* ascii_fingerprint; // = "D2983ABEDCA538EBE3BF89C5EB9D945E";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0x98,0x3A,0xBE,0xDC,0xA5,0x38,0xEB,0xE3,0xBF,0x89,0xC5,0xEB,0x9D,0x94,0x5E};


  virtual ~StatisticsService_getQueueDailyStatisticsState_presult() throw();
  GetQueueDailyStatisticsStateResponse* success;
   ::emq::common::GalaxyEmqServiceException e;

  _StatisticsService_getQueueDailyStatisticsState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const StatisticsService_getQueueDailyStatisticsState_presult& obj);
};

class StatisticsServiceClient : virtual public StatisticsServiceIf, public  ::emq::common::EMQBaseServiceClient {
 public:
  StatisticsServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::emq::common::EMQBaseServiceClient(prot, prot) {}
  StatisticsServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::emq::common::EMQBaseServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setUserQuota(const SetUserQuotaRequest& request);
  void send_setUserQuota(const SetUserQuotaRequest& request);
  void recv_setUserQuota();
  void getUserQuota(GetUserQuotaResponse& _return, const GetUserQuotaRequest& request);
  void send_getUserQuota(const GetUserQuotaRequest& request);
  void recv_getUserQuota(GetUserQuotaResponse& _return);
  void getUserUsedQuota(GetUserQuotaResponse& _return, const GetUserUsedQuotaRequest& request);
  void send_getUserUsedQuota(const GetUserUsedQuotaRequest& request);
  void recv_getUserUsedQuota(GetUserQuotaResponse& _return);
  void setUserInfo(const SetUserInfoRequest& request);
  void send_setUserInfo(const SetUserInfoRequest& request);
  void recv_setUserInfo();
  void getUserInfo(GetUserInfoResponse& _return, const GetUserInfoRequest& request);
  void send_getUserInfo(const GetUserInfoRequest& request);
  void recv_getUserInfo(GetUserInfoResponse& _return);
  void addQueueAlertPolicy(const AddQueueAlertPolicyRequest& request);
  void send_addQueueAlertPolicy(const AddQueueAlertPolicyRequest& request);
  void recv_addQueueAlertPolicy();
  void addTagAlertPolicy(const AddTagAlertPolicyRequest& request);
  void send_addTagAlertPolicy(const AddTagAlertPolicyRequest& request);
  void recv_addTagAlertPolicy();
  void deleteQueueAlertPolicy(const DeleteQueueAlertPolicyRequest& request);
  void send_deleteQueueAlertPolicy(const DeleteQueueAlertPolicyRequest& request);
  void recv_deleteQueueAlertPolicy();
  void deleteTagAlertPolicy(const DeleteTagAlertPolicyRequest& request);
  void send_deleteTagAlertPolicy(const DeleteTagAlertPolicyRequest& request);
  void recv_deleteTagAlertPolicy();
  void listQueueAlertPolicies(ListQueueAlertPoliciesResponse& _return, const ListQueueAlertPoliciesRequest& request);
  void send_listQueueAlertPolicies(const ListQueueAlertPoliciesRequest& request);
  void recv_listQueueAlertPolicies(ListQueueAlertPoliciesResponse& _return);
  void listTagAlertPolicies(ListTagAlertPoliciesResponse& _return, const ListTagAlertPoliciesRequest& request);
  void send_listTagAlertPolicies(const ListTagAlertPoliciesRequest& request);
  void recv_listTagAlertPolicies(ListTagAlertPoliciesResponse& _return);
  void setQueueDailyStatisticsState(const SetQueueDailyStatisticsStateRequest& request);
  void send_setQueueDailyStatisticsState(const SetQueueDailyStatisticsStateRequest& request);
  void recv_setQueueDailyStatisticsState();
  void getQueueDailyStatisticsState(GetQueueDailyStatisticsStateResponse& _return, const GetQueueDailyStatisticsStateRequest& request);
  void send_getQueueDailyStatisticsState(const GetQueueDailyStatisticsStateRequest& request);
  void recv_getQueueDailyStatisticsState(GetQueueDailyStatisticsStateResponse& _return);
};

class StatisticsServiceProcessor : public  ::emq::common::EMQBaseServiceProcessor {
 protected:
  boost::shared_ptr<StatisticsServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (StatisticsServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_setUserQuota(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserQuota(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserUsedQuota(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setUserInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addQueueAlertPolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addTagAlertPolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteQueueAlertPolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteTagAlertPolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listQueueAlertPolicies(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listTagAlertPolicies(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setQueueDailyStatisticsState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getQueueDailyStatisticsState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StatisticsServiceProcessor(boost::shared_ptr<StatisticsServiceIf> iface) :
     ::emq::common::EMQBaseServiceProcessor(iface),
    iface_(iface) {
    processMap_["setUserQuota"] = &StatisticsServiceProcessor::process_setUserQuota;
    processMap_["getUserQuota"] = &StatisticsServiceProcessor::process_getUserQuota;
    processMap_["getUserUsedQuota"] = &StatisticsServiceProcessor::process_getUserUsedQuota;
    processMap_["setUserInfo"] = &StatisticsServiceProcessor::process_setUserInfo;
    processMap_["getUserInfo"] = &StatisticsServiceProcessor::process_getUserInfo;
    processMap_["addQueueAlertPolicy"] = &StatisticsServiceProcessor::process_addQueueAlertPolicy;
    processMap_["addTagAlertPolicy"] = &StatisticsServiceProcessor::process_addTagAlertPolicy;
    processMap_["deleteQueueAlertPolicy"] = &StatisticsServiceProcessor::process_deleteQueueAlertPolicy;
    processMap_["deleteTagAlertPolicy"] = &StatisticsServiceProcessor::process_deleteTagAlertPolicy;
    processMap_["listQueueAlertPolicies"] = &StatisticsServiceProcessor::process_listQueueAlertPolicies;
    processMap_["listTagAlertPolicies"] = &StatisticsServiceProcessor::process_listTagAlertPolicies;
    processMap_["setQueueDailyStatisticsState"] = &StatisticsServiceProcessor::process_setQueueDailyStatisticsState;
    processMap_["getQueueDailyStatisticsState"] = &StatisticsServiceProcessor::process_getQueueDailyStatisticsState;
  }

  virtual ~StatisticsServiceProcessor() {}
};

class StatisticsServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StatisticsServiceProcessorFactory(const ::boost::shared_ptr< StatisticsServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< StatisticsServiceIfFactory > handlerFactory_;
};

class StatisticsServiceMultiface : virtual public StatisticsServiceIf, public  ::emq::common::EMQBaseServiceMultiface {
 public:
  StatisticsServiceMultiface(std::vector<boost::shared_ptr<StatisticsServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<StatisticsServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::emq::common::EMQBaseServiceMultiface::add(*iter);
    }
  }
  virtual ~StatisticsServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<StatisticsServiceIf> > ifaces_;
  StatisticsServiceMultiface() {}
  void add(boost::shared_ptr<StatisticsServiceIf> iface) {
     ::emq::common::EMQBaseServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void setUserQuota(const SetUserQuotaRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setUserQuota(request);
    }
    ifaces_[i]->setUserQuota(request);
  }

  void getUserQuota(GetUserQuotaResponse& _return, const GetUserQuotaRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserQuota(_return, request);
    }
    ifaces_[i]->getUserQuota(_return, request);
    return;
  }

  void getUserUsedQuota(GetUserQuotaResponse& _return, const GetUserUsedQuotaRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserUsedQuota(_return, request);
    }
    ifaces_[i]->getUserUsedQuota(_return, request);
    return;
  }

  void setUserInfo(const SetUserInfoRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setUserInfo(request);
    }
    ifaces_[i]->setUserInfo(request);
  }

  void getUserInfo(GetUserInfoResponse& _return, const GetUserInfoRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserInfo(_return, request);
    }
    ifaces_[i]->getUserInfo(_return, request);
    return;
  }

  void addQueueAlertPolicy(const AddQueueAlertPolicyRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addQueueAlertPolicy(request);
    }
    ifaces_[i]->addQueueAlertPolicy(request);
  }

  void addTagAlertPolicy(const AddTagAlertPolicyRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addTagAlertPolicy(request);
    }
    ifaces_[i]->addTagAlertPolicy(request);
  }

  void deleteQueueAlertPolicy(const DeleteQueueAlertPolicyRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteQueueAlertPolicy(request);
    }
    ifaces_[i]->deleteQueueAlertPolicy(request);
  }

  void deleteTagAlertPolicy(const DeleteTagAlertPolicyRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteTagAlertPolicy(request);
    }
    ifaces_[i]->deleteTagAlertPolicy(request);
  }

  void listQueueAlertPolicies(ListQueueAlertPoliciesResponse& _return, const ListQueueAlertPoliciesRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listQueueAlertPolicies(_return, request);
    }
    ifaces_[i]->listQueueAlertPolicies(_return, request);
    return;
  }

  void listTagAlertPolicies(ListTagAlertPoliciesResponse& _return, const ListTagAlertPoliciesRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listTagAlertPolicies(_return, request);
    }
    ifaces_[i]->listTagAlertPolicies(_return, request);
    return;
  }

  void setQueueDailyStatisticsState(const SetQueueDailyStatisticsStateRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setQueueDailyStatisticsState(request);
    }
    ifaces_[i]->setQueueDailyStatisticsState(request);
  }

  void getQueueDailyStatisticsState(GetQueueDailyStatisticsStateResponse& _return, const GetQueueDailyStatisticsStateRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getQueueDailyStatisticsState(_return, request);
    }
    ifaces_[i]->getQueueDailyStatisticsState(_return, request);
    return;
  }

};

}} // namespace

#endif
