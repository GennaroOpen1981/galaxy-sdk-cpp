/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Message_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace emq { namespace message {


MessageAttribute::~MessageAttribute() throw() {
}


void MessageAttribute::__set_type(const std::string& val) {
  this->type = val;
}

void MessageAttribute::__set_stringValue(const std::string& val) {
  this->stringValue = val;
__isset.stringValue = true;
}

void MessageAttribute::__set_binaryValue(const std::string& val) {
  this->binaryValue = val;
__isset.binaryValue = true;
}

const char* MessageAttribute::ascii_fingerprint = "4BF81DD46A7371532E49811022D58D36";
const uint8_t MessageAttribute::binary_fingerprint[16] = {0x4B,0xF8,0x1D,0xD4,0x6A,0x73,0x71,0x53,0x2E,0x49,0x81,0x10,0x22,0xD5,0x8D,0x36};

uint32_t MessageAttribute::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stringValue);
          this->__isset.stringValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->binaryValue);
          this->__isset.binaryValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageAttribute::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MessageAttribute");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.stringValue) {
    xfer += oprot->writeFieldBegin("stringValue", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->stringValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.binaryValue) {
    xfer += oprot->writeFieldBegin("binaryValue", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeBinary(this->binaryValue);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MessageAttribute &a, MessageAttribute &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.stringValue, b.stringValue);
  swap(a.binaryValue, b.binaryValue);
  swap(a.__isset, b.__isset);
}

MessageAttribute::MessageAttribute(const MessageAttribute& other0) {
  type = other0.type;
  stringValue = other0.stringValue;
  binaryValue = other0.binaryValue;
  __isset = other0.__isset;
}
MessageAttribute& MessageAttribute::operator=(const MessageAttribute& other1) {
  type = other1.type;
  stringValue = other1.stringValue;
  binaryValue = other1.binaryValue;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MessageAttribute& obj) {
  using apache::thrift::to_string;
  out << "MessageAttribute(";
  out << "type=" << to_string(obj.type);
  out << ", " << "stringValue="; (obj.__isset.stringValue ? (out << to_string(obj.stringValue)) : (out << "<null>"));
  out << ", " << "binaryValue="; (obj.__isset.binaryValue ? (out << to_string(obj.binaryValue)) : (out << "<null>"));
  out << ")";
  return out;
}


SendMessageRequest::~SendMessageRequest() throw() {
}


void SendMessageRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void SendMessageRequest::__set_messageBody(const std::string& val) {
  this->messageBody = val;
}

void SendMessageRequest::__set_delaySeconds(const int32_t val) {
  this->delaySeconds = val;
__isset.delaySeconds = true;
}

void SendMessageRequest::__set_invisibilitySeconds(const int32_t val) {
  this->invisibilitySeconds = val;
__isset.invisibilitySeconds = true;
}

void SendMessageRequest::__set_messageAttributes(const std::map<std::string, MessageAttribute> & val) {
  this->messageAttributes = val;
__isset.messageAttributes = true;
}

void SendMessageRequest::__set_topic(const std::string& val) {
  this->topic = val;
__isset.topic = true;
}

void SendMessageRequest::__set_priority(const int32_t val) {
  this->priority = val;
__isset.priority = true;
}

const char* SendMessageRequest::ascii_fingerprint = "47B66FE9F29D4BAE7FCFAC0FCF4F7195";
const uint8_t SendMessageRequest::binary_fingerprint[16] = {0x47,0xB6,0x6F,0xE9,0xF2,0x9D,0x4B,0xAE,0x7F,0xCF,0xAC,0x0F,0xCF,0x4F,0x71,0x95};

uint32_t SendMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_messageBody = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageBody);
          isset_messageBody = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->delaySeconds);
          this->__isset.delaySeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->invisibilitySeconds);
          this->__isset.invisibilitySeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->messageAttributes.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _ktype3;
            ::apache::thrift::protocol::TType _vtype4;
            xfer += iprot->readMapBegin(_ktype3, _vtype4, _size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              std::string _key7;
              xfer += iprot->readString(_key7);
              MessageAttribute& _val8 = this->messageAttributes[_key7];
              xfer += _val8.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.messageAttributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->topic);
          this->__isset.topic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_messageBody)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SendMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SendMessageRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageBody", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageBody);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.delaySeconds) {
    xfer += oprot->writeFieldBegin("delaySeconds", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->delaySeconds);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.invisibilitySeconds) {
    xfer += oprot->writeFieldBegin("invisibilitySeconds", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->invisibilitySeconds);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messageAttributes) {
    xfer += oprot->writeFieldBegin("messageAttributes", ::apache::thrift::protocol::T_MAP, 5);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messageAttributes.size()));
      std::map<std::string, MessageAttribute> ::const_iterator _iter9;
      for (_iter9 = this->messageAttributes.begin(); _iter9 != this->messageAttributes.end(); ++_iter9)
      {
        xfer += oprot->writeString(_iter9->first);
        xfer += _iter9->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.topic) {
    xfer += oprot->writeFieldBegin("topic", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->topic);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.priority) {
    xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->priority);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SendMessageRequest &a, SendMessageRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.messageBody, b.messageBody);
  swap(a.delaySeconds, b.delaySeconds);
  swap(a.invisibilitySeconds, b.invisibilitySeconds);
  swap(a.messageAttributes, b.messageAttributes);
  swap(a.topic, b.topic);
  swap(a.priority, b.priority);
  swap(a.__isset, b.__isset);
}

SendMessageRequest::SendMessageRequest(const SendMessageRequest& other10) {
  queueName = other10.queueName;
  messageBody = other10.messageBody;
  delaySeconds = other10.delaySeconds;
  invisibilitySeconds = other10.invisibilitySeconds;
  messageAttributes = other10.messageAttributes;
  topic = other10.topic;
  priority = other10.priority;
  __isset = other10.__isset;
}
SendMessageRequest& SendMessageRequest::operator=(const SendMessageRequest& other11) {
  queueName = other11.queueName;
  messageBody = other11.messageBody;
  delaySeconds = other11.delaySeconds;
  invisibilitySeconds = other11.invisibilitySeconds;
  messageAttributes = other11.messageAttributes;
  topic = other11.topic;
  priority = other11.priority;
  __isset = other11.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SendMessageRequest& obj) {
  using apache::thrift::to_string;
  out << "SendMessageRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "messageBody=" << to_string(obj.messageBody);
  out << ", " << "delaySeconds="; (obj.__isset.delaySeconds ? (out << to_string(obj.delaySeconds)) : (out << "<null>"));
  out << ", " << "invisibilitySeconds="; (obj.__isset.invisibilitySeconds ? (out << to_string(obj.invisibilitySeconds)) : (out << "<null>"));
  out << ", " << "messageAttributes="; (obj.__isset.messageAttributes ? (out << to_string(obj.messageAttributes)) : (out << "<null>"));
  out << ", " << "topic="; (obj.__isset.topic ? (out << to_string(obj.topic)) : (out << "<null>"));
  out << ", " << "priority="; (obj.__isset.priority ? (out << to_string(obj.priority)) : (out << "<null>"));
  out << ")";
  return out;
}


SendMessageResponse::~SendMessageResponse() throw() {
}


void SendMessageResponse::__set_messageID(const std::string& val) {
  this->messageID = val;
}

void SendMessageResponse::__set_bodyLength(const int32_t val) {
  this->bodyLength = val;
__isset.bodyLength = true;
}

void SendMessageResponse::__set_bodyMd5(const std::string& val) {
  this->bodyMd5 = val;
__isset.bodyMd5 = true;
}

void SendMessageResponse::__set_sendTimestamp(const int64_t val) {
  this->sendTimestamp = val;
__isset.sendTimestamp = true;
}

const char* SendMessageResponse::ascii_fingerprint = "E9A4CC0D68EC4F0A9B4C74EE75C4D933";
const uint8_t SendMessageResponse::binary_fingerprint[16] = {0xE9,0xA4,0xCC,0x0D,0x68,0xEC,0x4F,0x0A,0x9B,0x4C,0x74,0xEE,0x75,0xC4,0xD9,0x33};

uint32_t SendMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_messageID = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageID);
          isset_messageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bodyLength);
          this->__isset.bodyLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bodyMd5);
          this->__isset.bodyMd5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sendTimestamp);
          this->__isset.sendTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_messageID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SendMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SendMessageResponse");

  xfer += oprot->writeFieldBegin("messageID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->messageID);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bodyLength) {
    xfer += oprot->writeFieldBegin("bodyLength", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->bodyLength);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bodyMd5) {
    xfer += oprot->writeFieldBegin("bodyMd5", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->bodyMd5);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sendTimestamp) {
    xfer += oprot->writeFieldBegin("sendTimestamp", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->sendTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SendMessageResponse &a, SendMessageResponse &b) {
  using ::std::swap;
  swap(a.messageID, b.messageID);
  swap(a.bodyLength, b.bodyLength);
  swap(a.bodyMd5, b.bodyMd5);
  swap(a.sendTimestamp, b.sendTimestamp);
  swap(a.__isset, b.__isset);
}

SendMessageResponse::SendMessageResponse(const SendMessageResponse& other12) {
  messageID = other12.messageID;
  bodyLength = other12.bodyLength;
  bodyMd5 = other12.bodyMd5;
  sendTimestamp = other12.sendTimestamp;
  __isset = other12.__isset;
}
SendMessageResponse& SendMessageResponse::operator=(const SendMessageResponse& other13) {
  messageID = other13.messageID;
  bodyLength = other13.bodyLength;
  bodyMd5 = other13.bodyMd5;
  sendTimestamp = other13.sendTimestamp;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SendMessageResponse& obj) {
  using apache::thrift::to_string;
  out << "SendMessageResponse(";
  out << "messageID=" << to_string(obj.messageID);
  out << ", " << "bodyLength="; (obj.__isset.bodyLength ? (out << to_string(obj.bodyLength)) : (out << "<null>"));
  out << ", " << "bodyMd5="; (obj.__isset.bodyMd5 ? (out << to_string(obj.bodyMd5)) : (out << "<null>"));
  out << ", " << "sendTimestamp="; (obj.__isset.sendTimestamp ? (out << to_string(obj.sendTimestamp)) : (out << "<null>"));
  out << ")";
  return out;
}


SendMessageBatchRequestEntry::~SendMessageBatchRequestEntry() throw() {
}


void SendMessageBatchRequestEntry::__set_entryId(const std::string& val) {
  this->entryId = val;
}

void SendMessageBatchRequestEntry::__set_messageBody(const std::string& val) {
  this->messageBody = val;
}

void SendMessageBatchRequestEntry::__set_delaySeconds(const int32_t val) {
  this->delaySeconds = val;
__isset.delaySeconds = true;
}

void SendMessageBatchRequestEntry::__set_invisibilitySeconds(const int32_t val) {
  this->invisibilitySeconds = val;
__isset.invisibilitySeconds = true;
}

void SendMessageBatchRequestEntry::__set_messageAttributes(const std::map<std::string, MessageAttribute> & val) {
  this->messageAttributes = val;
__isset.messageAttributes = true;
}

void SendMessageBatchRequestEntry::__set_priority(const int32_t val) {
  this->priority = val;
__isset.priority = true;
}

const char* SendMessageBatchRequestEntry::ascii_fingerprint = "69D14A996F243ED437507B186520BFA6";
const uint8_t SendMessageBatchRequestEntry::binary_fingerprint[16] = {0x69,0xD1,0x4A,0x99,0x6F,0x24,0x3E,0xD4,0x37,0x50,0x7B,0x18,0x65,0x20,0xBF,0xA6};

uint32_t SendMessageBatchRequestEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_entryId = false;
  bool isset_messageBody = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->entryId);
          isset_entryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageBody);
          isset_messageBody = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->delaySeconds);
          this->__isset.delaySeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->invisibilitySeconds);
          this->__isset.invisibilitySeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->messageAttributes.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _ktype15;
            ::apache::thrift::protocol::TType _vtype16;
            xfer += iprot->readMapBegin(_ktype15, _vtype16, _size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              std::string _key19;
              xfer += iprot->readString(_key19);
              MessageAttribute& _val20 = this->messageAttributes[_key19];
              xfer += _val20.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.messageAttributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->priority);
          this->__isset.priority = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_entryId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_messageBody)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SendMessageBatchRequestEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SendMessageBatchRequestEntry");

  xfer += oprot->writeFieldBegin("entryId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->entryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageBody", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageBody);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.delaySeconds) {
    xfer += oprot->writeFieldBegin("delaySeconds", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->delaySeconds);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.invisibilitySeconds) {
    xfer += oprot->writeFieldBegin("invisibilitySeconds", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->invisibilitySeconds);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messageAttributes) {
    xfer += oprot->writeFieldBegin("messageAttributes", ::apache::thrift::protocol::T_MAP, 5);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messageAttributes.size()));
      std::map<std::string, MessageAttribute> ::const_iterator _iter21;
      for (_iter21 = this->messageAttributes.begin(); _iter21 != this->messageAttributes.end(); ++_iter21)
      {
        xfer += oprot->writeString(_iter21->first);
        xfer += _iter21->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.priority) {
    xfer += oprot->writeFieldBegin("priority", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->priority);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SendMessageBatchRequestEntry &a, SendMessageBatchRequestEntry &b) {
  using ::std::swap;
  swap(a.entryId, b.entryId);
  swap(a.messageBody, b.messageBody);
  swap(a.delaySeconds, b.delaySeconds);
  swap(a.invisibilitySeconds, b.invisibilitySeconds);
  swap(a.messageAttributes, b.messageAttributes);
  swap(a.priority, b.priority);
  swap(a.__isset, b.__isset);
}

SendMessageBatchRequestEntry::SendMessageBatchRequestEntry(const SendMessageBatchRequestEntry& other22) {
  entryId = other22.entryId;
  messageBody = other22.messageBody;
  delaySeconds = other22.delaySeconds;
  invisibilitySeconds = other22.invisibilitySeconds;
  messageAttributes = other22.messageAttributes;
  priority = other22.priority;
  __isset = other22.__isset;
}
SendMessageBatchRequestEntry& SendMessageBatchRequestEntry::operator=(const SendMessageBatchRequestEntry& other23) {
  entryId = other23.entryId;
  messageBody = other23.messageBody;
  delaySeconds = other23.delaySeconds;
  invisibilitySeconds = other23.invisibilitySeconds;
  messageAttributes = other23.messageAttributes;
  priority = other23.priority;
  __isset = other23.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SendMessageBatchRequestEntry& obj) {
  using apache::thrift::to_string;
  out << "SendMessageBatchRequestEntry(";
  out << "entryId=" << to_string(obj.entryId);
  out << ", " << "messageBody=" << to_string(obj.messageBody);
  out << ", " << "delaySeconds="; (obj.__isset.delaySeconds ? (out << to_string(obj.delaySeconds)) : (out << "<null>"));
  out << ", " << "invisibilitySeconds="; (obj.__isset.invisibilitySeconds ? (out << to_string(obj.invisibilitySeconds)) : (out << "<null>"));
  out << ", " << "messageAttributes="; (obj.__isset.messageAttributes ? (out << to_string(obj.messageAttributes)) : (out << "<null>"));
  out << ", " << "priority="; (obj.__isset.priority ? (out << to_string(obj.priority)) : (out << "<null>"));
  out << ")";
  return out;
}


SendMessageBatchRequest::~SendMessageBatchRequest() throw() {
}


void SendMessageBatchRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void SendMessageBatchRequest::__set_sendMessageBatchRequestEntryList(const std::vector<SendMessageBatchRequestEntry> & val) {
  this->sendMessageBatchRequestEntryList = val;
}

void SendMessageBatchRequest::__set_topic(const std::string& val) {
  this->topic = val;
__isset.topic = true;
}

const char* SendMessageBatchRequest::ascii_fingerprint = "3EF4CFF4D6378FC889913A4A0CDC2780";
const uint8_t SendMessageBatchRequest::binary_fingerprint[16] = {0x3E,0xF4,0xCF,0xF4,0xD6,0x37,0x8F,0xC8,0x89,0x91,0x3A,0x4A,0x0C,0xDC,0x27,0x80};

uint32_t SendMessageBatchRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_sendMessageBatchRequestEntryList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sendMessageBatchRequestEntryList.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->sendMessageBatchRequestEntryList.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += this->sendMessageBatchRequestEntryList[_i28].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_sendMessageBatchRequestEntryList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->topic);
          this->__isset.topic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sendMessageBatchRequestEntryList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SendMessageBatchRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SendMessageBatchRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendMessageBatchRequestEntryList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sendMessageBatchRequestEntryList.size()));
    std::vector<SendMessageBatchRequestEntry> ::const_iterator _iter29;
    for (_iter29 = this->sendMessageBatchRequestEntryList.begin(); _iter29 != this->sendMessageBatchRequestEntryList.end(); ++_iter29)
    {
      xfer += (*_iter29).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.topic) {
    xfer += oprot->writeFieldBegin("topic", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->topic);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SendMessageBatchRequest &a, SendMessageBatchRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.sendMessageBatchRequestEntryList, b.sendMessageBatchRequestEntryList);
  swap(a.topic, b.topic);
  swap(a.__isset, b.__isset);
}

SendMessageBatchRequest::SendMessageBatchRequest(const SendMessageBatchRequest& other30) {
  queueName = other30.queueName;
  sendMessageBatchRequestEntryList = other30.sendMessageBatchRequestEntryList;
  topic = other30.topic;
  __isset = other30.__isset;
}
SendMessageBatchRequest& SendMessageBatchRequest::operator=(const SendMessageBatchRequest& other31) {
  queueName = other31.queueName;
  sendMessageBatchRequestEntryList = other31.sendMessageBatchRequestEntryList;
  topic = other31.topic;
  __isset = other31.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SendMessageBatchRequest& obj) {
  using apache::thrift::to_string;
  out << "SendMessageBatchRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "sendMessageBatchRequestEntryList=" << to_string(obj.sendMessageBatchRequestEntryList);
  out << ", " << "topic="; (obj.__isset.topic ? (out << to_string(obj.topic)) : (out << "<null>"));
  out << ")";
  return out;
}


SendMessageBatchResponseEntry::~SendMessageBatchResponseEntry() throw() {
}


void SendMessageBatchResponseEntry::__set_entryId(const std::string& val) {
  this->entryId = val;
}

void SendMessageBatchResponseEntry::__set_messageID(const std::string& val) {
  this->messageID = val;
}

void SendMessageBatchResponseEntry::__set_bodyLength(const int32_t val) {
  this->bodyLength = val;
__isset.bodyLength = true;
}

void SendMessageBatchResponseEntry::__set_bodyMd5(const std::string& val) {
  this->bodyMd5 = val;
__isset.bodyMd5 = true;
}

void SendMessageBatchResponseEntry::__set_sendTimestamp(const int64_t val) {
  this->sendTimestamp = val;
__isset.sendTimestamp = true;
}

const char* SendMessageBatchResponseEntry::ascii_fingerprint = "49415E1E290CEECDCD1BC6FFF03CF83B";
const uint8_t SendMessageBatchResponseEntry::binary_fingerprint[16] = {0x49,0x41,0x5E,0x1E,0x29,0x0C,0xEE,0xCD,0xCD,0x1B,0xC6,0xFF,0xF0,0x3C,0xF8,0x3B};

uint32_t SendMessageBatchResponseEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_entryId = false;
  bool isset_messageID = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->entryId);
          isset_entryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageID);
          isset_messageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bodyLength);
          this->__isset.bodyLength = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bodyMd5);
          this->__isset.bodyMd5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sendTimestamp);
          this->__isset.sendTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_entryId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_messageID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SendMessageBatchResponseEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SendMessageBatchResponseEntry");

  xfer += oprot->writeFieldBegin("entryId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->entryId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageID", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->messageID);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bodyLength) {
    xfer += oprot->writeFieldBegin("bodyLength", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->bodyLength);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bodyMd5) {
    xfer += oprot->writeFieldBegin("bodyMd5", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->bodyMd5);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sendTimestamp) {
    xfer += oprot->writeFieldBegin("sendTimestamp", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->sendTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SendMessageBatchResponseEntry &a, SendMessageBatchResponseEntry &b) {
  using ::std::swap;
  swap(a.entryId, b.entryId);
  swap(a.messageID, b.messageID);
  swap(a.bodyLength, b.bodyLength);
  swap(a.bodyMd5, b.bodyMd5);
  swap(a.sendTimestamp, b.sendTimestamp);
  swap(a.__isset, b.__isset);
}

SendMessageBatchResponseEntry::SendMessageBatchResponseEntry(const SendMessageBatchResponseEntry& other32) {
  entryId = other32.entryId;
  messageID = other32.messageID;
  bodyLength = other32.bodyLength;
  bodyMd5 = other32.bodyMd5;
  sendTimestamp = other32.sendTimestamp;
  __isset = other32.__isset;
}
SendMessageBatchResponseEntry& SendMessageBatchResponseEntry::operator=(const SendMessageBatchResponseEntry& other33) {
  entryId = other33.entryId;
  messageID = other33.messageID;
  bodyLength = other33.bodyLength;
  bodyMd5 = other33.bodyMd5;
  sendTimestamp = other33.sendTimestamp;
  __isset = other33.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SendMessageBatchResponseEntry& obj) {
  using apache::thrift::to_string;
  out << "SendMessageBatchResponseEntry(";
  out << "entryId=" << to_string(obj.entryId);
  out << ", " << "messageID=" << to_string(obj.messageID);
  out << ", " << "bodyLength="; (obj.__isset.bodyLength ? (out << to_string(obj.bodyLength)) : (out << "<null>"));
  out << ", " << "bodyMd5="; (obj.__isset.bodyMd5 ? (out << to_string(obj.bodyMd5)) : (out << "<null>"));
  out << ", " << "sendTimestamp="; (obj.__isset.sendTimestamp ? (out << to_string(obj.sendTimestamp)) : (out << "<null>"));
  out << ")";
  return out;
}


MessageBatchErrorEntry::~MessageBatchErrorEntry() throw() {
}


void MessageBatchErrorEntry::__set_id(const std::string& val) {
  this->id = val;
}

void MessageBatchErrorEntry::__set_reason(const  ::emq::common::GalaxyEmqServiceException& val) {
  this->reason = val;
__isset.reason = true;
}

const char* MessageBatchErrorEntry::ascii_fingerprint = "A2012B7F8601FD81FE5925AEC1C789B5";
const uint8_t MessageBatchErrorEntry::binary_fingerprint[16] = {0xA2,0x01,0x2B,0x7F,0x86,0x01,0xFD,0x81,0xFE,0x59,0x25,0xAE,0xC1,0xC7,0x89,0xB5};

uint32_t MessageBatchErrorEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->reason.read(iprot);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageBatchErrorEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MessageBatchErrorEntry");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.reason) {
    xfer += oprot->writeFieldBegin("reason", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->reason.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MessageBatchErrorEntry &a, MessageBatchErrorEntry &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.reason, b.reason);
  swap(a.__isset, b.__isset);
}

MessageBatchErrorEntry::MessageBatchErrorEntry(const MessageBatchErrorEntry& other34) {
  id = other34.id;
  reason = other34.reason;
  __isset = other34.__isset;
}
MessageBatchErrorEntry& MessageBatchErrorEntry::operator=(const MessageBatchErrorEntry& other35) {
  id = other35.id;
  reason = other35.reason;
  __isset = other35.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MessageBatchErrorEntry& obj) {
  using apache::thrift::to_string;
  out << "MessageBatchErrorEntry(";
  out << "id=" << to_string(obj.id);
  out << ", " << "reason="; (obj.__isset.reason ? (out << to_string(obj.reason)) : (out << "<null>"));
  out << ")";
  return out;
}


SendMessageBatchResponse::~SendMessageBatchResponse() throw() {
}


void SendMessageBatchResponse::__set_successful(const std::vector<SendMessageBatchResponseEntry> & val) {
  this->successful = val;
}

void SendMessageBatchResponse::__set_failed(const std::vector<MessageBatchErrorEntry> & val) {
  this->failed = val;
}

const char* SendMessageBatchResponse::ascii_fingerprint = "3F0703CAE4415A0D5FCE01FCAB06E102";
const uint8_t SendMessageBatchResponse::binary_fingerprint[16] = {0x3F,0x07,0x03,0xCA,0xE4,0x41,0x5A,0x0D,0x5F,0xCE,0x01,0xFC,0xAB,0x06,0xE1,0x02};

uint32_t SendMessageBatchResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->successful.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readListBegin(_etype39, _size36);
            this->successful.resize(_size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              xfer += this->successful[_i40].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.successful = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->failed.clear();
            uint32_t _size41;
            ::apache::thrift::protocol::TType _etype44;
            xfer += iprot->readListBegin(_etype44, _size41);
            this->failed.resize(_size41);
            uint32_t _i45;
            for (_i45 = 0; _i45 < _size41; ++_i45)
            {
              xfer += this->failed[_i45].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.failed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SendMessageBatchResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SendMessageBatchResponse");

  xfer += oprot->writeFieldBegin("successful", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->successful.size()));
    std::vector<SendMessageBatchResponseEntry> ::const_iterator _iter46;
    for (_iter46 = this->successful.begin(); _iter46 != this->successful.end(); ++_iter46)
    {
      xfer += (*_iter46).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failed", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->failed.size()));
    std::vector<MessageBatchErrorEntry> ::const_iterator _iter47;
    for (_iter47 = this->failed.begin(); _iter47 != this->failed.end(); ++_iter47)
    {
      xfer += (*_iter47).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SendMessageBatchResponse &a, SendMessageBatchResponse &b) {
  using ::std::swap;
  swap(a.successful, b.successful);
  swap(a.failed, b.failed);
  swap(a.__isset, b.__isset);
}

SendMessageBatchResponse::SendMessageBatchResponse(const SendMessageBatchResponse& other48) {
  successful = other48.successful;
  failed = other48.failed;
  __isset = other48.__isset;
}
SendMessageBatchResponse& SendMessageBatchResponse::operator=(const SendMessageBatchResponse& other49) {
  successful = other49.successful;
  failed = other49.failed;
  __isset = other49.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SendMessageBatchResponse& obj) {
  using apache::thrift::to_string;
  out << "SendMessageBatchResponse(";
  out << "successful=" << to_string(obj.successful);
  out << ", " << "failed=" << to_string(obj.failed);
  out << ")";
  return out;
}


ReceiveMessageRequest::~ReceiveMessageRequest() throw() {
}


void ReceiveMessageRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void ReceiveMessageRequest::__set_maxReceiveMessageNumber(const int32_t val) {
  this->maxReceiveMessageNumber = val;
__isset.maxReceiveMessageNumber = true;
}

void ReceiveMessageRequest::__set_maxReceiveMessageWaitSeconds(const int32_t val) {
  this->maxReceiveMessageWaitSeconds = val;
__isset.maxReceiveMessageWaitSeconds = true;
}

void ReceiveMessageRequest::__set_attributeName(const std::string& val) {
  this->attributeName = val;
__isset.attributeName = true;
}

void ReceiveMessageRequest::__set_attributeValue(const MessageAttribute& val) {
  this->attributeValue = val;
__isset.attributeValue = true;
}

void ReceiveMessageRequest::__set_tagName(const std::string& val) {
  this->tagName = val;
__isset.tagName = true;
}

const char* ReceiveMessageRequest::ascii_fingerprint = "862183CF03CF29841508A1BD149C6127";
const uint8_t ReceiveMessageRequest::binary_fingerprint[16] = {0x86,0x21,0x83,0xCF,0x03,0xCF,0x29,0x84,0x15,0x08,0xA1,0xBD,0x14,0x9C,0x61,0x27};

uint32_t ReceiveMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxReceiveMessageNumber);
          this->__isset.maxReceiveMessageNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxReceiveMessageWaitSeconds);
          this->__isset.maxReceiveMessageWaitSeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->attributeName);
          this->__isset.attributeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attributeValue.read(iprot);
          this->__isset.attributeValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          this->__isset.tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ReceiveMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ReceiveMessageRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.maxReceiveMessageNumber) {
    xfer += oprot->writeFieldBegin("maxReceiveMessageNumber", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->maxReceiveMessageNumber);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxReceiveMessageWaitSeconds) {
    xfer += oprot->writeFieldBegin("maxReceiveMessageWaitSeconds", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->maxReceiveMessageWaitSeconds);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributeName) {
    xfer += oprot->writeFieldBegin("attributeName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->attributeName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributeValue) {
    xfer += oprot->writeFieldBegin("attributeValue", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->attributeValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tagName) {
    xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->tagName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ReceiveMessageRequest &a, ReceiveMessageRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.maxReceiveMessageNumber, b.maxReceiveMessageNumber);
  swap(a.maxReceiveMessageWaitSeconds, b.maxReceiveMessageWaitSeconds);
  swap(a.attributeName, b.attributeName);
  swap(a.attributeValue, b.attributeValue);
  swap(a.tagName, b.tagName);
  swap(a.__isset, b.__isset);
}

ReceiveMessageRequest::ReceiveMessageRequest(const ReceiveMessageRequest& other50) {
  queueName = other50.queueName;
  maxReceiveMessageNumber = other50.maxReceiveMessageNumber;
  maxReceiveMessageWaitSeconds = other50.maxReceiveMessageWaitSeconds;
  attributeName = other50.attributeName;
  attributeValue = other50.attributeValue;
  tagName = other50.tagName;
  __isset = other50.__isset;
}
ReceiveMessageRequest& ReceiveMessageRequest::operator=(const ReceiveMessageRequest& other51) {
  queueName = other51.queueName;
  maxReceiveMessageNumber = other51.maxReceiveMessageNumber;
  maxReceiveMessageWaitSeconds = other51.maxReceiveMessageWaitSeconds;
  attributeName = other51.attributeName;
  attributeValue = other51.attributeValue;
  tagName = other51.tagName;
  __isset = other51.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ReceiveMessageRequest& obj) {
  using apache::thrift::to_string;
  out << "ReceiveMessageRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "maxReceiveMessageNumber="; (obj.__isset.maxReceiveMessageNumber ? (out << to_string(obj.maxReceiveMessageNumber)) : (out << "<null>"));
  out << ", " << "maxReceiveMessageWaitSeconds="; (obj.__isset.maxReceiveMessageWaitSeconds ? (out << to_string(obj.maxReceiveMessageWaitSeconds)) : (out << "<null>"));
  out << ", " << "attributeName="; (obj.__isset.attributeName ? (out << to_string(obj.attributeName)) : (out << "<null>"));
  out << ", " << "attributeValue="; (obj.__isset.attributeValue ? (out << to_string(obj.attributeValue)) : (out << "<null>"));
  out << ", " << "tagName="; (obj.__isset.tagName ? (out << to_string(obj.tagName)) : (out << "<null>"));
  out << ")";
  return out;
}


ReceiveMessageResponse::~ReceiveMessageResponse() throw() {
}


void ReceiveMessageResponse::__set_messageID(const std::string& val) {
  this->messageID = val;
}

void ReceiveMessageResponse::__set_receiptHandle(const std::string& val) {
  this->receiptHandle = val;
}

void ReceiveMessageResponse::__set_messageBody(const std::string& val) {
  this->messageBody = val;
}

void ReceiveMessageResponse::__set_attributes(const std::map<std::string, std::string> & val) {
  this->attributes = val;
__isset.attributes = true;
}

void ReceiveMessageResponse::__set_messageAttributes(const std::map<std::string, MessageAttribute> & val) {
  this->messageAttributes = val;
__isset.messageAttributes = true;
}

const char* ReceiveMessageResponse::ascii_fingerprint = "D421FB2DE8A6AAC654DD94A9D3D05041";
const uint8_t ReceiveMessageResponse::binary_fingerprint[16] = {0xD4,0x21,0xFB,0x2D,0xE8,0xA6,0xAA,0xC6,0x54,0xDD,0x94,0xA9,0xD3,0xD0,0x50,0x41};

uint32_t ReceiveMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_messageID = false;
  bool isset_receiptHandle = false;
  bool isset_messageBody = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageID);
          isset_messageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receiptHandle);
          isset_receiptHandle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageBody);
          isset_messageBody = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->attributes.clear();
            uint32_t _size52;
            ::apache::thrift::protocol::TType _ktype53;
            ::apache::thrift::protocol::TType _vtype54;
            xfer += iprot->readMapBegin(_ktype53, _vtype54, _size52);
            uint32_t _i56;
            for (_i56 = 0; _i56 < _size52; ++_i56)
            {
              std::string _key57;
              xfer += iprot->readString(_key57);
              std::string& _val58 = this->attributes[_key57];
              xfer += iprot->readString(_val58);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->messageAttributes.clear();
            uint32_t _size59;
            ::apache::thrift::protocol::TType _ktype60;
            ::apache::thrift::protocol::TType _vtype61;
            xfer += iprot->readMapBegin(_ktype60, _vtype61, _size59);
            uint32_t _i63;
            for (_i63 = 0; _i63 < _size59; ++_i63)
            {
              std::string _key64;
              xfer += iprot->readString(_key64);
              MessageAttribute& _val65 = this->messageAttributes[_key64];
              xfer += _val65.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.messageAttributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_messageID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_receiptHandle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_messageBody)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ReceiveMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ReceiveMessageResponse");

  xfer += oprot->writeFieldBegin("messageID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->messageID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiptHandle", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->receiptHandle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageBody", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->messageBody);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->attributes.size()));
      std::map<std::string, std::string> ::const_iterator _iter66;
      for (_iter66 = this->attributes.begin(); _iter66 != this->attributes.end(); ++_iter66)
      {
        xfer += oprot->writeString(_iter66->first);
        xfer += oprot->writeString(_iter66->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messageAttributes) {
    xfer += oprot->writeFieldBegin("messageAttributes", ::apache::thrift::protocol::T_MAP, 5);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messageAttributes.size()));
      std::map<std::string, MessageAttribute> ::const_iterator _iter67;
      for (_iter67 = this->messageAttributes.begin(); _iter67 != this->messageAttributes.end(); ++_iter67)
      {
        xfer += oprot->writeString(_iter67->first);
        xfer += _iter67->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ReceiveMessageResponse &a, ReceiveMessageResponse &b) {
  using ::std::swap;
  swap(a.messageID, b.messageID);
  swap(a.receiptHandle, b.receiptHandle);
  swap(a.messageBody, b.messageBody);
  swap(a.attributes, b.attributes);
  swap(a.messageAttributes, b.messageAttributes);
  swap(a.__isset, b.__isset);
}

ReceiveMessageResponse::ReceiveMessageResponse(const ReceiveMessageResponse& other68) {
  messageID = other68.messageID;
  receiptHandle = other68.receiptHandle;
  messageBody = other68.messageBody;
  attributes = other68.attributes;
  messageAttributes = other68.messageAttributes;
  __isset = other68.__isset;
}
ReceiveMessageResponse& ReceiveMessageResponse::operator=(const ReceiveMessageResponse& other69) {
  messageID = other69.messageID;
  receiptHandle = other69.receiptHandle;
  messageBody = other69.messageBody;
  attributes = other69.attributes;
  messageAttributes = other69.messageAttributes;
  __isset = other69.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ReceiveMessageResponse& obj) {
  using apache::thrift::to_string;
  out << "ReceiveMessageResponse(";
  out << "messageID=" << to_string(obj.messageID);
  out << ", " << "receiptHandle=" << to_string(obj.receiptHandle);
  out << ", " << "messageBody=" << to_string(obj.messageBody);
  out << ", " << "attributes="; (obj.__isset.attributes ? (out << to_string(obj.attributes)) : (out << "<null>"));
  out << ", " << "messageAttributes="; (obj.__isset.messageAttributes ? (out << to_string(obj.messageAttributes)) : (out << "<null>"));
  out << ")";
  return out;
}


ChangeMessageVisibilityRequest::~ChangeMessageVisibilityRequest() throw() {
}


void ChangeMessageVisibilityRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void ChangeMessageVisibilityRequest::__set_receiptHandle(const std::string& val) {
  this->receiptHandle = val;
}

void ChangeMessageVisibilityRequest::__set_invisibilitySeconds(const int32_t val) {
  this->invisibilitySeconds = val;
}

const char* ChangeMessageVisibilityRequest::ascii_fingerprint = "343DA57F446177400B333DC49B037B0C";
const uint8_t ChangeMessageVisibilityRequest::binary_fingerprint[16] = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};

uint32_t ChangeMessageVisibilityRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_receiptHandle = false;
  bool isset_invisibilitySeconds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receiptHandle);
          isset_receiptHandle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->invisibilitySeconds);
          isset_invisibilitySeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_receiptHandle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_invisibilitySeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ChangeMessageVisibilityRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ChangeMessageVisibilityRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiptHandle", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->receiptHandle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invisibilitySeconds", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->invisibilitySeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ChangeMessageVisibilityRequest &a, ChangeMessageVisibilityRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.receiptHandle, b.receiptHandle);
  swap(a.invisibilitySeconds, b.invisibilitySeconds);
}

ChangeMessageVisibilityRequest::ChangeMessageVisibilityRequest(const ChangeMessageVisibilityRequest& other70) {
  queueName = other70.queueName;
  receiptHandle = other70.receiptHandle;
  invisibilitySeconds = other70.invisibilitySeconds;
}
ChangeMessageVisibilityRequest& ChangeMessageVisibilityRequest::operator=(const ChangeMessageVisibilityRequest& other71) {
  queueName = other71.queueName;
  receiptHandle = other71.receiptHandle;
  invisibilitySeconds = other71.invisibilitySeconds;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ChangeMessageVisibilityRequest& obj) {
  using apache::thrift::to_string;
  out << "ChangeMessageVisibilityRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "receiptHandle=" << to_string(obj.receiptHandle);
  out << ", " << "invisibilitySeconds=" << to_string(obj.invisibilitySeconds);
  out << ")";
  return out;
}


ChangeMessageVisibilityBatchRequestEntry::~ChangeMessageVisibilityBatchRequestEntry() throw() {
}


void ChangeMessageVisibilityBatchRequestEntry::__set_receiptHandle(const std::string& val) {
  this->receiptHandle = val;
}

void ChangeMessageVisibilityBatchRequestEntry::__set_invisibilitySeconds(const int32_t val) {
  this->invisibilitySeconds = val;
}

const char* ChangeMessageVisibilityBatchRequestEntry::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t ChangeMessageVisibilityBatchRequestEntry::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t ChangeMessageVisibilityBatchRequestEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_receiptHandle = false;
  bool isset_invisibilitySeconds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receiptHandle);
          isset_receiptHandle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->invisibilitySeconds);
          isset_invisibilitySeconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_receiptHandle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_invisibilitySeconds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ChangeMessageVisibilityBatchRequestEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ChangeMessageVisibilityBatchRequestEntry");

  xfer += oprot->writeFieldBegin("receiptHandle", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->receiptHandle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invisibilitySeconds", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->invisibilitySeconds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ChangeMessageVisibilityBatchRequestEntry &a, ChangeMessageVisibilityBatchRequestEntry &b) {
  using ::std::swap;
  swap(a.receiptHandle, b.receiptHandle);
  swap(a.invisibilitySeconds, b.invisibilitySeconds);
}

ChangeMessageVisibilityBatchRequestEntry::ChangeMessageVisibilityBatchRequestEntry(const ChangeMessageVisibilityBatchRequestEntry& other72) {
  receiptHandle = other72.receiptHandle;
  invisibilitySeconds = other72.invisibilitySeconds;
}
ChangeMessageVisibilityBatchRequestEntry& ChangeMessageVisibilityBatchRequestEntry::operator=(const ChangeMessageVisibilityBatchRequestEntry& other73) {
  receiptHandle = other73.receiptHandle;
  invisibilitySeconds = other73.invisibilitySeconds;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ChangeMessageVisibilityBatchRequestEntry& obj) {
  using apache::thrift::to_string;
  out << "ChangeMessageVisibilityBatchRequestEntry(";
  out << "receiptHandle=" << to_string(obj.receiptHandle);
  out << ", " << "invisibilitySeconds=" << to_string(obj.invisibilitySeconds);
  out << ")";
  return out;
}


ChangeMessageVisibilityBatchRequest::~ChangeMessageVisibilityBatchRequest() throw() {
}


void ChangeMessageVisibilityBatchRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void ChangeMessageVisibilityBatchRequest::__set_changeMessageVisibilityRequestEntryList(const std::vector<ChangeMessageVisibilityBatchRequestEntry> & val) {
  this->changeMessageVisibilityRequestEntryList = val;
}

const char* ChangeMessageVisibilityBatchRequest::ascii_fingerprint = "B87B6F57864ED98AD1BA3E1CD6F87805";
const uint8_t ChangeMessageVisibilityBatchRequest::binary_fingerprint[16] = {0xB8,0x7B,0x6F,0x57,0x86,0x4E,0xD9,0x8A,0xD1,0xBA,0x3E,0x1C,0xD6,0xF8,0x78,0x05};

uint32_t ChangeMessageVisibilityBatchRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_changeMessageVisibilityRequestEntryList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->changeMessageVisibilityRequestEntryList.clear();
            uint32_t _size74;
            ::apache::thrift::protocol::TType _etype77;
            xfer += iprot->readListBegin(_etype77, _size74);
            this->changeMessageVisibilityRequestEntryList.resize(_size74);
            uint32_t _i78;
            for (_i78 = 0; _i78 < _size74; ++_i78)
            {
              xfer += this->changeMessageVisibilityRequestEntryList[_i78].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_changeMessageVisibilityRequestEntryList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_changeMessageVisibilityRequestEntryList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ChangeMessageVisibilityBatchRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ChangeMessageVisibilityBatchRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("changeMessageVisibilityRequestEntryList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->changeMessageVisibilityRequestEntryList.size()));
    std::vector<ChangeMessageVisibilityBatchRequestEntry> ::const_iterator _iter79;
    for (_iter79 = this->changeMessageVisibilityRequestEntryList.begin(); _iter79 != this->changeMessageVisibilityRequestEntryList.end(); ++_iter79)
    {
      xfer += (*_iter79).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ChangeMessageVisibilityBatchRequest &a, ChangeMessageVisibilityBatchRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.changeMessageVisibilityRequestEntryList, b.changeMessageVisibilityRequestEntryList);
}

ChangeMessageVisibilityBatchRequest::ChangeMessageVisibilityBatchRequest(const ChangeMessageVisibilityBatchRequest& other80) {
  queueName = other80.queueName;
  changeMessageVisibilityRequestEntryList = other80.changeMessageVisibilityRequestEntryList;
}
ChangeMessageVisibilityBatchRequest& ChangeMessageVisibilityBatchRequest::operator=(const ChangeMessageVisibilityBatchRequest& other81) {
  queueName = other81.queueName;
  changeMessageVisibilityRequestEntryList = other81.changeMessageVisibilityRequestEntryList;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ChangeMessageVisibilityBatchRequest& obj) {
  using apache::thrift::to_string;
  out << "ChangeMessageVisibilityBatchRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "changeMessageVisibilityRequestEntryList=" << to_string(obj.changeMessageVisibilityRequestEntryList);
  out << ")";
  return out;
}


ChangeMessageVisibilityBatchResponse::~ChangeMessageVisibilityBatchResponse() throw() {
}


void ChangeMessageVisibilityBatchResponse::__set_successful(const std::vector<std::string> & val) {
  this->successful = val;
}

void ChangeMessageVisibilityBatchResponse::__set_failed(const std::vector<MessageBatchErrorEntry> & val) {
  this->failed = val;
}

const char* ChangeMessageVisibilityBatchResponse::ascii_fingerprint = "6A455D2E0AF8BC36FC02B58A4721860F";
const uint8_t ChangeMessageVisibilityBatchResponse::binary_fingerprint[16] = {0x6A,0x45,0x5D,0x2E,0x0A,0xF8,0xBC,0x36,0xFC,0x02,0xB5,0x8A,0x47,0x21,0x86,0x0F};

uint32_t ChangeMessageVisibilityBatchResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->successful.clear();
            uint32_t _size82;
            ::apache::thrift::protocol::TType _etype85;
            xfer += iprot->readListBegin(_etype85, _size82);
            this->successful.resize(_size82);
            uint32_t _i86;
            for (_i86 = 0; _i86 < _size82; ++_i86)
            {
              xfer += iprot->readString(this->successful[_i86]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.successful = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->failed.clear();
            uint32_t _size87;
            ::apache::thrift::protocol::TType _etype90;
            xfer += iprot->readListBegin(_etype90, _size87);
            this->failed.resize(_size87);
            uint32_t _i91;
            for (_i91 = 0; _i91 < _size87; ++_i91)
            {
              xfer += this->failed[_i91].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.failed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChangeMessageVisibilityBatchResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ChangeMessageVisibilityBatchResponse");

  xfer += oprot->writeFieldBegin("successful", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->successful.size()));
    std::vector<std::string> ::const_iterator _iter92;
    for (_iter92 = this->successful.begin(); _iter92 != this->successful.end(); ++_iter92)
    {
      xfer += oprot->writeString((*_iter92));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failed", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->failed.size()));
    std::vector<MessageBatchErrorEntry> ::const_iterator _iter93;
    for (_iter93 = this->failed.begin(); _iter93 != this->failed.end(); ++_iter93)
    {
      xfer += (*_iter93).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ChangeMessageVisibilityBatchResponse &a, ChangeMessageVisibilityBatchResponse &b) {
  using ::std::swap;
  swap(a.successful, b.successful);
  swap(a.failed, b.failed);
  swap(a.__isset, b.__isset);
}

ChangeMessageVisibilityBatchResponse::ChangeMessageVisibilityBatchResponse(const ChangeMessageVisibilityBatchResponse& other94) {
  successful = other94.successful;
  failed = other94.failed;
  __isset = other94.__isset;
}
ChangeMessageVisibilityBatchResponse& ChangeMessageVisibilityBatchResponse::operator=(const ChangeMessageVisibilityBatchResponse& other95) {
  successful = other95.successful;
  failed = other95.failed;
  __isset = other95.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ChangeMessageVisibilityBatchResponse& obj) {
  using apache::thrift::to_string;
  out << "ChangeMessageVisibilityBatchResponse(";
  out << "successful=" << to_string(obj.successful);
  out << ", " << "failed=" << to_string(obj.failed);
  out << ")";
  return out;
}


DeleteMessageRequest::~DeleteMessageRequest() throw() {
}


void DeleteMessageRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void DeleteMessageRequest::__set_receiptHandle(const std::string& val) {
  this->receiptHandle = val;
}

const char* DeleteMessageRequest::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t DeleteMessageRequest::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t DeleteMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_receiptHandle = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receiptHandle);
          isset_receiptHandle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_receiptHandle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeleteMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeleteMessageRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiptHandle", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->receiptHandle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeleteMessageRequest &a, DeleteMessageRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.receiptHandle, b.receiptHandle);
}

DeleteMessageRequest::DeleteMessageRequest(const DeleteMessageRequest& other96) {
  queueName = other96.queueName;
  receiptHandle = other96.receiptHandle;
}
DeleteMessageRequest& DeleteMessageRequest::operator=(const DeleteMessageRequest& other97) {
  queueName = other97.queueName;
  receiptHandle = other97.receiptHandle;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeleteMessageRequest& obj) {
  using apache::thrift::to_string;
  out << "DeleteMessageRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "receiptHandle=" << to_string(obj.receiptHandle);
  out << ")";
  return out;
}


DeleteMessageBatchRequestEntry::~DeleteMessageBatchRequestEntry() throw() {
}


void DeleteMessageBatchRequestEntry::__set_receiptHandle(const std::string& val) {
  this->receiptHandle = val;
}

const char* DeleteMessageBatchRequestEntry::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t DeleteMessageBatchRequestEntry::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t DeleteMessageBatchRequestEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_receiptHandle = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receiptHandle);
          isset_receiptHandle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_receiptHandle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeleteMessageBatchRequestEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeleteMessageBatchRequestEntry");

  xfer += oprot->writeFieldBegin("receiptHandle", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->receiptHandle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeleteMessageBatchRequestEntry &a, DeleteMessageBatchRequestEntry &b) {
  using ::std::swap;
  swap(a.receiptHandle, b.receiptHandle);
}

DeleteMessageBatchRequestEntry::DeleteMessageBatchRequestEntry(const DeleteMessageBatchRequestEntry& other98) {
  receiptHandle = other98.receiptHandle;
}
DeleteMessageBatchRequestEntry& DeleteMessageBatchRequestEntry::operator=(const DeleteMessageBatchRequestEntry& other99) {
  receiptHandle = other99.receiptHandle;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeleteMessageBatchRequestEntry& obj) {
  using apache::thrift::to_string;
  out << "DeleteMessageBatchRequestEntry(";
  out << "receiptHandle=" << to_string(obj.receiptHandle);
  out << ")";
  return out;
}


DeleteMessageBatchRequest::~DeleteMessageBatchRequest() throw() {
}


void DeleteMessageBatchRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void DeleteMessageBatchRequest::__set_deleteMessageBatchRequestEntryList(const std::vector<DeleteMessageBatchRequestEntry> & val) {
  this->deleteMessageBatchRequestEntryList = val;
}

const char* DeleteMessageBatchRequest::ascii_fingerprint = "00A77B47615C8CC31092FB2CFCE06E52";
const uint8_t DeleteMessageBatchRequest::binary_fingerprint[16] = {0x00,0xA7,0x7B,0x47,0x61,0x5C,0x8C,0xC3,0x10,0x92,0xFB,0x2C,0xFC,0xE0,0x6E,0x52};

uint32_t DeleteMessageBatchRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_deleteMessageBatchRequestEntryList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->deleteMessageBatchRequestEntryList.clear();
            uint32_t _size100;
            ::apache::thrift::protocol::TType _etype103;
            xfer += iprot->readListBegin(_etype103, _size100);
            this->deleteMessageBatchRequestEntryList.resize(_size100);
            uint32_t _i104;
            for (_i104 = 0; _i104 < _size100; ++_i104)
            {
              xfer += this->deleteMessageBatchRequestEntryList[_i104].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_deleteMessageBatchRequestEntryList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_deleteMessageBatchRequestEntryList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeleteMessageBatchRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeleteMessageBatchRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deleteMessageBatchRequestEntryList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->deleteMessageBatchRequestEntryList.size()));
    std::vector<DeleteMessageBatchRequestEntry> ::const_iterator _iter105;
    for (_iter105 = this->deleteMessageBatchRequestEntryList.begin(); _iter105 != this->deleteMessageBatchRequestEntryList.end(); ++_iter105)
    {
      xfer += (*_iter105).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeleteMessageBatchRequest &a, DeleteMessageBatchRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.deleteMessageBatchRequestEntryList, b.deleteMessageBatchRequestEntryList);
}

DeleteMessageBatchRequest::DeleteMessageBatchRequest(const DeleteMessageBatchRequest& other106) {
  queueName = other106.queueName;
  deleteMessageBatchRequestEntryList = other106.deleteMessageBatchRequestEntryList;
}
DeleteMessageBatchRequest& DeleteMessageBatchRequest::operator=(const DeleteMessageBatchRequest& other107) {
  queueName = other107.queueName;
  deleteMessageBatchRequestEntryList = other107.deleteMessageBatchRequestEntryList;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeleteMessageBatchRequest& obj) {
  using apache::thrift::to_string;
  out << "DeleteMessageBatchRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "deleteMessageBatchRequestEntryList=" << to_string(obj.deleteMessageBatchRequestEntryList);
  out << ")";
  return out;
}


DeleteMessageBatchResponse::~DeleteMessageBatchResponse() throw() {
}


void DeleteMessageBatchResponse::__set_successful(const std::vector<std::string> & val) {
  this->successful = val;
}

void DeleteMessageBatchResponse::__set_failed(const std::vector<MessageBatchErrorEntry> & val) {
  this->failed = val;
}

const char* DeleteMessageBatchResponse::ascii_fingerprint = "6A455D2E0AF8BC36FC02B58A4721860F";
const uint8_t DeleteMessageBatchResponse::binary_fingerprint[16] = {0x6A,0x45,0x5D,0x2E,0x0A,0xF8,0xBC,0x36,0xFC,0x02,0xB5,0x8A,0x47,0x21,0x86,0x0F};

uint32_t DeleteMessageBatchResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->successful.clear();
            uint32_t _size108;
            ::apache::thrift::protocol::TType _etype111;
            xfer += iprot->readListBegin(_etype111, _size108);
            this->successful.resize(_size108);
            uint32_t _i112;
            for (_i112 = 0; _i112 < _size108; ++_i112)
            {
              xfer += iprot->readString(this->successful[_i112]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.successful = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->failed.clear();
            uint32_t _size113;
            ::apache::thrift::protocol::TType _etype116;
            xfer += iprot->readListBegin(_etype116, _size113);
            this->failed.resize(_size113);
            uint32_t _i117;
            for (_i117 = 0; _i117 < _size113; ++_i117)
            {
              xfer += this->failed[_i117].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.failed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteMessageBatchResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeleteMessageBatchResponse");

  xfer += oprot->writeFieldBegin("successful", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->successful.size()));
    std::vector<std::string> ::const_iterator _iter118;
    for (_iter118 = this->successful.begin(); _iter118 != this->successful.end(); ++_iter118)
    {
      xfer += oprot->writeString((*_iter118));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failed", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->failed.size()));
    std::vector<MessageBatchErrorEntry> ::const_iterator _iter119;
    for (_iter119 = this->failed.begin(); _iter119 != this->failed.end(); ++_iter119)
    {
      xfer += (*_iter119).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeleteMessageBatchResponse &a, DeleteMessageBatchResponse &b) {
  using ::std::swap;
  swap(a.successful, b.successful);
  swap(a.failed, b.failed);
  swap(a.__isset, b.__isset);
}

DeleteMessageBatchResponse::DeleteMessageBatchResponse(const DeleteMessageBatchResponse& other120) {
  successful = other120.successful;
  failed = other120.failed;
  __isset = other120.__isset;
}
DeleteMessageBatchResponse& DeleteMessageBatchResponse::operator=(const DeleteMessageBatchResponse& other121) {
  successful = other121.successful;
  failed = other121.failed;
  __isset = other121.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeleteMessageBatchResponse& obj) {
  using apache::thrift::to_string;
  out << "DeleteMessageBatchResponse(";
  out << "successful=" << to_string(obj.successful);
  out << ", " << "failed=" << to_string(obj.failed);
  out << ")";
  return out;
}


DeadMessageRequest::~DeadMessageRequest() throw() {
}


void DeadMessageRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void DeadMessageRequest::__set_receiptHandle(const std::string& val) {
  this->receiptHandle = val;
}

const char* DeadMessageRequest::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t DeadMessageRequest::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t DeadMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_receiptHandle = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receiptHandle);
          isset_receiptHandle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_receiptHandle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeadMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeadMessageRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiptHandle", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->receiptHandle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeadMessageRequest &a, DeadMessageRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.receiptHandle, b.receiptHandle);
}

DeadMessageRequest::DeadMessageRequest(const DeadMessageRequest& other122) {
  queueName = other122.queueName;
  receiptHandle = other122.receiptHandle;
}
DeadMessageRequest& DeadMessageRequest::operator=(const DeadMessageRequest& other123) {
  queueName = other123.queueName;
  receiptHandle = other123.receiptHandle;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeadMessageRequest& obj) {
  using apache::thrift::to_string;
  out << "DeadMessageRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "receiptHandle=" << to_string(obj.receiptHandle);
  out << ")";
  return out;
}


DeadMessageBatchRequestEntry::~DeadMessageBatchRequestEntry() throw() {
}


void DeadMessageBatchRequestEntry::__set_receiptHandle(const std::string& val) {
  this->receiptHandle = val;
}

const char* DeadMessageBatchRequestEntry::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t DeadMessageBatchRequestEntry::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t DeadMessageBatchRequestEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_receiptHandle = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receiptHandle);
          isset_receiptHandle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_receiptHandle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeadMessageBatchRequestEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeadMessageBatchRequestEntry");

  xfer += oprot->writeFieldBegin("receiptHandle", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->receiptHandle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeadMessageBatchRequestEntry &a, DeadMessageBatchRequestEntry &b) {
  using ::std::swap;
  swap(a.receiptHandle, b.receiptHandle);
}

DeadMessageBatchRequestEntry::DeadMessageBatchRequestEntry(const DeadMessageBatchRequestEntry& other124) {
  receiptHandle = other124.receiptHandle;
}
DeadMessageBatchRequestEntry& DeadMessageBatchRequestEntry::operator=(const DeadMessageBatchRequestEntry& other125) {
  receiptHandle = other125.receiptHandle;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeadMessageBatchRequestEntry& obj) {
  using apache::thrift::to_string;
  out << "DeadMessageBatchRequestEntry(";
  out << "receiptHandle=" << to_string(obj.receiptHandle);
  out << ")";
  return out;
}


DeadMessageBatchRequest::~DeadMessageBatchRequest() throw() {
}


void DeadMessageBatchRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void DeadMessageBatchRequest::__set_deadMessageBatchRequestEntryList(const std::vector<DeadMessageBatchRequestEntry> & val) {
  this->deadMessageBatchRequestEntryList = val;
}

const char* DeadMessageBatchRequest::ascii_fingerprint = "00A77B47615C8CC31092FB2CFCE06E52";
const uint8_t DeadMessageBatchRequest::binary_fingerprint[16] = {0x00,0xA7,0x7B,0x47,0x61,0x5C,0x8C,0xC3,0x10,0x92,0xFB,0x2C,0xFC,0xE0,0x6E,0x52};

uint32_t DeadMessageBatchRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_deadMessageBatchRequestEntryList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->deadMessageBatchRequestEntryList.clear();
            uint32_t _size126;
            ::apache::thrift::protocol::TType _etype129;
            xfer += iprot->readListBegin(_etype129, _size126);
            this->deadMessageBatchRequestEntryList.resize(_size126);
            uint32_t _i130;
            for (_i130 = 0; _i130 < _size126; ++_i130)
            {
              xfer += this->deadMessageBatchRequestEntryList[_i130].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_deadMessageBatchRequestEntryList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_deadMessageBatchRequestEntryList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeadMessageBatchRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeadMessageBatchRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deadMessageBatchRequestEntryList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->deadMessageBatchRequestEntryList.size()));
    std::vector<DeadMessageBatchRequestEntry> ::const_iterator _iter131;
    for (_iter131 = this->deadMessageBatchRequestEntryList.begin(); _iter131 != this->deadMessageBatchRequestEntryList.end(); ++_iter131)
    {
      xfer += (*_iter131).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeadMessageBatchRequest &a, DeadMessageBatchRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.deadMessageBatchRequestEntryList, b.deadMessageBatchRequestEntryList);
}

DeadMessageBatchRequest::DeadMessageBatchRequest(const DeadMessageBatchRequest& other132) {
  queueName = other132.queueName;
  deadMessageBatchRequestEntryList = other132.deadMessageBatchRequestEntryList;
}
DeadMessageBatchRequest& DeadMessageBatchRequest::operator=(const DeadMessageBatchRequest& other133) {
  queueName = other133.queueName;
  deadMessageBatchRequestEntryList = other133.deadMessageBatchRequestEntryList;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeadMessageBatchRequest& obj) {
  using apache::thrift::to_string;
  out << "DeadMessageBatchRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "deadMessageBatchRequestEntryList=" << to_string(obj.deadMessageBatchRequestEntryList);
  out << ")";
  return out;
}


DeadMessageBatchResponse::~DeadMessageBatchResponse() throw() {
}


void DeadMessageBatchResponse::__set_successful(const std::vector<std::string> & val) {
  this->successful = val;
}

void DeadMessageBatchResponse::__set_failed(const std::vector<MessageBatchErrorEntry> & val) {
  this->failed = val;
}

const char* DeadMessageBatchResponse::ascii_fingerprint = "6A455D2E0AF8BC36FC02B58A4721860F";
const uint8_t DeadMessageBatchResponse::binary_fingerprint[16] = {0x6A,0x45,0x5D,0x2E,0x0A,0xF8,0xBC,0x36,0xFC,0x02,0xB5,0x8A,0x47,0x21,0x86,0x0F};

uint32_t DeadMessageBatchResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->successful.clear();
            uint32_t _size134;
            ::apache::thrift::protocol::TType _etype137;
            xfer += iprot->readListBegin(_etype137, _size134);
            this->successful.resize(_size134);
            uint32_t _i138;
            for (_i138 = 0; _i138 < _size134; ++_i138)
            {
              xfer += iprot->readString(this->successful[_i138]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.successful = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->failed.clear();
            uint32_t _size139;
            ::apache::thrift::protocol::TType _etype142;
            xfer += iprot->readListBegin(_etype142, _size139);
            this->failed.resize(_size139);
            uint32_t _i143;
            for (_i143 = 0; _i143 < _size139; ++_i143)
            {
              xfer += this->failed[_i143].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.failed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeadMessageBatchResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeadMessageBatchResponse");

  xfer += oprot->writeFieldBegin("successful", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->successful.size()));
    std::vector<std::string> ::const_iterator _iter144;
    for (_iter144 = this->successful.begin(); _iter144 != this->successful.end(); ++_iter144)
    {
      xfer += oprot->writeString((*_iter144));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failed", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->failed.size()));
    std::vector<MessageBatchErrorEntry> ::const_iterator _iter145;
    for (_iter145 = this->failed.begin(); _iter145 != this->failed.end(); ++_iter145)
    {
      xfer += (*_iter145).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeadMessageBatchResponse &a, DeadMessageBatchResponse &b) {
  using ::std::swap;
  swap(a.successful, b.successful);
  swap(a.failed, b.failed);
  swap(a.__isset, b.__isset);
}

DeadMessageBatchResponse::DeadMessageBatchResponse(const DeadMessageBatchResponse& other146) {
  successful = other146.successful;
  failed = other146.failed;
  __isset = other146.__isset;
}
DeadMessageBatchResponse& DeadMessageBatchResponse::operator=(const DeadMessageBatchResponse& other147) {
  successful = other147.successful;
  failed = other147.failed;
  __isset = other147.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeadMessageBatchResponse& obj) {
  using apache::thrift::to_string;
  out << "DeadMessageBatchResponse(";
  out << "successful=" << to_string(obj.successful);
  out << ", " << "failed=" << to_string(obj.failed);
  out << ")";
  return out;
}


PeekMessageResponse::~PeekMessageResponse() throw() {
}


void PeekMessageResponse::__set_messageID(const std::string& val) {
  this->messageID = val;
}

void PeekMessageResponse::__set_messageBody(const std::string& val) {
  this->messageBody = val;
__isset.messageBody = true;
}

void PeekMessageResponse::__set_attributes(const std::map<std::string, std::string> & val) {
  this->attributes = val;
__isset.attributes = true;
}

void PeekMessageResponse::__set_messageAttributes(const std::map<std::string, MessageAttribute> & val) {
  this->messageAttributes = val;
__isset.messageAttributes = true;
}

void PeekMessageResponse::__set_e(const  ::emq::common::GalaxyEmqServiceException& val) {
  this->e = val;
__isset.e = true;
}

const char* PeekMessageResponse::ascii_fingerprint = "275DF3CDD7265EE122BC4DC68415EA16";
const uint8_t PeekMessageResponse::binary_fingerprint[16] = {0x27,0x5D,0xF3,0xCD,0xD7,0x26,0x5E,0xE1,0x22,0xBC,0x4D,0xC6,0x84,0x15,0xEA,0x16};

uint32_t PeekMessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_messageID = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageID);
          isset_messageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageBody);
          this->__isset.messageBody = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->attributes.clear();
            uint32_t _size148;
            ::apache::thrift::protocol::TType _ktype149;
            ::apache::thrift::protocol::TType _vtype150;
            xfer += iprot->readMapBegin(_ktype149, _vtype150, _size148);
            uint32_t _i152;
            for (_i152 = 0; _i152 < _size148; ++_i152)
            {
              std::string _key153;
              xfer += iprot->readString(_key153);
              std::string& _val154 = this->attributes[_key153];
              xfer += iprot->readString(_val154);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->messageAttributes.clear();
            uint32_t _size155;
            ::apache::thrift::protocol::TType _ktype156;
            ::apache::thrift::protocol::TType _vtype157;
            xfer += iprot->readMapBegin(_ktype156, _vtype157, _size155);
            uint32_t _i159;
            for (_i159 = 0; _i159 < _size155; ++_i159)
            {
              std::string _key160;
              xfer += iprot->readString(_key160);
              MessageAttribute& _val161 = this->messageAttributes[_key160];
              xfer += _val161.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.messageAttributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->e.read(iprot);
          this->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_messageID)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PeekMessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PeekMessageResponse");

  xfer += oprot->writeFieldBegin("messageID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->messageID);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageBody) {
    xfer += oprot->writeFieldBegin("messageBody", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->messageBody);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->attributes.size()));
      std::map<std::string, std::string> ::const_iterator _iter162;
      for (_iter162 = this->attributes.begin(); _iter162 != this->attributes.end(); ++_iter162)
      {
        xfer += oprot->writeString(_iter162->first);
        xfer += oprot->writeString(_iter162->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messageAttributes) {
    xfer += oprot->writeFieldBegin("messageAttributes", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messageAttributes.size()));
      std::map<std::string, MessageAttribute> ::const_iterator _iter163;
      for (_iter163 = this->messageAttributes.begin(); _iter163 != this->messageAttributes.end(); ++_iter163)
      {
        xfer += oprot->writeString(_iter163->first);
        xfer += _iter163->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.e) {
    xfer += oprot->writeFieldBegin("e", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->e.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PeekMessageResponse &a, PeekMessageResponse &b) {
  using ::std::swap;
  swap(a.messageID, b.messageID);
  swap(a.messageBody, b.messageBody);
  swap(a.attributes, b.attributes);
  swap(a.messageAttributes, b.messageAttributes);
  swap(a.e, b.e);
  swap(a.__isset, b.__isset);
}

PeekMessageResponse::PeekMessageResponse(const PeekMessageResponse& other164) {
  messageID = other164.messageID;
  messageBody = other164.messageBody;
  attributes = other164.attributes;
  messageAttributes = other164.messageAttributes;
  e = other164.e;
  __isset = other164.__isset;
}
PeekMessageResponse& PeekMessageResponse::operator=(const PeekMessageResponse& other165) {
  messageID = other165.messageID;
  messageBody = other165.messageBody;
  attributes = other165.attributes;
  messageAttributes = other165.messageAttributes;
  e = other165.e;
  __isset = other165.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PeekMessageResponse& obj) {
  using apache::thrift::to_string;
  out << "PeekMessageResponse(";
  out << "messageID=" << to_string(obj.messageID);
  out << ", " << "messageBody="; (obj.__isset.messageBody ? (out << to_string(obj.messageBody)) : (out << "<null>"));
  out << ", " << "attributes="; (obj.__isset.attributes ? (out << to_string(obj.attributes)) : (out << "<null>"));
  out << ", " << "messageAttributes="; (obj.__isset.messageAttributes ? (out << to_string(obj.messageAttributes)) : (out << "<null>"));
  out << ", " << "e="; (obj.__isset.e ? (out << to_string(obj.e)) : (out << "<null>"));
  out << ")";
  return out;
}


DeletePeekMessageRequest::~DeletePeekMessageRequest() throw() {
}


void DeletePeekMessageRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void DeletePeekMessageRequest::__set_receiptHandle(const std::string& val) {
  this->receiptHandle = val;
}

const char* DeletePeekMessageRequest::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t DeletePeekMessageRequest::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t DeletePeekMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_receiptHandle = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receiptHandle);
          isset_receiptHandle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_receiptHandle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeletePeekMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeletePeekMessageRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiptHandle", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->receiptHandle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeletePeekMessageRequest &a, DeletePeekMessageRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.receiptHandle, b.receiptHandle);
}

DeletePeekMessageRequest::DeletePeekMessageRequest(const DeletePeekMessageRequest& other166) {
  queueName = other166.queueName;
  receiptHandle = other166.receiptHandle;
}
DeletePeekMessageRequest& DeletePeekMessageRequest::operator=(const DeletePeekMessageRequest& other167) {
  queueName = other167.queueName;
  receiptHandle = other167.receiptHandle;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeletePeekMessageRequest& obj) {
  using apache::thrift::to_string;
  out << "DeletePeekMessageRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "receiptHandle=" << to_string(obj.receiptHandle);
  out << ")";
  return out;
}


DeletePeekMessageBatchEntry::~DeletePeekMessageBatchEntry() throw() {
}


void DeletePeekMessageBatchEntry::__set_receiptHandle(const std::string& val) {
  this->receiptHandle = val;
}

const char* DeletePeekMessageBatchEntry::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t DeletePeekMessageBatchEntry::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t DeletePeekMessageBatchEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_receiptHandle = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receiptHandle);
          isset_receiptHandle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_receiptHandle)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeletePeekMessageBatchEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeletePeekMessageBatchEntry");

  xfer += oprot->writeFieldBegin("receiptHandle", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->receiptHandle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeletePeekMessageBatchEntry &a, DeletePeekMessageBatchEntry &b) {
  using ::std::swap;
  swap(a.receiptHandle, b.receiptHandle);
}

DeletePeekMessageBatchEntry::DeletePeekMessageBatchEntry(const DeletePeekMessageBatchEntry& other168) {
  receiptHandle = other168.receiptHandle;
}
DeletePeekMessageBatchEntry& DeletePeekMessageBatchEntry::operator=(const DeletePeekMessageBatchEntry& other169) {
  receiptHandle = other169.receiptHandle;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeletePeekMessageBatchEntry& obj) {
  using apache::thrift::to_string;
  out << "DeletePeekMessageBatchEntry(";
  out << "receiptHandle=" << to_string(obj.receiptHandle);
  out << ")";
  return out;
}


DeletePeekMessageBatchRequest::~DeletePeekMessageBatchRequest() throw() {
}


void DeletePeekMessageBatchRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void DeletePeekMessageBatchRequest::__set_deletePeekMessageBatchEntryList(const std::vector<DeletePeekMessageBatchEntry> & val) {
  this->deletePeekMessageBatchEntryList = val;
}

const char* DeletePeekMessageBatchRequest::ascii_fingerprint = "00A77B47615C8CC31092FB2CFCE06E52";
const uint8_t DeletePeekMessageBatchRequest::binary_fingerprint[16] = {0x00,0xA7,0x7B,0x47,0x61,0x5C,0x8C,0xC3,0x10,0x92,0xFB,0x2C,0xFC,0xE0,0x6E,0x52};

uint32_t DeletePeekMessageBatchRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_deletePeekMessageBatchEntryList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->deletePeekMessageBatchEntryList.clear();
            uint32_t _size170;
            ::apache::thrift::protocol::TType _etype173;
            xfer += iprot->readListBegin(_etype173, _size170);
            this->deletePeekMessageBatchEntryList.resize(_size170);
            uint32_t _i174;
            for (_i174 = 0; _i174 < _size170; ++_i174)
            {
              xfer += this->deletePeekMessageBatchEntryList[_i174].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_deletePeekMessageBatchEntryList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_deletePeekMessageBatchEntryList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeletePeekMessageBatchRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeletePeekMessageBatchRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deletePeekMessageBatchEntryList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->deletePeekMessageBatchEntryList.size()));
    std::vector<DeletePeekMessageBatchEntry> ::const_iterator _iter175;
    for (_iter175 = this->deletePeekMessageBatchEntryList.begin(); _iter175 != this->deletePeekMessageBatchEntryList.end(); ++_iter175)
    {
      xfer += (*_iter175).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeletePeekMessageBatchRequest &a, DeletePeekMessageBatchRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.deletePeekMessageBatchEntryList, b.deletePeekMessageBatchEntryList);
}

DeletePeekMessageBatchRequest::DeletePeekMessageBatchRequest(const DeletePeekMessageBatchRequest& other176) {
  queueName = other176.queueName;
  deletePeekMessageBatchEntryList = other176.deletePeekMessageBatchEntryList;
}
DeletePeekMessageBatchRequest& DeletePeekMessageBatchRequest::operator=(const DeletePeekMessageBatchRequest& other177) {
  queueName = other177.queueName;
  deletePeekMessageBatchEntryList = other177.deletePeekMessageBatchEntryList;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeletePeekMessageBatchRequest& obj) {
  using apache::thrift::to_string;
  out << "DeletePeekMessageBatchRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "deletePeekMessageBatchEntryList=" << to_string(obj.deletePeekMessageBatchEntryList);
  out << ")";
  return out;
}


DeletePeekMessageBatchResponse::~DeletePeekMessageBatchResponse() throw() {
}


void DeletePeekMessageBatchResponse::__set_successful(const std::vector<std::string> & val) {
  this->successful = val;
}

void DeletePeekMessageBatchResponse::__set_failed(const std::vector<MessageBatchErrorEntry> & val) {
  this->failed = val;
}

const char* DeletePeekMessageBatchResponse::ascii_fingerprint = "6A455D2E0AF8BC36FC02B58A4721860F";
const uint8_t DeletePeekMessageBatchResponse::binary_fingerprint[16] = {0x6A,0x45,0x5D,0x2E,0x0A,0xF8,0xBC,0x36,0xFC,0x02,0xB5,0x8A,0x47,0x21,0x86,0x0F};

uint32_t DeletePeekMessageBatchResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->successful.clear();
            uint32_t _size178;
            ::apache::thrift::protocol::TType _etype181;
            xfer += iprot->readListBegin(_etype181, _size178);
            this->successful.resize(_size178);
            uint32_t _i182;
            for (_i182 = 0; _i182 < _size178; ++_i182)
            {
              xfer += iprot->readString(this->successful[_i182]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.successful = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->failed.clear();
            uint32_t _size183;
            ::apache::thrift::protocol::TType _etype186;
            xfer += iprot->readListBegin(_etype186, _size183);
            this->failed.resize(_size183);
            uint32_t _i187;
            for (_i187 = 0; _i187 < _size183; ++_i187)
            {
              xfer += this->failed[_i187].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.failed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeletePeekMessageBatchResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DeletePeekMessageBatchResponse");

  xfer += oprot->writeFieldBegin("successful", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->successful.size()));
    std::vector<std::string> ::const_iterator _iter188;
    for (_iter188 = this->successful.begin(); _iter188 != this->successful.end(); ++_iter188)
    {
      xfer += oprot->writeString((*_iter188));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failed", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->failed.size()));
    std::vector<MessageBatchErrorEntry> ::const_iterator _iter189;
    for (_iter189 = this->failed.begin(); _iter189 != this->failed.end(); ++_iter189)
    {
      xfer += (*_iter189).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DeletePeekMessageBatchResponse &a, DeletePeekMessageBatchResponse &b) {
  using ::std::swap;
  swap(a.successful, b.successful);
  swap(a.failed, b.failed);
  swap(a.__isset, b.__isset);
}

DeletePeekMessageBatchResponse::DeletePeekMessageBatchResponse(const DeletePeekMessageBatchResponse& other190) {
  successful = other190.successful;
  failed = other190.failed;
  __isset = other190.__isset;
}
DeletePeekMessageBatchResponse& DeletePeekMessageBatchResponse::operator=(const DeletePeekMessageBatchResponse& other191) {
  successful = other191.successful;
  failed = other191.failed;
  __isset = other191.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DeletePeekMessageBatchResponse& obj) {
  using apache::thrift::to_string;
  out << "DeletePeekMessageBatchResponse(";
  out << "successful=" << to_string(obj.successful);
  out << ", " << "failed=" << to_string(obj.failed);
  out << ")";
  return out;
}


PartitionTimeIntervalAndMaxNum::~PartitionTimeIntervalAndMaxNum() throw() {
}


void PartitionTimeIntervalAndMaxNum::__set_startTimestamp(const int64_t val) {
  this->startTimestamp = val;
__isset.startTimestamp = true;
}

void PartitionTimeIntervalAndMaxNum::__set_endTimestamp(const int64_t val) {
  this->endTimestamp = val;
__isset.endTimestamp = true;
}

void PartitionTimeIntervalAndMaxNum::__set_maxNum(const int32_t val) {
  this->maxNum = val;
__isset.maxNum = true;
}

void PartitionTimeIntervalAndMaxNum::__set_partitionId(const int32_t val) {
  this->partitionId = val;
__isset.partitionId = true;
}

const char* PartitionTimeIntervalAndMaxNum::ascii_fingerprint = "19F5063E70E69C42FA30BB9553B7D3A2";
const uint8_t PartitionTimeIntervalAndMaxNum::binary_fingerprint[16] = {0x19,0xF5,0x06,0x3E,0x70,0xE6,0x9C,0x42,0xFA,0x30,0xBB,0x95,0x53,0xB7,0xD3,0xA2};

uint32_t PartitionTimeIntervalAndMaxNum::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTimestamp);
          this->__isset.startTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endTimestamp);
          this->__isset.endTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxNum);
          this->__isset.maxNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->partitionId);
          this->__isset.partitionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PartitionTimeIntervalAndMaxNum::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PartitionTimeIntervalAndMaxNum");

  if (this->__isset.startTimestamp) {
    xfer += oprot->writeFieldBegin("startTimestamp", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->startTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.endTimestamp) {
    xfer += oprot->writeFieldBegin("endTimestamp", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->endTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxNum) {
    xfer += oprot->writeFieldBegin("maxNum", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->maxNum);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partitionId) {
    xfer += oprot->writeFieldBegin("partitionId", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->partitionId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PartitionTimeIntervalAndMaxNum &a, PartitionTimeIntervalAndMaxNum &b) {
  using ::std::swap;
  swap(a.startTimestamp, b.startTimestamp);
  swap(a.endTimestamp, b.endTimestamp);
  swap(a.maxNum, b.maxNum);
  swap(a.partitionId, b.partitionId);
  swap(a.__isset, b.__isset);
}

PartitionTimeIntervalAndMaxNum::PartitionTimeIntervalAndMaxNum(const PartitionTimeIntervalAndMaxNum& other192) {
  startTimestamp = other192.startTimestamp;
  endTimestamp = other192.endTimestamp;
  maxNum = other192.maxNum;
  partitionId = other192.partitionId;
  __isset = other192.__isset;
}
PartitionTimeIntervalAndMaxNum& PartitionTimeIntervalAndMaxNum::operator=(const PartitionTimeIntervalAndMaxNum& other193) {
  startTimestamp = other193.startTimestamp;
  endTimestamp = other193.endTimestamp;
  maxNum = other193.maxNum;
  partitionId = other193.partitionId;
  __isset = other193.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PartitionTimeIntervalAndMaxNum& obj) {
  using apache::thrift::to_string;
  out << "PartitionTimeIntervalAndMaxNum(";
  out << "startTimestamp="; (obj.__isset.startTimestamp ? (out << to_string(obj.startTimestamp)) : (out << "<null>"));
  out << ", " << "endTimestamp="; (obj.__isset.endTimestamp ? (out << to_string(obj.endTimestamp)) : (out << "<null>"));
  out << ", " << "maxNum="; (obj.__isset.maxNum ? (out << to_string(obj.maxNum)) : (out << "<null>"));
  out << ", " << "partitionId="; (obj.__isset.partitionId ? (out << to_string(obj.partitionId)) : (out << "<null>"));
  out << ")";
  return out;
}


PeekMessageArg::~PeekMessageArg() throw() {
}


void PeekMessageArg::__set_receiptHandle(const std::string& val) {
  this->receiptHandle = val;
}

void PeekMessageArg::__set_receiptHandleList(const std::vector<std::string> & val) {
  this->receiptHandleList = val;
}

void PeekMessageArg::__set_partitionTimeIntervalAndMaxNum(const PartitionTimeIntervalAndMaxNum& val) {
  this->partitionTimeIntervalAndMaxNum = val;
}

const char* PeekMessageArg::ascii_fingerprint = "CC0415BCE8711DFAA509897BD5C5EE86";
const uint8_t PeekMessageArg::binary_fingerprint[16] = {0xCC,0x04,0x15,0xBC,0xE8,0x71,0x1D,0xFA,0xA5,0x09,0x89,0x7B,0xD5,0xC5,0xEE,0x86};

uint32_t PeekMessageArg::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receiptHandle);
          this->__isset.receiptHandle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->receiptHandleList.clear();
            uint32_t _size194;
            ::apache::thrift::protocol::TType _etype197;
            xfer += iprot->readListBegin(_etype197, _size194);
            this->receiptHandleList.resize(_size194);
            uint32_t _i198;
            for (_i198 = 0; _i198 < _size194; ++_i198)
            {
              xfer += iprot->readString(this->receiptHandleList[_i198]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.receiptHandleList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->partitionTimeIntervalAndMaxNum.read(iprot);
          this->__isset.partitionTimeIntervalAndMaxNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PeekMessageArg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PeekMessageArg");

  xfer += oprot->writeFieldBegin("receiptHandle", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->receiptHandle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiptHandleList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->receiptHandleList.size()));
    std::vector<std::string> ::const_iterator _iter199;
    for (_iter199 = this->receiptHandleList.begin(); _iter199 != this->receiptHandleList.end(); ++_iter199)
    {
      xfer += oprot->writeString((*_iter199));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partitionTimeIntervalAndMaxNum", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->partitionTimeIntervalAndMaxNum.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PeekMessageArg &a, PeekMessageArg &b) {
  using ::std::swap;
  swap(a.receiptHandle, b.receiptHandle);
  swap(a.receiptHandleList, b.receiptHandleList);
  swap(a.partitionTimeIntervalAndMaxNum, b.partitionTimeIntervalAndMaxNum);
  swap(a.__isset, b.__isset);
}

PeekMessageArg::PeekMessageArg(const PeekMessageArg& other200) {
  receiptHandle = other200.receiptHandle;
  receiptHandleList = other200.receiptHandleList;
  partitionTimeIntervalAndMaxNum = other200.partitionTimeIntervalAndMaxNum;
  __isset = other200.__isset;
}
PeekMessageArg& PeekMessageArg::operator=(const PeekMessageArg& other201) {
  receiptHandle = other201.receiptHandle;
  receiptHandleList = other201.receiptHandleList;
  partitionTimeIntervalAndMaxNum = other201.partitionTimeIntervalAndMaxNum;
  __isset = other201.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PeekMessageArg& obj) {
  using apache::thrift::to_string;
  out << "PeekMessageArg(";
  out << "receiptHandle=" << to_string(obj.receiptHandle);
  out << ", " << "receiptHandleList=" << to_string(obj.receiptHandleList);
  out << ", " << "partitionTimeIntervalAndMaxNum=" << to_string(obj.partitionTimeIntervalAndMaxNum);
  out << ")";
  return out;
}


PeekMessageRequest::~PeekMessageRequest() throw() {
}


void PeekMessageRequest::__set_queueName(const std::string& val) {
  this->queueName = val;
}

void PeekMessageRequest::__set_peekMessageArg(const PeekMessageArg& val) {
  this->peekMessageArg = val;
}

const char* PeekMessageRequest::ascii_fingerprint = "4B91BBEBEC11DE376B89A50C2B2002F8";
const uint8_t PeekMessageRequest::binary_fingerprint[16] = {0x4B,0x91,0xBB,0xEB,0xEC,0x11,0xDE,0x37,0x6B,0x89,0xA5,0x0C,0x2B,0x20,0x02,0xF8};

uint32_t PeekMessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_queueName = false;
  bool isset_peekMessageArg = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->queueName);
          isset_queueName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->peekMessageArg.read(iprot);
          isset_peekMessageArg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_queueName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_peekMessageArg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PeekMessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PeekMessageRequest");

  xfer += oprot->writeFieldBegin("queueName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->queueName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("peekMessageArg", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->peekMessageArg.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PeekMessageRequest &a, PeekMessageRequest &b) {
  using ::std::swap;
  swap(a.queueName, b.queueName);
  swap(a.peekMessageArg, b.peekMessageArg);
}

PeekMessageRequest::PeekMessageRequest(const PeekMessageRequest& other202) {
  queueName = other202.queueName;
  peekMessageArg = other202.peekMessageArg;
}
PeekMessageRequest& PeekMessageRequest::operator=(const PeekMessageRequest& other203) {
  queueName = other203.queueName;
  peekMessageArg = other203.peekMessageArg;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PeekMessageRequest& obj) {
  using apache::thrift::to_string;
  out << "PeekMessageRequest(";
  out << "queueName=" << to_string(obj.queueName);
  out << ", " << "peekMessageArg=" << to_string(obj.peekMessageArg);
  out << ")";
  return out;
}

}} // namespace
