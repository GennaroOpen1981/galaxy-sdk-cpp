/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Authorization_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace rpc { namespace authorization {

int _kGrantTypeValues[] = {
  GrantType::DEVELOPER,
  GrantType::APP_ROOT,
  GrantType::APP_USER,
  GrantType::GUEST
};
const char* _kGrantTypeNames[] = {
  "DEVELOPER",
  "APP_ROOT",
  "APP_USER",
  "GUEST"
};
const std::map<int, const char*> _GrantType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kGrantTypeValues, _kGrantTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Grantee::~Grantee() throw() {
}


void Grantee::__set_type(const GrantType::type val) {
  this->type = val;
__isset.type = true;
}

void Grantee::__set_identifier(const std::string& val) {
  this->identifier = val;
__isset.identifier = true;
}

const char* Grantee::ascii_fingerprint = "8F91EF8DF0BD202ABA85195A6109549D";
const uint8_t Grantee::binary_fingerprint[16] = {0x8F,0x91,0xEF,0x8D,0xF0,0xBD,0x20,0x2A,0xBA,0x85,0x19,0x5A,0x61,0x09,0x54,0x9D};

uint32_t Grantee::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = (GrantType::type)ecast0;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->identifier);
          this->__isset.identifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Grantee::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Grantee");

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.identifier) {
    xfer += oprot->writeFieldBegin("identifier", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->identifier);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Grantee &a, Grantee &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.identifier, b.identifier);
  swap(a.__isset, b.__isset);
}

Grantee::Grantee(const Grantee& other1) {
  type = other1.type;
  identifier = other1.identifier;
  __isset = other1.__isset;
}
Grantee& Grantee::operator=(const Grantee& other2) {
  type = other2.type;
  identifier = other2.identifier;
  __isset = other2.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Grantee& obj) {
  using apache::thrift::to_string;
  out << "Grantee(";
  out << "type="; (obj.__isset.type ? (out << to_string(obj.type)) : (out << "<null>"));
  out << ", " << "identifier="; (obj.__isset.identifier ? (out << to_string(obj.identifier)) : (out << "<null>"));
  out << ")";
  return out;
}

}} // namespace
