#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AuthService_H
#define AuthService_H

#include <thrift/TDispatchProcessor.h>
#include "Authentication_types.h"
#include "BaseService.h"

namespace rpc { namespace auth {

class AuthServiceIf : virtual public  ::rpc::common::BaseServiceIf {
 public:
  virtual ~AuthServiceIf() {}

  /**
   * 通过第三方认证系统换发Storage Access Token，采用App Secret登录无需此过程
   * 
   * @param xiaomiAppId
   * @param appUserAuthProvider
   * @param authToken
   */
  virtual void createCredential(Credential& _return, const std::string& xiaomiAppId, const AppUserAuthProvider::type appUserAuthProvider, const std::string& authToken) = 0;
};

class AuthServiceIfFactory : virtual public  ::rpc::common::BaseServiceIfFactory {
 public:
  typedef AuthServiceIf Handler;

  virtual ~AuthServiceIfFactory() {}

  virtual AuthServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::rpc::common::BaseServiceIf* /* handler */) = 0;
};

class AuthServiceIfSingletonFactory : virtual public AuthServiceIfFactory {
 public:
  AuthServiceIfSingletonFactory(const boost::shared_ptr<AuthServiceIf>& iface) : iface_(iface) {}
  virtual ~AuthServiceIfSingletonFactory() {}

  virtual AuthServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::rpc::common::BaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AuthServiceIf> iface_;
};

class AuthServiceNull : virtual public AuthServiceIf , virtual public  ::rpc::common::BaseServiceNull {
 public:
  virtual ~AuthServiceNull() {}
  void createCredential(Credential& /* _return */, const std::string& /* xiaomiAppId */, const AppUserAuthProvider::type /* appUserAuthProvider */, const std::string& /* authToken */) {
    return;
  }
};

typedef struct _AuthService_createCredential_args__isset {
  _AuthService_createCredential_args__isset() : xiaomiAppId(false), appUserAuthProvider(false), authToken(false) {}
  bool xiaomiAppId :1;
  bool appUserAuthProvider :1;
  bool authToken :1;
} _AuthService_createCredential_args__isset;

class AuthService_createCredential_args {
 public:

  static const char* ascii_fingerprint; // = "D9F4CFE2F293A8B1052FD3031DD2C847";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xF4,0xCF,0xE2,0xF2,0x93,0xA8,0xB1,0x05,0x2F,0xD3,0x03,0x1D,0xD2,0xC8,0x47};

  AuthService_createCredential_args(const AuthService_createCredential_args&);
  AuthService_createCredential_args& operator=(const AuthService_createCredential_args&);
  AuthService_createCredential_args() : xiaomiAppId(), appUserAuthProvider((AppUserAuthProvider::type)0), authToken() {
  }

  virtual ~AuthService_createCredential_args() throw();
  std::string xiaomiAppId;
  AppUserAuthProvider::type appUserAuthProvider;
  std::string authToken;

  _AuthService_createCredential_args__isset __isset;

  void __set_xiaomiAppId(const std::string& val);

  void __set_appUserAuthProvider(const AppUserAuthProvider::type val);

  void __set_authToken(const std::string& val);

  bool operator == (const AuthService_createCredential_args & rhs) const
  {
    if (!(xiaomiAppId == rhs.xiaomiAppId))
      return false;
    if (!(appUserAuthProvider == rhs.appUserAuthProvider))
      return false;
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const AuthService_createCredential_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_createCredential_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AuthService_createCredential_args& obj);
};


class AuthService_createCredential_pargs {
 public:

  static const char* ascii_fingerprint; // = "D9F4CFE2F293A8B1052FD3031DD2C847";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xF4,0xCF,0xE2,0xF2,0x93,0xA8,0xB1,0x05,0x2F,0xD3,0x03,0x1D,0xD2,0xC8,0x47};


  virtual ~AuthService_createCredential_pargs() throw();
  const std::string* xiaomiAppId;
  const AppUserAuthProvider::type* appUserAuthProvider;
  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AuthService_createCredential_pargs& obj);
};

typedef struct _AuthService_createCredential_result__isset {
  _AuthService_createCredential_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _AuthService_createCredential_result__isset;

class AuthService_createCredential_result {
 public:

  static const char* ascii_fingerprint; // = "B67E2AFF8986C92C519D7868C416287F";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x7E,0x2A,0xFF,0x89,0x86,0xC9,0x2C,0x51,0x9D,0x78,0x68,0xC4,0x16,0x28,0x7F};

  AuthService_createCredential_result(const AuthService_createCredential_result&);
  AuthService_createCredential_result& operator=(const AuthService_createCredential_result&);
  AuthService_createCredential_result() {
  }

  virtual ~AuthService_createCredential_result() throw();
  Credential success;
   ::rpc::errors::ServiceException se;

  _AuthService_createCredential_result__isset __isset;

  void __set_success(const Credential& val);

  void __set_se(const  ::rpc::errors::ServiceException& val);

  bool operator == (const AuthService_createCredential_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AuthService_createCredential_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_createCredential_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AuthService_createCredential_result& obj);
};

typedef struct _AuthService_createCredential_presult__isset {
  _AuthService_createCredential_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _AuthService_createCredential_presult__isset;

class AuthService_createCredential_presult {
 public:

  static const char* ascii_fingerprint; // = "B67E2AFF8986C92C519D7868C416287F";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x7E,0x2A,0xFF,0x89,0x86,0xC9,0x2C,0x51,0x9D,0x78,0x68,0xC4,0x16,0x28,0x7F};


  virtual ~AuthService_createCredential_presult() throw();
  Credential* success;
   ::rpc::errors::ServiceException se;

  _AuthService_createCredential_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const AuthService_createCredential_presult& obj);
};

class AuthServiceClient : virtual public AuthServiceIf, public  ::rpc::common::BaseServiceClient {
 public:
  AuthServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::rpc::common::BaseServiceClient(prot, prot) {}
  AuthServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::rpc::common::BaseServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createCredential(Credential& _return, const std::string& xiaomiAppId, const AppUserAuthProvider::type appUserAuthProvider, const std::string& authToken);
  void send_createCredential(const std::string& xiaomiAppId, const AppUserAuthProvider::type appUserAuthProvider, const std::string& authToken);
  void recv_createCredential(Credential& _return);
};

class AuthServiceProcessor : public  ::rpc::common::BaseServiceProcessor {
 protected:
  boost::shared_ptr<AuthServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AuthServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createCredential(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AuthServiceProcessor(boost::shared_ptr<AuthServiceIf> iface) :
     ::rpc::common::BaseServiceProcessor(iface),
    iface_(iface) {
    processMap_["createCredential"] = &AuthServiceProcessor::process_createCredential;
  }

  virtual ~AuthServiceProcessor() {}
};

class AuthServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AuthServiceProcessorFactory(const ::boost::shared_ptr< AuthServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AuthServiceIfFactory > handlerFactory_;
};

class AuthServiceMultiface : virtual public AuthServiceIf, public  ::rpc::common::BaseServiceMultiface {
 public:
  AuthServiceMultiface(std::vector<boost::shared_ptr<AuthServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<AuthServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::rpc::common::BaseServiceMultiface::add(*iter);
    }
  }
  virtual ~AuthServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AuthServiceIf> > ifaces_;
  AuthServiceMultiface() {}
  void add(boost::shared_ptr<AuthServiceIf> iface) {
     ::rpc::common::BaseServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void createCredential(Credential& _return, const std::string& xiaomiAppId, const AppUserAuthProvider::type appUserAuthProvider, const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createCredential(_return, xiaomiAppId, appUserAuthProvider, authToken);
    }
    ifaces_[i]->createCredential(_return, xiaomiAppId, appUserAuthProvider, authToken);
    return;
  }

};

}} // namespace

#endif
