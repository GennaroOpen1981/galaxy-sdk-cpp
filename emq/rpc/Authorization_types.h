#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Authorization_TYPES_H
#define Authorization_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace rpc { namespace authorization {

struct GrantType {
  enum type {
    DEVELOPER = 1,
    APP_ROOT = 2,
    APP_USER = 3,
    GUEST = 4
  };
};

extern const std::map<int, const char*> _GrantType_VALUES_TO_NAMES;

class Grantee;

typedef struct _Grantee__isset {
  _Grantee__isset() : type(false), identifier(false) {}
  bool type :1;
  bool identifier :1;
} _Grantee__isset;

class Grantee {
 public:

  static const char* ascii_fingerprint; // = "8F91EF8DF0BD202ABA85195A6109549D";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0x91,0xEF,0x8D,0xF0,0xBD,0x20,0x2A,0xBA,0x85,0x19,0x5A,0x61,0x09,0x54,0x9D};

  Grantee(const Grantee&);
  Grantee& operator=(const Grantee&);
  Grantee() : type((GrantType::type)0), identifier() {
  }

  virtual ~Grantee() throw();
  GrantType::type type;
  std::string identifier;

  _Grantee__isset __isset;

  void __set_type(const GrantType::type val);

  void __set_identifier(const std::string& val);

  bool operator == (const Grantee & rhs) const
  {
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.identifier != rhs.__isset.identifier)
      return false;
    else if (__isset.identifier && !(identifier == rhs.identifier))
      return false;
    return true;
  }
  bool operator != (const Grantee &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Grantee & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Grantee& obj);
};

void swap(Grantee &a, Grantee &b);

}} // namespace

#endif
