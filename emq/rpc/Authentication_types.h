#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Authentication_TYPES_H
#define Authentication_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Errors_types.h"
#include "Common_types.h"


namespace rpc { namespace auth {

struct UserType {
  enum type {
    DEV_XIAOMI_SSO = 1,
    DEV_XIAOMI = 2,
    APP_SECRET = 10,
    APP_ACCESS_TOKEN = 11,
    APP_XIAOMI_SSO = 12,
    APP_ANONYMOUS = 13
  };
};

extern const std::map<int, const char*> _UserType_VALUES_TO_NAMES;

struct MacAlgorithm {
  enum type {
    HmacMD5 = 1,
    HmacSHA1 = 2,
    HmacSHA256 = 3
  };
};

extern const std::map<int, const char*> _MacAlgorithm_VALUES_TO_NAMES;

struct AppUserAuthProvider {
  enum type {
    XIAOMI_SSO = 1,
    XIAOMI_OAUTH = 2,
    QQ_OAUTH = 3,
    SINA_OAUTH = 4,
    RENREN_OAUTH = 5
  };
};

extern const std::map<int, const char*> _AppUserAuthProvider_VALUES_TO_NAMES;

class Credential;

class HttpAuthorizationHeader;

typedef struct _Credential__isset {
  _Credential__isset() : type(false), secretKeyId(false), secretKey(false) {}
  bool type :1;
  bool secretKeyId :1;
  bool secretKey :1;
} _Credential__isset;

class Credential {
 public:

  static const char* ascii_fingerprint; // = "E0E648A58FAB5424ACA7EFF4EAB40FE0";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0xE6,0x48,0xA5,0x8F,0xAB,0x54,0x24,0xAC,0xA7,0xEF,0xF4,0xEA,0xB4,0x0F,0xE0};

  Credential(const Credential&);
  Credential& operator=(const Credential&);
  Credential() : type((UserType::type)0), secretKeyId(), secretKey() {
  }

  virtual ~Credential() throw();
  UserType::type type;
  std::string secretKeyId;
  std::string secretKey;

  _Credential__isset __isset;

  void __set_type(const UserType::type val);

  void __set_secretKeyId(const std::string& val);

  void __set_secretKey(const std::string& val);

  bool operator == (const Credential & rhs) const
  {
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.secretKeyId != rhs.__isset.secretKeyId)
      return false;
    else if (__isset.secretKeyId && !(secretKeyId == rhs.secretKeyId))
      return false;
    if (__isset.secretKey != rhs.__isset.secretKey)
      return false;
    else if (__isset.secretKey && !(secretKey == rhs.secretKey))
      return false;
    return true;
  }
  bool operator != (const Credential &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Credential & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Credential& obj);
};

void swap(Credential &a, Credential &b);

typedef struct _HttpAuthorizationHeader__isset {
  _HttpAuthorizationHeader__isset() : version(true), userType(true), secretKeyId(false), secretKey(false), signature(false), algorithm(false), signedHeaders(true), supportAccountKey(true) {}
  bool version :1;
  bool userType :1;
  bool secretKeyId :1;
  bool secretKey :1;
  bool signature :1;
  bool algorithm :1;
  bool signedHeaders :1;
  bool supportAccountKey :1;
} _HttpAuthorizationHeader__isset;

class HttpAuthorizationHeader {
 public:

  static const char* ascii_fingerprint; // = "BD141D421ADBD718188028B7D9557DBD";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x14,0x1D,0x42,0x1A,0xDB,0xD7,0x18,0x18,0x80,0x28,0xB7,0xD9,0x55,0x7D,0xBD};

  HttpAuthorizationHeader(const HttpAuthorizationHeader&);
  HttpAuthorizationHeader& operator=(const HttpAuthorizationHeader&);
  HttpAuthorizationHeader() : version("SDS-V1"), userType((UserType::type)13), secretKeyId(), secretKey(), signature(), algorithm((MacAlgorithm::type)0), supportAccountKey(false) {
    userType = (UserType::type)13;


  }

  virtual ~HttpAuthorizationHeader() throw();
  std::string version;
  UserType::type userType;
  std::string secretKeyId;
  std::string secretKey;
  std::string signature;
  MacAlgorithm::type algorithm;
  std::vector<std::string>  signedHeaders;
  bool supportAccountKey;

  _HttpAuthorizationHeader__isset __isset;

  void __set_version(const std::string& val);

  void __set_userType(const UserType::type val);

  void __set_secretKeyId(const std::string& val);

  void __set_secretKey(const std::string& val);

  void __set_signature(const std::string& val);

  void __set_algorithm(const MacAlgorithm::type val);

  void __set_signedHeaders(const std::vector<std::string> & val);

  void __set_supportAccountKey(const bool val);

  bool operator == (const HttpAuthorizationHeader & rhs) const
  {
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.userType != rhs.__isset.userType)
      return false;
    else if (__isset.userType && !(userType == rhs.userType))
      return false;
    if (__isset.secretKeyId != rhs.__isset.secretKeyId)
      return false;
    else if (__isset.secretKeyId && !(secretKeyId == rhs.secretKeyId))
      return false;
    if (__isset.secretKey != rhs.__isset.secretKey)
      return false;
    else if (__isset.secretKey && !(secretKey == rhs.secretKey))
      return false;
    if (__isset.signature != rhs.__isset.signature)
      return false;
    else if (__isset.signature && !(signature == rhs.signature))
      return false;
    if (__isset.algorithm != rhs.__isset.algorithm)
      return false;
    else if (__isset.algorithm && !(algorithm == rhs.algorithm))
      return false;
    if (__isset.signedHeaders != rhs.__isset.signedHeaders)
      return false;
    else if (__isset.signedHeaders && !(signedHeaders == rhs.signedHeaders))
      return false;
    if (__isset.supportAccountKey != rhs.__isset.supportAccountKey)
      return false;
    else if (__isset.supportAccountKey && !(supportAccountKey == rhs.supportAccountKey))
      return false;
    return true;
  }
  bool operator != (const HttpAuthorizationHeader &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HttpAuthorizationHeader & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HttpAuthorizationHeader& obj);
};

void swap(HttpAuthorizationHeader &a, HttpAuthorizationHeader &b);

}} // namespace

#endif
