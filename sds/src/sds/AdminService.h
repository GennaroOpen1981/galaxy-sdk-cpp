#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AdminService_H
#define AdminService_H

#include <thrift/TDispatchProcessor.h>
#include "Admin_types.h"
#include "BaseService.h"



class AdminServiceIf : virtual public  ::BaseServiceIf {
 public:
  virtual ~AdminServiceIf() {}
  virtual void saveAppInfo(const AppInfo& appInfo) = 0;
  virtual void getAppInfo(AppInfo& _return, const std::string& appId) = 0;
  virtual void findAllApps(std::vector<AppInfo> & _return) = 0;
  virtual void findAllTables(std::vector< ::TableInfo> & _return) = 0;
  virtual void createTable( ::TableInfo& _return, const std::string& tableName, const  ::TableSpec& tableSpec) = 0;
  virtual void dropTable(const std::string& tableName) = 0;
  virtual void lazyDropTable(const std::string& tableName) = 0;
  virtual void alterTable(const std::string& tableName, const  ::TableSpec& tableSpec) = 0;
  virtual void cloneTable(const std::string& srcName, const std::string& destTable, const bool flushTable) = 0;
  virtual void disableTable(const std::string& tableName) = 0;
  virtual void enableTable(const std::string& tableName) = 0;
  virtual void describeTable( ::TableSpec& _return, const std::string& tableName) = 0;
  virtual void getTableStatus( ::TableStatus& _return, const std::string& tableName) = 0;
  virtual  ::TableState::type getTableState(const std::string& tableName) = 0;
  virtual void getTableSplits(std::vector< ::TableSplit> & _return, const std::string& tableName, const  ::Dictionary& startKey, const  ::Dictionary& stopKey) = 0;
  virtual void queryMetric(TimeSeriesData& _return, const MetricQueryRequest& query) = 0;
  virtual void queryMetrics(std::vector<TimeSeriesData> & _return, const std::vector<MetricQueryRequest> & queries) = 0;
  virtual void findAllAppInfo(std::vector<AppInfo> & _return) = 0;
  virtual int64_t getTableSize(const std::string& tableName) = 0;
  virtual void putClientMetrics(const ClientMetrics& clientMetrics) = 0;
};

class AdminServiceIfFactory : virtual public  ::BaseServiceIfFactory {
 public:
  typedef AdminServiceIf Handler;

  virtual ~AdminServiceIfFactory() {}

  virtual AdminServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::BaseServiceIf* /* handler */) = 0;
};

class AdminServiceIfSingletonFactory : virtual public AdminServiceIfFactory {
 public:
  AdminServiceIfSingletonFactory(const boost::shared_ptr<AdminServiceIf>& iface) : iface_(iface) {}
  virtual ~AdminServiceIfSingletonFactory() {}

  virtual AdminServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::BaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AdminServiceIf> iface_;
};

class AdminServiceNull : virtual public AdminServiceIf , virtual public  ::BaseServiceNull {
 public:
  virtual ~AdminServiceNull() {}
  void saveAppInfo(const AppInfo& /* appInfo */) {
    return;
  }
  void getAppInfo(AppInfo& /* _return */, const std::string& /* appId */) {
    return;
  }
  void findAllApps(std::vector<AppInfo> & /* _return */) {
    return;
  }
  void findAllTables(std::vector< ::TableInfo> & /* _return */) {
    return;
  }
  void createTable( ::TableInfo& /* _return */, const std::string& /* tableName */, const  ::TableSpec& /* tableSpec */) {
    return;
  }
  void dropTable(const std::string& /* tableName */) {
    return;
  }
  void lazyDropTable(const std::string& /* tableName */) {
    return;
  }
  void alterTable(const std::string& /* tableName */, const  ::TableSpec& /* tableSpec */) {
    return;
  }
  void cloneTable(const std::string& /* srcName */, const std::string& /* destTable */, const bool /* flushTable */) {
    return;
  }
  void disableTable(const std::string& /* tableName */) {
    return;
  }
  void enableTable(const std::string& /* tableName */) {
    return;
  }
  void describeTable( ::TableSpec& /* _return */, const std::string& /* tableName */) {
    return;
  }
  void getTableStatus( ::TableStatus& /* _return */, const std::string& /* tableName */) {
    return;
  }
   ::TableState::type getTableState(const std::string& /* tableName */) {
     ::TableState::type _return = ( ::TableState::type)0;
    return _return;
  }
  void getTableSplits(std::vector< ::TableSplit> & /* _return */, const std::string& /* tableName */, const  ::Dictionary& /* startKey */, const  ::Dictionary& /* stopKey */) {
    return;
  }
  void queryMetric(TimeSeriesData& /* _return */, const MetricQueryRequest& /* query */) {
    return;
  }
  void queryMetrics(std::vector<TimeSeriesData> & /* _return */, const std::vector<MetricQueryRequest> & /* queries */) {
    return;
  }
  void findAllAppInfo(std::vector<AppInfo> & /* _return */) {
    return;
  }
  int64_t getTableSize(const std::string& /* tableName */) {
    int64_t _return = 0;
    return _return;
  }
  void putClientMetrics(const ClientMetrics& /* clientMetrics */) {
    return;
  }
};

typedef struct _AdminService_saveAppInfo_args__isset {
  _AdminService_saveAppInfo_args__isset() : appInfo(false) {}
  bool appInfo;
} _AdminService_saveAppInfo_args__isset;

class AdminService_saveAppInfo_args {
 public:

  static const char* ascii_fingerprint; // = "E88241520E571E78D8DBD9752CBEC63F";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x82,0x41,0x52,0x0E,0x57,0x1E,0x78,0xD8,0xDB,0xD9,0x75,0x2C,0xBE,0xC6,0x3F};

  AdminService_saveAppInfo_args(const AdminService_saveAppInfo_args&);
  AdminService_saveAppInfo_args& operator=(const AdminService_saveAppInfo_args&);
  AdminService_saveAppInfo_args() {
  }

  virtual ~AdminService_saveAppInfo_args() throw();
  AppInfo appInfo;

  _AdminService_saveAppInfo_args__isset __isset;

  void __set_appInfo(const AppInfo& val);

  bool operator == (const AdminService_saveAppInfo_args & rhs) const
  {
    if (!(appInfo == rhs.appInfo))
      return false;
    return true;
  }
  bool operator != (const AdminService_saveAppInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_saveAppInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_saveAppInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "E88241520E571E78D8DBD9752CBEC63F";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x82,0x41,0x52,0x0E,0x57,0x1E,0x78,0xD8,0xDB,0xD9,0x75,0x2C,0xBE,0xC6,0x3F};


  virtual ~AdminService_saveAppInfo_pargs() throw();
  const AppInfo* appInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_saveAppInfo_result__isset {
  _AdminService_saveAppInfo_result__isset() : se(false) {}
  bool se;
} _AdminService_saveAppInfo_result__isset;

class AdminService_saveAppInfo_result {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};

  AdminService_saveAppInfo_result(const AdminService_saveAppInfo_result&);
  AdminService_saveAppInfo_result& operator=(const AdminService_saveAppInfo_result&);
  AdminService_saveAppInfo_result() {
  }

  virtual ~AdminService_saveAppInfo_result() throw();
   ::ServiceException se;

  _AdminService_saveAppInfo_result__isset __isset;

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_saveAppInfo_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_saveAppInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_saveAppInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_saveAppInfo_presult__isset {
  _AdminService_saveAppInfo_presult__isset() : se(false) {}
  bool se;
} _AdminService_saveAppInfo_presult__isset;

class AdminService_saveAppInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};


  virtual ~AdminService_saveAppInfo_presult() throw();
   ::ServiceException se;

  _AdminService_saveAppInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_getAppInfo_args__isset {
  _AdminService_getAppInfo_args__isset() : appId(false) {}
  bool appId;
} _AdminService_getAppInfo_args__isset;

class AdminService_getAppInfo_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  AdminService_getAppInfo_args(const AdminService_getAppInfo_args&);
  AdminService_getAppInfo_args& operator=(const AdminService_getAppInfo_args&);
  AdminService_getAppInfo_args() : appId() {
  }

  virtual ~AdminService_getAppInfo_args() throw();
  std::string appId;

  _AdminService_getAppInfo_args__isset __isset;

  void __set_appId(const std::string& val);

  bool operator == (const AdminService_getAppInfo_args & rhs) const
  {
    if (!(appId == rhs.appId))
      return false;
    return true;
  }
  bool operator != (const AdminService_getAppInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_getAppInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_getAppInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~AdminService_getAppInfo_pargs() throw();
  const std::string* appId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_getAppInfo_result__isset {
  _AdminService_getAppInfo_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_getAppInfo_result__isset;

class AdminService_getAppInfo_result {
 public:

  static const char* ascii_fingerprint; // = "2FB3C484258B2A0A33397106D2925FA4";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0xB3,0xC4,0x84,0x25,0x8B,0x2A,0x0A,0x33,0x39,0x71,0x06,0xD2,0x92,0x5F,0xA4};

  AdminService_getAppInfo_result(const AdminService_getAppInfo_result&);
  AdminService_getAppInfo_result& operator=(const AdminService_getAppInfo_result&);
  AdminService_getAppInfo_result() {
  }

  virtual ~AdminService_getAppInfo_result() throw();
  AppInfo success;
   ::ServiceException se;

  _AdminService_getAppInfo_result__isset __isset;

  void __set_success(const AppInfo& val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_getAppInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_getAppInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_getAppInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_getAppInfo_presult__isset {
  _AdminService_getAppInfo_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_getAppInfo_presult__isset;

class AdminService_getAppInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "2FB3C484258B2A0A33397106D2925FA4";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0xB3,0xC4,0x84,0x25,0x8B,0x2A,0x0A,0x33,0x39,0x71,0x06,0xD2,0x92,0x5F,0xA4};


  virtual ~AdminService_getAppInfo_presult() throw();
  AppInfo* success;
   ::ServiceException se;

  _AdminService_getAppInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AdminService_findAllApps_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  AdminService_findAllApps_args(const AdminService_findAllApps_args&);
  AdminService_findAllApps_args& operator=(const AdminService_findAllApps_args&);
  AdminService_findAllApps_args() {
  }

  virtual ~AdminService_findAllApps_args() throw();

  bool operator == (const AdminService_findAllApps_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AdminService_findAllApps_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_findAllApps_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_findAllApps_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~AdminService_findAllApps_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_findAllApps_result__isset {
  _AdminService_findAllApps_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_findAllApps_result__isset;

class AdminService_findAllApps_result {
 public:

  static const char* ascii_fingerprint; // = "EBC388C333FF34BCE7B0171C041BBA6F";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0xC3,0x88,0xC3,0x33,0xFF,0x34,0xBC,0xE7,0xB0,0x17,0x1C,0x04,0x1B,0xBA,0x6F};

  AdminService_findAllApps_result(const AdminService_findAllApps_result&);
  AdminService_findAllApps_result& operator=(const AdminService_findAllApps_result&);
  AdminService_findAllApps_result() {
  }

  virtual ~AdminService_findAllApps_result() throw();
  std::vector<AppInfo>  success;
   ::ServiceException se;

  _AdminService_findAllApps_result__isset __isset;

  void __set_success(const std::vector<AppInfo> & val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_findAllApps_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_findAllApps_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_findAllApps_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_findAllApps_presult__isset {
  _AdminService_findAllApps_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_findAllApps_presult__isset;

class AdminService_findAllApps_presult {
 public:

  static const char* ascii_fingerprint; // = "EBC388C333FF34BCE7B0171C041BBA6F";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0xC3,0x88,0xC3,0x33,0xFF,0x34,0xBC,0xE7,0xB0,0x17,0x1C,0x04,0x1B,0xBA,0x6F};


  virtual ~AdminService_findAllApps_presult() throw();
  std::vector<AppInfo> * success;
   ::ServiceException se;

  _AdminService_findAllApps_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AdminService_findAllTables_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  AdminService_findAllTables_args(const AdminService_findAllTables_args&);
  AdminService_findAllTables_args& operator=(const AdminService_findAllTables_args&);
  AdminService_findAllTables_args() {
  }

  virtual ~AdminService_findAllTables_args() throw();

  bool operator == (const AdminService_findAllTables_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AdminService_findAllTables_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_findAllTables_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_findAllTables_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~AdminService_findAllTables_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_findAllTables_result__isset {
  _AdminService_findAllTables_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_findAllTables_result__isset;

class AdminService_findAllTables_result {
 public:

  static const char* ascii_fingerprint; // = "9AFBDC722830581796005300E16485B6";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0xFB,0xDC,0x72,0x28,0x30,0x58,0x17,0x96,0x00,0x53,0x00,0xE1,0x64,0x85,0xB6};

  AdminService_findAllTables_result(const AdminService_findAllTables_result&);
  AdminService_findAllTables_result& operator=(const AdminService_findAllTables_result&);
  AdminService_findAllTables_result() {
  }

  virtual ~AdminService_findAllTables_result() throw();
  std::vector< ::TableInfo>  success;
   ::ServiceException se;

  _AdminService_findAllTables_result__isset __isset;

  void __set_success(const std::vector< ::TableInfo> & val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_findAllTables_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_findAllTables_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_findAllTables_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_findAllTables_presult__isset {
  _AdminService_findAllTables_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_findAllTables_presult__isset;

class AdminService_findAllTables_presult {
 public:

  static const char* ascii_fingerprint; // = "9AFBDC722830581796005300E16485B6";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0xFB,0xDC,0x72,0x28,0x30,0x58,0x17,0x96,0x00,0x53,0x00,0xE1,0x64,0x85,0xB6};


  virtual ~AdminService_findAllTables_presult() throw();
  std::vector< ::TableInfo> * success;
   ::ServiceException se;

  _AdminService_findAllTables_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_createTable_args__isset {
  _AdminService_createTable_args__isset() : tableName(false), tableSpec(false) {}
  bool tableName;
  bool tableSpec;
} _AdminService_createTable_args__isset;

class AdminService_createTable_args {
 public:

  static const char* ascii_fingerprint; // = "44D25924C28E2FACB62FA1CD8DFD64D5";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0xD2,0x59,0x24,0xC2,0x8E,0x2F,0xAC,0xB6,0x2F,0xA1,0xCD,0x8D,0xFD,0x64,0xD5};

  AdminService_createTable_args(const AdminService_createTable_args&);
  AdminService_createTable_args& operator=(const AdminService_createTable_args&);
  AdminService_createTable_args() : tableName() {
  }

  virtual ~AdminService_createTable_args() throw();
  std::string tableName;
   ::TableSpec tableSpec;

  _AdminService_createTable_args__isset __isset;

  void __set_tableName(const std::string& val);

  void __set_tableSpec(const  ::TableSpec& val);

  bool operator == (const AdminService_createTable_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    if (!(tableSpec == rhs.tableSpec))
      return false;
    return true;
  }
  bool operator != (const AdminService_createTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_createTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_createTable_pargs {
 public:

  static const char* ascii_fingerprint; // = "44D25924C28E2FACB62FA1CD8DFD64D5";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0xD2,0x59,0x24,0xC2,0x8E,0x2F,0xAC,0xB6,0x2F,0xA1,0xCD,0x8D,0xFD,0x64,0xD5};


  virtual ~AdminService_createTable_pargs() throw();
  const std::string* tableName;
  const  ::TableSpec* tableSpec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_createTable_result__isset {
  _AdminService_createTable_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_createTable_result__isset;

class AdminService_createTable_result {
 public:

  static const char* ascii_fingerprint; // = "6A35D6D88DAC837D30808782FA235EED";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x35,0xD6,0xD8,0x8D,0xAC,0x83,0x7D,0x30,0x80,0x87,0x82,0xFA,0x23,0x5E,0xED};

  AdminService_createTable_result(const AdminService_createTable_result&);
  AdminService_createTable_result& operator=(const AdminService_createTable_result&);
  AdminService_createTable_result() {
  }

  virtual ~AdminService_createTable_result() throw();
   ::TableInfo success;
   ::ServiceException se;

  _AdminService_createTable_result__isset __isset;

  void __set_success(const  ::TableInfo& val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_createTable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_createTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_createTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_createTable_presult__isset {
  _AdminService_createTable_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_createTable_presult__isset;

class AdminService_createTable_presult {
 public:

  static const char* ascii_fingerprint; // = "6A35D6D88DAC837D30808782FA235EED";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x35,0xD6,0xD8,0x8D,0xAC,0x83,0x7D,0x30,0x80,0x87,0x82,0xFA,0x23,0x5E,0xED};


  virtual ~AdminService_createTable_presult() throw();
   ::TableInfo* success;
   ::ServiceException se;

  _AdminService_createTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_dropTable_args__isset {
  _AdminService_dropTable_args__isset() : tableName(false) {}
  bool tableName;
} _AdminService_dropTable_args__isset;

class AdminService_dropTable_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  AdminService_dropTable_args(const AdminService_dropTable_args&);
  AdminService_dropTable_args& operator=(const AdminService_dropTable_args&);
  AdminService_dropTable_args() : tableName() {
  }

  virtual ~AdminService_dropTable_args() throw();
  std::string tableName;

  _AdminService_dropTable_args__isset __isset;

  void __set_tableName(const std::string& val);

  bool operator == (const AdminService_dropTable_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const AdminService_dropTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_dropTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_dropTable_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~AdminService_dropTable_pargs() throw();
  const std::string* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_dropTable_result__isset {
  _AdminService_dropTable_result__isset() : se(false) {}
  bool se;
} _AdminService_dropTable_result__isset;

class AdminService_dropTable_result {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};

  AdminService_dropTable_result(const AdminService_dropTable_result&);
  AdminService_dropTable_result& operator=(const AdminService_dropTable_result&);
  AdminService_dropTable_result() {
  }

  virtual ~AdminService_dropTable_result() throw();
   ::ServiceException se;

  _AdminService_dropTable_result__isset __isset;

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_dropTable_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_dropTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_dropTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_dropTable_presult__isset {
  _AdminService_dropTable_presult__isset() : se(false) {}
  bool se;
} _AdminService_dropTable_presult__isset;

class AdminService_dropTable_presult {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};


  virtual ~AdminService_dropTable_presult() throw();
   ::ServiceException se;

  _AdminService_dropTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_lazyDropTable_args__isset {
  _AdminService_lazyDropTable_args__isset() : tableName(false) {}
  bool tableName;
} _AdminService_lazyDropTable_args__isset;

class AdminService_lazyDropTable_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  AdminService_lazyDropTable_args(const AdminService_lazyDropTable_args&);
  AdminService_lazyDropTable_args& operator=(const AdminService_lazyDropTable_args&);
  AdminService_lazyDropTable_args() : tableName() {
  }

  virtual ~AdminService_lazyDropTable_args() throw();
  std::string tableName;

  _AdminService_lazyDropTable_args__isset __isset;

  void __set_tableName(const std::string& val);

  bool operator == (const AdminService_lazyDropTable_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const AdminService_lazyDropTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_lazyDropTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_lazyDropTable_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~AdminService_lazyDropTable_pargs() throw();
  const std::string* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_lazyDropTable_result__isset {
  _AdminService_lazyDropTable_result__isset() : se(false) {}
  bool se;
} _AdminService_lazyDropTable_result__isset;

class AdminService_lazyDropTable_result {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};

  AdminService_lazyDropTable_result(const AdminService_lazyDropTable_result&);
  AdminService_lazyDropTable_result& operator=(const AdminService_lazyDropTable_result&);
  AdminService_lazyDropTable_result() {
  }

  virtual ~AdminService_lazyDropTable_result() throw();
   ::ServiceException se;

  _AdminService_lazyDropTable_result__isset __isset;

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_lazyDropTable_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_lazyDropTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_lazyDropTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_lazyDropTable_presult__isset {
  _AdminService_lazyDropTable_presult__isset() : se(false) {}
  bool se;
} _AdminService_lazyDropTable_presult__isset;

class AdminService_lazyDropTable_presult {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};


  virtual ~AdminService_lazyDropTable_presult() throw();
   ::ServiceException se;

  _AdminService_lazyDropTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_alterTable_args__isset {
  _AdminService_alterTable_args__isset() : tableName(false), tableSpec(false) {}
  bool tableName;
  bool tableSpec;
} _AdminService_alterTable_args__isset;

class AdminService_alterTable_args {
 public:

  static const char* ascii_fingerprint; // = "44D25924C28E2FACB62FA1CD8DFD64D5";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0xD2,0x59,0x24,0xC2,0x8E,0x2F,0xAC,0xB6,0x2F,0xA1,0xCD,0x8D,0xFD,0x64,0xD5};

  AdminService_alterTable_args(const AdminService_alterTable_args&);
  AdminService_alterTable_args& operator=(const AdminService_alterTable_args&);
  AdminService_alterTable_args() : tableName() {
  }

  virtual ~AdminService_alterTable_args() throw();
  std::string tableName;
   ::TableSpec tableSpec;

  _AdminService_alterTable_args__isset __isset;

  void __set_tableName(const std::string& val);

  void __set_tableSpec(const  ::TableSpec& val);

  bool operator == (const AdminService_alterTable_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    if (!(tableSpec == rhs.tableSpec))
      return false;
    return true;
  }
  bool operator != (const AdminService_alterTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_alterTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_alterTable_pargs {
 public:

  static const char* ascii_fingerprint; // = "44D25924C28E2FACB62FA1CD8DFD64D5";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0xD2,0x59,0x24,0xC2,0x8E,0x2F,0xAC,0xB6,0x2F,0xA1,0xCD,0x8D,0xFD,0x64,0xD5};


  virtual ~AdminService_alterTable_pargs() throw();
  const std::string* tableName;
  const  ::TableSpec* tableSpec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_alterTable_result__isset {
  _AdminService_alterTable_result__isset() : se(false) {}
  bool se;
} _AdminService_alterTable_result__isset;

class AdminService_alterTable_result {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};

  AdminService_alterTable_result(const AdminService_alterTable_result&);
  AdminService_alterTable_result& operator=(const AdminService_alterTable_result&);
  AdminService_alterTable_result() {
  }

  virtual ~AdminService_alterTable_result() throw();
   ::ServiceException se;

  _AdminService_alterTable_result__isset __isset;

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_alterTable_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_alterTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_alterTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_alterTable_presult__isset {
  _AdminService_alterTable_presult__isset() : se(false) {}
  bool se;
} _AdminService_alterTable_presult__isset;

class AdminService_alterTable_presult {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};


  virtual ~AdminService_alterTable_presult() throw();
   ::ServiceException se;

  _AdminService_alterTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_cloneTable_args__isset {
  _AdminService_cloneTable_args__isset() : srcName(false), destTable(false), flushTable(false) {}
  bool srcName;
  bool destTable;
  bool flushTable;
} _AdminService_cloneTable_args__isset;

class AdminService_cloneTable_args {
 public:

  static const char* ascii_fingerprint; // = "7F21FB535884165D6350077C7B970E93";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0x21,0xFB,0x53,0x58,0x84,0x16,0x5D,0x63,0x50,0x07,0x7C,0x7B,0x97,0x0E,0x93};

  AdminService_cloneTable_args(const AdminService_cloneTable_args&);
  AdminService_cloneTable_args& operator=(const AdminService_cloneTable_args&);
  AdminService_cloneTable_args() : srcName(), destTable(), flushTable(0) {
  }

  virtual ~AdminService_cloneTable_args() throw();
  std::string srcName;
  std::string destTable;
  bool flushTable;

  _AdminService_cloneTable_args__isset __isset;

  void __set_srcName(const std::string& val);

  void __set_destTable(const std::string& val);

  void __set_flushTable(const bool val);

  bool operator == (const AdminService_cloneTable_args & rhs) const
  {
    if (!(srcName == rhs.srcName))
      return false;
    if (!(destTable == rhs.destTable))
      return false;
    if (!(flushTable == rhs.flushTable))
      return false;
    return true;
  }
  bool operator != (const AdminService_cloneTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_cloneTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_cloneTable_pargs {
 public:

  static const char* ascii_fingerprint; // = "7F21FB535884165D6350077C7B970E93";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0x21,0xFB,0x53,0x58,0x84,0x16,0x5D,0x63,0x50,0x07,0x7C,0x7B,0x97,0x0E,0x93};


  virtual ~AdminService_cloneTable_pargs() throw();
  const std::string* srcName;
  const std::string* destTable;
  const bool* flushTable;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_cloneTable_result__isset {
  _AdminService_cloneTable_result__isset() : se(false) {}
  bool se;
} _AdminService_cloneTable_result__isset;

class AdminService_cloneTable_result {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};

  AdminService_cloneTable_result(const AdminService_cloneTable_result&);
  AdminService_cloneTable_result& operator=(const AdminService_cloneTable_result&);
  AdminService_cloneTable_result() {
  }

  virtual ~AdminService_cloneTable_result() throw();
   ::ServiceException se;

  _AdminService_cloneTable_result__isset __isset;

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_cloneTable_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_cloneTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_cloneTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_cloneTable_presult__isset {
  _AdminService_cloneTable_presult__isset() : se(false) {}
  bool se;
} _AdminService_cloneTable_presult__isset;

class AdminService_cloneTable_presult {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};


  virtual ~AdminService_cloneTable_presult() throw();
   ::ServiceException se;

  _AdminService_cloneTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_disableTable_args__isset {
  _AdminService_disableTable_args__isset() : tableName(false) {}
  bool tableName;
} _AdminService_disableTable_args__isset;

class AdminService_disableTable_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  AdminService_disableTable_args(const AdminService_disableTable_args&);
  AdminService_disableTable_args& operator=(const AdminService_disableTable_args&);
  AdminService_disableTable_args() : tableName() {
  }

  virtual ~AdminService_disableTable_args() throw();
  std::string tableName;

  _AdminService_disableTable_args__isset __isset;

  void __set_tableName(const std::string& val);

  bool operator == (const AdminService_disableTable_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const AdminService_disableTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_disableTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_disableTable_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~AdminService_disableTable_pargs() throw();
  const std::string* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_disableTable_result__isset {
  _AdminService_disableTable_result__isset() : se(false) {}
  bool se;
} _AdminService_disableTable_result__isset;

class AdminService_disableTable_result {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};

  AdminService_disableTable_result(const AdminService_disableTable_result&);
  AdminService_disableTable_result& operator=(const AdminService_disableTable_result&);
  AdminService_disableTable_result() {
  }

  virtual ~AdminService_disableTable_result() throw();
   ::ServiceException se;

  _AdminService_disableTable_result__isset __isset;

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_disableTable_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_disableTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_disableTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_disableTable_presult__isset {
  _AdminService_disableTable_presult__isset() : se(false) {}
  bool se;
} _AdminService_disableTable_presult__isset;

class AdminService_disableTable_presult {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};


  virtual ~AdminService_disableTable_presult() throw();
   ::ServiceException se;

  _AdminService_disableTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_enableTable_args__isset {
  _AdminService_enableTable_args__isset() : tableName(false) {}
  bool tableName;
} _AdminService_enableTable_args__isset;

class AdminService_enableTable_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  AdminService_enableTable_args(const AdminService_enableTable_args&);
  AdminService_enableTable_args& operator=(const AdminService_enableTable_args&);
  AdminService_enableTable_args() : tableName() {
  }

  virtual ~AdminService_enableTable_args() throw();
  std::string tableName;

  _AdminService_enableTable_args__isset __isset;

  void __set_tableName(const std::string& val);

  bool operator == (const AdminService_enableTable_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const AdminService_enableTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_enableTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_enableTable_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~AdminService_enableTable_pargs() throw();
  const std::string* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_enableTable_result__isset {
  _AdminService_enableTable_result__isset() : se(false) {}
  bool se;
} _AdminService_enableTable_result__isset;

class AdminService_enableTable_result {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};

  AdminService_enableTable_result(const AdminService_enableTable_result&);
  AdminService_enableTable_result& operator=(const AdminService_enableTable_result&);
  AdminService_enableTable_result() {
  }

  virtual ~AdminService_enableTable_result() throw();
   ::ServiceException se;

  _AdminService_enableTable_result__isset __isset;

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_enableTable_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_enableTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_enableTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_enableTable_presult__isset {
  _AdminService_enableTable_presult__isset() : se(false) {}
  bool se;
} _AdminService_enableTable_presult__isset;

class AdminService_enableTable_presult {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};


  virtual ~AdminService_enableTable_presult() throw();
   ::ServiceException se;

  _AdminService_enableTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_describeTable_args__isset {
  _AdminService_describeTable_args__isset() : tableName(false) {}
  bool tableName;
} _AdminService_describeTable_args__isset;

class AdminService_describeTable_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  AdminService_describeTable_args(const AdminService_describeTable_args&);
  AdminService_describeTable_args& operator=(const AdminService_describeTable_args&);
  AdminService_describeTable_args() : tableName() {
  }

  virtual ~AdminService_describeTable_args() throw();
  std::string tableName;

  _AdminService_describeTable_args__isset __isset;

  void __set_tableName(const std::string& val);

  bool operator == (const AdminService_describeTable_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const AdminService_describeTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_describeTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_describeTable_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~AdminService_describeTable_pargs() throw();
  const std::string* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_describeTable_result__isset {
  _AdminService_describeTable_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_describeTable_result__isset;

class AdminService_describeTable_result {
 public:

  static const char* ascii_fingerprint; // = "EE7E54EB9B4570249C5042C17FB3FD2E";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x7E,0x54,0xEB,0x9B,0x45,0x70,0x24,0x9C,0x50,0x42,0xC1,0x7F,0xB3,0xFD,0x2E};

  AdminService_describeTable_result(const AdminService_describeTable_result&);
  AdminService_describeTable_result& operator=(const AdminService_describeTable_result&);
  AdminService_describeTable_result() {
  }

  virtual ~AdminService_describeTable_result() throw();
   ::TableSpec success;
   ::ServiceException se;

  _AdminService_describeTable_result__isset __isset;

  void __set_success(const  ::TableSpec& val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_describeTable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_describeTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_describeTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_describeTable_presult__isset {
  _AdminService_describeTable_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_describeTable_presult__isset;

class AdminService_describeTable_presult {
 public:

  static const char* ascii_fingerprint; // = "EE7E54EB9B4570249C5042C17FB3FD2E";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x7E,0x54,0xEB,0x9B,0x45,0x70,0x24,0x9C,0x50,0x42,0xC1,0x7F,0xB3,0xFD,0x2E};


  virtual ~AdminService_describeTable_presult() throw();
   ::TableSpec* success;
   ::ServiceException se;

  _AdminService_describeTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_getTableStatus_args__isset {
  _AdminService_getTableStatus_args__isset() : tableName(false) {}
  bool tableName;
} _AdminService_getTableStatus_args__isset;

class AdminService_getTableStatus_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  AdminService_getTableStatus_args(const AdminService_getTableStatus_args&);
  AdminService_getTableStatus_args& operator=(const AdminService_getTableStatus_args&);
  AdminService_getTableStatus_args() : tableName() {
  }

  virtual ~AdminService_getTableStatus_args() throw();
  std::string tableName;

  _AdminService_getTableStatus_args__isset __isset;

  void __set_tableName(const std::string& val);

  bool operator == (const AdminService_getTableStatus_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const AdminService_getTableStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_getTableStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_getTableStatus_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~AdminService_getTableStatus_pargs() throw();
  const std::string* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_getTableStatus_result__isset {
  _AdminService_getTableStatus_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_getTableStatus_result__isset;

class AdminService_getTableStatus_result {
 public:

  static const char* ascii_fingerprint; // = "DFD59B565347C328C3E59F72C2B1CFEB";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0xD5,0x9B,0x56,0x53,0x47,0xC3,0x28,0xC3,0xE5,0x9F,0x72,0xC2,0xB1,0xCF,0xEB};

  AdminService_getTableStatus_result(const AdminService_getTableStatus_result&);
  AdminService_getTableStatus_result& operator=(const AdminService_getTableStatus_result&);
  AdminService_getTableStatus_result() {
  }

  virtual ~AdminService_getTableStatus_result() throw();
   ::TableStatus success;
   ::ServiceException se;

  _AdminService_getTableStatus_result__isset __isset;

  void __set_success(const  ::TableStatus& val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_getTableStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_getTableStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_getTableStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_getTableStatus_presult__isset {
  _AdminService_getTableStatus_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_getTableStatus_presult__isset;

class AdminService_getTableStatus_presult {
 public:

  static const char* ascii_fingerprint; // = "DFD59B565347C328C3E59F72C2B1CFEB";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0xD5,0x9B,0x56,0x53,0x47,0xC3,0x28,0xC3,0xE5,0x9F,0x72,0xC2,0xB1,0xCF,0xEB};


  virtual ~AdminService_getTableStatus_presult() throw();
   ::TableStatus* success;
   ::ServiceException se;

  _AdminService_getTableStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_getTableState_args__isset {
  _AdminService_getTableState_args__isset() : tableName(false) {}
  bool tableName;
} _AdminService_getTableState_args__isset;

class AdminService_getTableState_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  AdminService_getTableState_args(const AdminService_getTableState_args&);
  AdminService_getTableState_args& operator=(const AdminService_getTableState_args&);
  AdminService_getTableState_args() : tableName() {
  }

  virtual ~AdminService_getTableState_args() throw();
  std::string tableName;

  _AdminService_getTableState_args__isset __isset;

  void __set_tableName(const std::string& val);

  bool operator == (const AdminService_getTableState_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const AdminService_getTableState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_getTableState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_getTableState_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~AdminService_getTableState_pargs() throw();
  const std::string* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_getTableState_result__isset {
  _AdminService_getTableState_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_getTableState_result__isset;

class AdminService_getTableState_result {
 public:

  static const char* ascii_fingerprint; // = "EA8EF67B368E16AE3A85ED2528402652";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x8E,0xF6,0x7B,0x36,0x8E,0x16,0xAE,0x3A,0x85,0xED,0x25,0x28,0x40,0x26,0x52};

  AdminService_getTableState_result(const AdminService_getTableState_result&);
  AdminService_getTableState_result& operator=(const AdminService_getTableState_result&);
  AdminService_getTableState_result() : success(( ::TableState::type)0) {
  }

  virtual ~AdminService_getTableState_result() throw();
   ::TableState::type success;
   ::ServiceException se;

  _AdminService_getTableState_result__isset __isset;

  void __set_success(const  ::TableState::type val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_getTableState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_getTableState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_getTableState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_getTableState_presult__isset {
  _AdminService_getTableState_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_getTableState_presult__isset;

class AdminService_getTableState_presult {
 public:

  static const char* ascii_fingerprint; // = "EA8EF67B368E16AE3A85ED2528402652";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x8E,0xF6,0x7B,0x36,0x8E,0x16,0xAE,0x3A,0x85,0xED,0x25,0x28,0x40,0x26,0x52};


  virtual ~AdminService_getTableState_presult() throw();
   ::TableState::type* success;
   ::ServiceException se;

  _AdminService_getTableState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_getTableSplits_args__isset {
  _AdminService_getTableSplits_args__isset() : tableName(false), startKey(false), stopKey(false) {}
  bool tableName;
  bool startKey;
  bool stopKey;
} _AdminService_getTableSplits_args__isset;

class AdminService_getTableSplits_args {
 public:

  static const char* ascii_fingerprint; // = "A03871FF9E0E353C75A5125B107A69A7";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0x38,0x71,0xFF,0x9E,0x0E,0x35,0x3C,0x75,0xA5,0x12,0x5B,0x10,0x7A,0x69,0xA7};

  AdminService_getTableSplits_args(const AdminService_getTableSplits_args&);
  AdminService_getTableSplits_args& operator=(const AdminService_getTableSplits_args&);
  AdminService_getTableSplits_args() : tableName() {
  }

  virtual ~AdminService_getTableSplits_args() throw();
  std::string tableName;
   ::Dictionary startKey;
   ::Dictionary stopKey;

  _AdminService_getTableSplits_args__isset __isset;

  void __set_tableName(const std::string& val);

  void __set_startKey(const  ::Dictionary& val);

  void __set_stopKey(const  ::Dictionary& val);

  bool operator == (const AdminService_getTableSplits_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    if (!(startKey == rhs.startKey))
      return false;
    if (!(stopKey == rhs.stopKey))
      return false;
    return true;
  }
  bool operator != (const AdminService_getTableSplits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_getTableSplits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_getTableSplits_pargs {
 public:

  static const char* ascii_fingerprint; // = "A03871FF9E0E353C75A5125B107A69A7";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0x38,0x71,0xFF,0x9E,0x0E,0x35,0x3C,0x75,0xA5,0x12,0x5B,0x10,0x7A,0x69,0xA7};


  virtual ~AdminService_getTableSplits_pargs() throw();
  const std::string* tableName;
  const  ::Dictionary* startKey;
  const  ::Dictionary* stopKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_getTableSplits_result__isset {
  _AdminService_getTableSplits_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_getTableSplits_result__isset;

class AdminService_getTableSplits_result {
 public:

  static const char* ascii_fingerprint; // = "D9E22BE2F47C005A878A5BEF8D59AF5F";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xE2,0x2B,0xE2,0xF4,0x7C,0x00,0x5A,0x87,0x8A,0x5B,0xEF,0x8D,0x59,0xAF,0x5F};

  AdminService_getTableSplits_result(const AdminService_getTableSplits_result&);
  AdminService_getTableSplits_result& operator=(const AdminService_getTableSplits_result&);
  AdminService_getTableSplits_result() {
  }

  virtual ~AdminService_getTableSplits_result() throw();
  std::vector< ::TableSplit>  success;
   ::ServiceException se;

  _AdminService_getTableSplits_result__isset __isset;

  void __set_success(const std::vector< ::TableSplit> & val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_getTableSplits_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_getTableSplits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_getTableSplits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_getTableSplits_presult__isset {
  _AdminService_getTableSplits_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_getTableSplits_presult__isset;

class AdminService_getTableSplits_presult {
 public:

  static const char* ascii_fingerprint; // = "D9E22BE2F47C005A878A5BEF8D59AF5F";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xE2,0x2B,0xE2,0xF4,0x7C,0x00,0x5A,0x87,0x8A,0x5B,0xEF,0x8D,0x59,0xAF,0x5F};


  virtual ~AdminService_getTableSplits_presult() throw();
  std::vector< ::TableSplit> * success;
   ::ServiceException se;

  _AdminService_getTableSplits_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_queryMetric_args__isset {
  _AdminService_queryMetric_args__isset() : query(false) {}
  bool query;
} _AdminService_queryMetric_args__isset;

class AdminService_queryMetric_args {
 public:

  static const char* ascii_fingerprint; // = "E673E9B981CB222BA10FE6AF2A0991A6";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0x73,0xE9,0xB9,0x81,0xCB,0x22,0x2B,0xA1,0x0F,0xE6,0xAF,0x2A,0x09,0x91,0xA6};

  AdminService_queryMetric_args(const AdminService_queryMetric_args&);
  AdminService_queryMetric_args& operator=(const AdminService_queryMetric_args&);
  AdminService_queryMetric_args() {
  }

  virtual ~AdminService_queryMetric_args() throw();
  MetricQueryRequest query;

  _AdminService_queryMetric_args__isset __isset;

  void __set_query(const MetricQueryRequest& val);

  bool operator == (const AdminService_queryMetric_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const AdminService_queryMetric_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_queryMetric_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_queryMetric_pargs {
 public:

  static const char* ascii_fingerprint; // = "E673E9B981CB222BA10FE6AF2A0991A6";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0x73,0xE9,0xB9,0x81,0xCB,0x22,0x2B,0xA1,0x0F,0xE6,0xAF,0x2A,0x09,0x91,0xA6};


  virtual ~AdminService_queryMetric_pargs() throw();
  const MetricQueryRequest* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_queryMetric_result__isset {
  _AdminService_queryMetric_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_queryMetric_result__isset;

class AdminService_queryMetric_result {
 public:

  static const char* ascii_fingerprint; // = "4F2C675E1BBA37C2AF8F04BA96E192D3";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x2C,0x67,0x5E,0x1B,0xBA,0x37,0xC2,0xAF,0x8F,0x04,0xBA,0x96,0xE1,0x92,0xD3};

  AdminService_queryMetric_result(const AdminService_queryMetric_result&);
  AdminService_queryMetric_result& operator=(const AdminService_queryMetric_result&);
  AdminService_queryMetric_result() {
  }

  virtual ~AdminService_queryMetric_result() throw();
  TimeSeriesData success;
   ::ServiceException se;

  _AdminService_queryMetric_result__isset __isset;

  void __set_success(const TimeSeriesData& val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_queryMetric_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_queryMetric_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_queryMetric_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_queryMetric_presult__isset {
  _AdminService_queryMetric_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_queryMetric_presult__isset;

class AdminService_queryMetric_presult {
 public:

  static const char* ascii_fingerprint; // = "4F2C675E1BBA37C2AF8F04BA96E192D3";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x2C,0x67,0x5E,0x1B,0xBA,0x37,0xC2,0xAF,0x8F,0x04,0xBA,0x96,0xE1,0x92,0xD3};


  virtual ~AdminService_queryMetric_presult() throw();
  TimeSeriesData* success;
   ::ServiceException se;

  _AdminService_queryMetric_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_queryMetrics_args__isset {
  _AdminService_queryMetrics_args__isset() : queries(false) {}
  bool queries;
} _AdminService_queryMetrics_args__isset;

class AdminService_queryMetrics_args {
 public:

  static const char* ascii_fingerprint; // = "E93112B6ADC7A5A8759705B6A61893AF";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0x31,0x12,0xB6,0xAD,0xC7,0xA5,0xA8,0x75,0x97,0x05,0xB6,0xA6,0x18,0x93,0xAF};

  AdminService_queryMetrics_args(const AdminService_queryMetrics_args&);
  AdminService_queryMetrics_args& operator=(const AdminService_queryMetrics_args&);
  AdminService_queryMetrics_args() {
  }

  virtual ~AdminService_queryMetrics_args() throw();
  std::vector<MetricQueryRequest>  queries;

  _AdminService_queryMetrics_args__isset __isset;

  void __set_queries(const std::vector<MetricQueryRequest> & val);

  bool operator == (const AdminService_queryMetrics_args & rhs) const
  {
    if (!(queries == rhs.queries))
      return false;
    return true;
  }
  bool operator != (const AdminService_queryMetrics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_queryMetrics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_queryMetrics_pargs {
 public:

  static const char* ascii_fingerprint; // = "E93112B6ADC7A5A8759705B6A61893AF";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0x31,0x12,0xB6,0xAD,0xC7,0xA5,0xA8,0x75,0x97,0x05,0xB6,0xA6,0x18,0x93,0xAF};


  virtual ~AdminService_queryMetrics_pargs() throw();
  const std::vector<MetricQueryRequest> * queries;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_queryMetrics_result__isset {
  _AdminService_queryMetrics_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_queryMetrics_result__isset;

class AdminService_queryMetrics_result {
 public:

  static const char* ascii_fingerprint; // = "090A777BE181C9B7F4D5ABF6C3973CC7";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0x0A,0x77,0x7B,0xE1,0x81,0xC9,0xB7,0xF4,0xD5,0xAB,0xF6,0xC3,0x97,0x3C,0xC7};

  AdminService_queryMetrics_result(const AdminService_queryMetrics_result&);
  AdminService_queryMetrics_result& operator=(const AdminService_queryMetrics_result&);
  AdminService_queryMetrics_result() {
  }

  virtual ~AdminService_queryMetrics_result() throw();
  std::vector<TimeSeriesData>  success;
   ::ServiceException se;

  _AdminService_queryMetrics_result__isset __isset;

  void __set_success(const std::vector<TimeSeriesData> & val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_queryMetrics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_queryMetrics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_queryMetrics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_queryMetrics_presult__isset {
  _AdminService_queryMetrics_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_queryMetrics_presult__isset;

class AdminService_queryMetrics_presult {
 public:

  static const char* ascii_fingerprint; // = "090A777BE181C9B7F4D5ABF6C3973CC7";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0x0A,0x77,0x7B,0xE1,0x81,0xC9,0xB7,0xF4,0xD5,0xAB,0xF6,0xC3,0x97,0x3C,0xC7};


  virtual ~AdminService_queryMetrics_presult() throw();
  std::vector<TimeSeriesData> * success;
   ::ServiceException se;

  _AdminService_queryMetrics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AdminService_findAllAppInfo_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  AdminService_findAllAppInfo_args(const AdminService_findAllAppInfo_args&);
  AdminService_findAllAppInfo_args& operator=(const AdminService_findAllAppInfo_args&);
  AdminService_findAllAppInfo_args() {
  }

  virtual ~AdminService_findAllAppInfo_args() throw();

  bool operator == (const AdminService_findAllAppInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AdminService_findAllAppInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_findAllAppInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_findAllAppInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~AdminService_findAllAppInfo_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_findAllAppInfo_result__isset {
  _AdminService_findAllAppInfo_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_findAllAppInfo_result__isset;

class AdminService_findAllAppInfo_result {
 public:

  static const char* ascii_fingerprint; // = "EBC388C333FF34BCE7B0171C041BBA6F";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0xC3,0x88,0xC3,0x33,0xFF,0x34,0xBC,0xE7,0xB0,0x17,0x1C,0x04,0x1B,0xBA,0x6F};

  AdminService_findAllAppInfo_result(const AdminService_findAllAppInfo_result&);
  AdminService_findAllAppInfo_result& operator=(const AdminService_findAllAppInfo_result&);
  AdminService_findAllAppInfo_result() {
  }

  virtual ~AdminService_findAllAppInfo_result() throw();
  std::vector<AppInfo>  success;
   ::ServiceException se;

  _AdminService_findAllAppInfo_result__isset __isset;

  void __set_success(const std::vector<AppInfo> & val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_findAllAppInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_findAllAppInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_findAllAppInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_findAllAppInfo_presult__isset {
  _AdminService_findAllAppInfo_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_findAllAppInfo_presult__isset;

class AdminService_findAllAppInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "EBC388C333FF34BCE7B0171C041BBA6F";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0xC3,0x88,0xC3,0x33,0xFF,0x34,0xBC,0xE7,0xB0,0x17,0x1C,0x04,0x1B,0xBA,0x6F};


  virtual ~AdminService_findAllAppInfo_presult() throw();
  std::vector<AppInfo> * success;
   ::ServiceException se;

  _AdminService_findAllAppInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_getTableSize_args__isset {
  _AdminService_getTableSize_args__isset() : tableName(false) {}
  bool tableName;
} _AdminService_getTableSize_args__isset;

class AdminService_getTableSize_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  AdminService_getTableSize_args(const AdminService_getTableSize_args&);
  AdminService_getTableSize_args& operator=(const AdminService_getTableSize_args&);
  AdminService_getTableSize_args() : tableName() {
  }

  virtual ~AdminService_getTableSize_args() throw();
  std::string tableName;

  _AdminService_getTableSize_args__isset __isset;

  void __set_tableName(const std::string& val);

  bool operator == (const AdminService_getTableSize_args & rhs) const
  {
    if (!(tableName == rhs.tableName))
      return false;
    return true;
  }
  bool operator != (const AdminService_getTableSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_getTableSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_getTableSize_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~AdminService_getTableSize_pargs() throw();
  const std::string* tableName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_getTableSize_result__isset {
  _AdminService_getTableSize_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_getTableSize_result__isset;

class AdminService_getTableSize_result {
 public:

  static const char* ascii_fingerprint; // = "1D12D3A64612148AE4A57270A7DD00AC";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0x12,0xD3,0xA6,0x46,0x12,0x14,0x8A,0xE4,0xA5,0x72,0x70,0xA7,0xDD,0x00,0xAC};

  AdminService_getTableSize_result(const AdminService_getTableSize_result&);
  AdminService_getTableSize_result& operator=(const AdminService_getTableSize_result&);
  AdminService_getTableSize_result() : success(0) {
  }

  virtual ~AdminService_getTableSize_result() throw();
  int64_t success;
   ::ServiceException se;

  _AdminService_getTableSize_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_getTableSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_getTableSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_getTableSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_getTableSize_presult__isset {
  _AdminService_getTableSize_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AdminService_getTableSize_presult__isset;

class AdminService_getTableSize_presult {
 public:

  static const char* ascii_fingerprint; // = "1D12D3A64612148AE4A57270A7DD00AC";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0x12,0xD3,0xA6,0x46,0x12,0x14,0x8A,0xE4,0xA5,0x72,0x70,0xA7,0xDD,0x00,0xAC};


  virtual ~AdminService_getTableSize_presult() throw();
  int64_t* success;
   ::ServiceException se;

  _AdminService_getTableSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdminService_putClientMetrics_args__isset {
  _AdminService_putClientMetrics_args__isset() : clientMetrics(false) {}
  bool clientMetrics;
} _AdminService_putClientMetrics_args__isset;

class AdminService_putClientMetrics_args {
 public:

  static const char* ascii_fingerprint; // = "925CA25DA69C89C4F75E4DD46785A708";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0x5C,0xA2,0x5D,0xA6,0x9C,0x89,0xC4,0xF7,0x5E,0x4D,0xD4,0x67,0x85,0xA7,0x08};

  AdminService_putClientMetrics_args(const AdminService_putClientMetrics_args&);
  AdminService_putClientMetrics_args& operator=(const AdminService_putClientMetrics_args&);
  AdminService_putClientMetrics_args() {
  }

  virtual ~AdminService_putClientMetrics_args() throw();
  ClientMetrics clientMetrics;

  _AdminService_putClientMetrics_args__isset __isset;

  void __set_clientMetrics(const ClientMetrics& val);

  bool operator == (const AdminService_putClientMetrics_args & rhs) const
  {
    if (!(clientMetrics == rhs.clientMetrics))
      return false;
    return true;
  }
  bool operator != (const AdminService_putClientMetrics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_putClientMetrics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdminService_putClientMetrics_pargs {
 public:

  static const char* ascii_fingerprint; // = "925CA25DA69C89C4F75E4DD46785A708";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0x5C,0xA2,0x5D,0xA6,0x9C,0x89,0xC4,0xF7,0x5E,0x4D,0xD4,0x67,0x85,0xA7,0x08};


  virtual ~AdminService_putClientMetrics_pargs() throw();
  const ClientMetrics* clientMetrics;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_putClientMetrics_result__isset {
  _AdminService_putClientMetrics_result__isset() : se(false) {}
  bool se;
} _AdminService_putClientMetrics_result__isset;

class AdminService_putClientMetrics_result {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};

  AdminService_putClientMetrics_result(const AdminService_putClientMetrics_result&);
  AdminService_putClientMetrics_result& operator=(const AdminService_putClientMetrics_result&);
  AdminService_putClientMetrics_result() {
  }

  virtual ~AdminService_putClientMetrics_result() throw();
   ::ServiceException se;

  _AdminService_putClientMetrics_result__isset __isset;

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AdminService_putClientMetrics_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AdminService_putClientMetrics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminService_putClientMetrics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdminService_putClientMetrics_presult__isset {
  _AdminService_putClientMetrics_presult__isset() : se(false) {}
  bool se;
} _AdminService_putClientMetrics_presult__isset;

class AdminService_putClientMetrics_presult {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};


  virtual ~AdminService_putClientMetrics_presult() throw();
   ::ServiceException se;

  _AdminService_putClientMetrics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AdminServiceClient : virtual public AdminServiceIf, public  ::BaseServiceClient {
 public:
  AdminServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::BaseServiceClient(prot, prot) {}
  AdminServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::BaseServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void saveAppInfo(const AppInfo& appInfo);
  void send_saveAppInfo(const AppInfo& appInfo);
  void recv_saveAppInfo();
  void getAppInfo(AppInfo& _return, const std::string& appId);
  void send_getAppInfo(const std::string& appId);
  void recv_getAppInfo(AppInfo& _return);
  void findAllApps(std::vector<AppInfo> & _return);
  void send_findAllApps();
  void recv_findAllApps(std::vector<AppInfo> & _return);
  void findAllTables(std::vector< ::TableInfo> & _return);
  void send_findAllTables();
  void recv_findAllTables(std::vector< ::TableInfo> & _return);
  void createTable( ::TableInfo& _return, const std::string& tableName, const  ::TableSpec& tableSpec);
  void send_createTable(const std::string& tableName, const  ::TableSpec& tableSpec);
  void recv_createTable( ::TableInfo& _return);
  void dropTable(const std::string& tableName);
  void send_dropTable(const std::string& tableName);
  void recv_dropTable();
  void lazyDropTable(const std::string& tableName);
  void send_lazyDropTable(const std::string& tableName);
  void recv_lazyDropTable();
  void alterTable(const std::string& tableName, const  ::TableSpec& tableSpec);
  void send_alterTable(const std::string& tableName, const  ::TableSpec& tableSpec);
  void recv_alterTable();
  void cloneTable(const std::string& srcName, const std::string& destTable, const bool flushTable);
  void send_cloneTable(const std::string& srcName, const std::string& destTable, const bool flushTable);
  void recv_cloneTable();
  void disableTable(const std::string& tableName);
  void send_disableTable(const std::string& tableName);
  void recv_disableTable();
  void enableTable(const std::string& tableName);
  void send_enableTable(const std::string& tableName);
  void recv_enableTable();
  void describeTable( ::TableSpec& _return, const std::string& tableName);
  void send_describeTable(const std::string& tableName);
  void recv_describeTable( ::TableSpec& _return);
  void getTableStatus( ::TableStatus& _return, const std::string& tableName);
  void send_getTableStatus(const std::string& tableName);
  void recv_getTableStatus( ::TableStatus& _return);
   ::TableState::type getTableState(const std::string& tableName);
  void send_getTableState(const std::string& tableName);
   ::TableState::type recv_getTableState();
  void getTableSplits(std::vector< ::TableSplit> & _return, const std::string& tableName, const  ::Dictionary& startKey, const  ::Dictionary& stopKey);
  void send_getTableSplits(const std::string& tableName, const  ::Dictionary& startKey, const  ::Dictionary& stopKey);
  void recv_getTableSplits(std::vector< ::TableSplit> & _return);
  void queryMetric(TimeSeriesData& _return, const MetricQueryRequest& query);
  void send_queryMetric(const MetricQueryRequest& query);
  void recv_queryMetric(TimeSeriesData& _return);
  void queryMetrics(std::vector<TimeSeriesData> & _return, const std::vector<MetricQueryRequest> & queries);
  void send_queryMetrics(const std::vector<MetricQueryRequest> & queries);
  void recv_queryMetrics(std::vector<TimeSeriesData> & _return);
  void findAllAppInfo(std::vector<AppInfo> & _return);
  void send_findAllAppInfo();
  void recv_findAllAppInfo(std::vector<AppInfo> & _return);
  int64_t getTableSize(const std::string& tableName);
  void send_getTableSize(const std::string& tableName);
  int64_t recv_getTableSize();
  void putClientMetrics(const ClientMetrics& clientMetrics);
  void send_putClientMetrics(const ClientMetrics& clientMetrics);
  void recv_putClientMetrics();
};

class AdminServiceProcessor : public  ::BaseServiceProcessor {
 protected:
  boost::shared_ptr<AdminServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AdminServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_saveAppInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAppInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findAllApps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findAllTables(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dropTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lazyDropTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_alterTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cloneTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disableTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enableTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_describeTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTableStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTableState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTableSplits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryMetric(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryMetrics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findAllAppInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTableSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putClientMetrics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AdminServiceProcessor(boost::shared_ptr<AdminServiceIf> iface) :
     ::BaseServiceProcessor(iface),
    iface_(iface) {
    processMap_["saveAppInfo"] = &AdminServiceProcessor::process_saveAppInfo;
    processMap_["getAppInfo"] = &AdminServiceProcessor::process_getAppInfo;
    processMap_["findAllApps"] = &AdminServiceProcessor::process_findAllApps;
    processMap_["findAllTables"] = &AdminServiceProcessor::process_findAllTables;
    processMap_["createTable"] = &AdminServiceProcessor::process_createTable;
    processMap_["dropTable"] = &AdminServiceProcessor::process_dropTable;
    processMap_["lazyDropTable"] = &AdminServiceProcessor::process_lazyDropTable;
    processMap_["alterTable"] = &AdminServiceProcessor::process_alterTable;
    processMap_["cloneTable"] = &AdminServiceProcessor::process_cloneTable;
    processMap_["disableTable"] = &AdminServiceProcessor::process_disableTable;
    processMap_["enableTable"] = &AdminServiceProcessor::process_enableTable;
    processMap_["describeTable"] = &AdminServiceProcessor::process_describeTable;
    processMap_["getTableStatus"] = &AdminServiceProcessor::process_getTableStatus;
    processMap_["getTableState"] = &AdminServiceProcessor::process_getTableState;
    processMap_["getTableSplits"] = &AdminServiceProcessor::process_getTableSplits;
    processMap_["queryMetric"] = &AdminServiceProcessor::process_queryMetric;
    processMap_["queryMetrics"] = &AdminServiceProcessor::process_queryMetrics;
    processMap_["findAllAppInfo"] = &AdminServiceProcessor::process_findAllAppInfo;
    processMap_["getTableSize"] = &AdminServiceProcessor::process_getTableSize;
    processMap_["putClientMetrics"] = &AdminServiceProcessor::process_putClientMetrics;
  }

  virtual ~AdminServiceProcessor() {}
};

class AdminServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AdminServiceProcessorFactory(const ::boost::shared_ptr< AdminServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AdminServiceIfFactory > handlerFactory_;
};

class AdminServiceMultiface : virtual public AdminServiceIf, public  ::BaseServiceMultiface {
 public:
  AdminServiceMultiface(std::vector<boost::shared_ptr<AdminServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<AdminServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::BaseServiceMultiface::add(*iter);
    }
  }
  virtual ~AdminServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AdminServiceIf> > ifaces_;
  AdminServiceMultiface() {}
  void add(boost::shared_ptr<AdminServiceIf> iface) {
     ::BaseServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void saveAppInfo(const AppInfo& appInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveAppInfo(appInfo);
    }
    ifaces_[i]->saveAppInfo(appInfo);
  }

  void getAppInfo(AppInfo& _return, const std::string& appId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAppInfo(_return, appId);
    }
    ifaces_[i]->getAppInfo(_return, appId);
    return;
  }

  void findAllApps(std::vector<AppInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findAllApps(_return);
    }
    ifaces_[i]->findAllApps(_return);
    return;
  }

  void findAllTables(std::vector< ::TableInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findAllTables(_return);
    }
    ifaces_[i]->findAllTables(_return);
    return;
  }

  void createTable( ::TableInfo& _return, const std::string& tableName, const  ::TableSpec& tableSpec) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createTable(_return, tableName, tableSpec);
    }
    ifaces_[i]->createTable(_return, tableName, tableSpec);
    return;
  }

  void dropTable(const std::string& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dropTable(tableName);
    }
    ifaces_[i]->dropTable(tableName);
  }

  void lazyDropTable(const std::string& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lazyDropTable(tableName);
    }
    ifaces_[i]->lazyDropTable(tableName);
  }

  void alterTable(const std::string& tableName, const  ::TableSpec& tableSpec) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->alterTable(tableName, tableSpec);
    }
    ifaces_[i]->alterTable(tableName, tableSpec);
  }

  void cloneTable(const std::string& srcName, const std::string& destTable, const bool flushTable) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cloneTable(srcName, destTable, flushTable);
    }
    ifaces_[i]->cloneTable(srcName, destTable, flushTable);
  }

  void disableTable(const std::string& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disableTable(tableName);
    }
    ifaces_[i]->disableTable(tableName);
  }

  void enableTable(const std::string& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enableTable(tableName);
    }
    ifaces_[i]->enableTable(tableName);
  }

  void describeTable( ::TableSpec& _return, const std::string& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->describeTable(_return, tableName);
    }
    ifaces_[i]->describeTable(_return, tableName);
    return;
  }

  void getTableStatus( ::TableStatus& _return, const std::string& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTableStatus(_return, tableName);
    }
    ifaces_[i]->getTableStatus(_return, tableName);
    return;
  }

   ::TableState::type getTableState(const std::string& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTableState(tableName);
    }
    return ifaces_[i]->getTableState(tableName);
  }

  void getTableSplits(std::vector< ::TableSplit> & _return, const std::string& tableName, const  ::Dictionary& startKey, const  ::Dictionary& stopKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTableSplits(_return, tableName, startKey, stopKey);
    }
    ifaces_[i]->getTableSplits(_return, tableName, startKey, stopKey);
    return;
  }

  void queryMetric(TimeSeriesData& _return, const MetricQueryRequest& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryMetric(_return, query);
    }
    ifaces_[i]->queryMetric(_return, query);
    return;
  }

  void queryMetrics(std::vector<TimeSeriesData> & _return, const std::vector<MetricQueryRequest> & queries) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryMetrics(_return, queries);
    }
    ifaces_[i]->queryMetrics(_return, queries);
    return;
  }

  void findAllAppInfo(std::vector<AppInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findAllAppInfo(_return);
    }
    ifaces_[i]->findAllAppInfo(_return);
    return;
  }

  int64_t getTableSize(const std::string& tableName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTableSize(tableName);
    }
    return ifaces_[i]->getTableSize(tableName);
  }

  void putClientMetrics(const ClientMetrics& clientMetrics) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putClientMetrics(clientMetrics);
    }
    ifaces_[i]->putClientMetrics(clientMetrics);
  }

};



#endif
