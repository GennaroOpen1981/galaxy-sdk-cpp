#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TableService_H
#define TableService_H

#include <thrift/TDispatchProcessor.h>
#include "Table_types.h"
#include "BaseService.h"



class TableServiceIf : virtual public  ::BaseServiceIf {
 public:
  virtual ~TableServiceIf() {}
  virtual void get(GetResult& _return, const GetRequest& request) = 0;
  virtual void put(PutResult& _return, const PutRequest& request) = 0;
  virtual void increment(IncrementResult& _return, const IncrementRequest& request) = 0;
  virtual void remove(RemoveResult& _return, const RemoveRequest& request) = 0;
  virtual void scan(ScanResult& _return, const ScanRequest& request) = 0;
  virtual void batch(BatchResult& _return, const BatchRequest& request) = 0;
};

class TableServiceIfFactory : virtual public  ::BaseServiceIfFactory {
 public:
  typedef TableServiceIf Handler;

  virtual ~TableServiceIfFactory() {}

  virtual TableServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::BaseServiceIf* /* handler */) = 0;
};

class TableServiceIfSingletonFactory : virtual public TableServiceIfFactory {
 public:
  TableServiceIfSingletonFactory(const boost::shared_ptr<TableServiceIf>& iface) : iface_(iface) {}
  virtual ~TableServiceIfSingletonFactory() {}

  virtual TableServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::BaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TableServiceIf> iface_;
};

class TableServiceNull : virtual public TableServiceIf , virtual public  ::BaseServiceNull {
 public:
  virtual ~TableServiceNull() {}
  void get(GetResult& /* _return */, const GetRequest& /* request */) {
    return;
  }
  void put(PutResult& /* _return */, const PutRequest& /* request */) {
    return;
  }
  void increment(IncrementResult& /* _return */, const IncrementRequest& /* request */) {
    return;
  }
  void remove(RemoveResult& /* _return */, const RemoveRequest& /* request */) {
    return;
  }
  void scan(ScanResult& /* _return */, const ScanRequest& /* request */) {
    return;
  }
  void batch(BatchResult& /* _return */, const BatchRequest& /* request */) {
    return;
  }
};

typedef struct _TableService_get_args__isset {
  _TableService_get_args__isset() : request(false) {}
  bool request;
} _TableService_get_args__isset;

class TableService_get_args {
 public:

  static const char* ascii_fingerprint; // = "19EC2282202AE0E0FDF6EB5D93F0D106";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xEC,0x22,0x82,0x20,0x2A,0xE0,0xE0,0xFD,0xF6,0xEB,0x5D,0x93,0xF0,0xD1,0x06};

  TableService_get_args(const TableService_get_args&);
  TableService_get_args& operator=(const TableService_get_args&);
  TableService_get_args() {
  }

  virtual ~TableService_get_args() throw();
  GetRequest request;

  _TableService_get_args__isset __isset;

  void __set_request(const GetRequest& val);

  bool operator == (const TableService_get_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TableService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TableService_get_pargs {
 public:

  static const char* ascii_fingerprint; // = "19EC2282202AE0E0FDF6EB5D93F0D106";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xEC,0x22,0x82,0x20,0x2A,0xE0,0xE0,0xFD,0xF6,0xEB,0x5D,0x93,0xF0,0xD1,0x06};


  virtual ~TableService_get_pargs() throw();
  const GetRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TableService_get_result__isset {
  _TableService_get_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _TableService_get_result__isset;

class TableService_get_result {
 public:

  static const char* ascii_fingerprint; // = "3F345672E7EBFF4B6AABBFEEEB5624AA";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x34,0x56,0x72,0xE7,0xEB,0xFF,0x4B,0x6A,0xAB,0xBF,0xEE,0xEB,0x56,0x24,0xAA};

  TableService_get_result(const TableService_get_result&);
  TableService_get_result& operator=(const TableService_get_result&);
  TableService_get_result() {
  }

  virtual ~TableService_get_result() throw();
  GetResult success;
   ::ServiceException se;

  _TableService_get_result__isset __isset;

  void __set_success(const GetResult& val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const TableService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const TableService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TableService_get_presult__isset {
  _TableService_get_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _TableService_get_presult__isset;

class TableService_get_presult {
 public:

  static const char* ascii_fingerprint; // = "3F345672E7EBFF4B6AABBFEEEB5624AA";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x34,0x56,0x72,0xE7,0xEB,0xFF,0x4B,0x6A,0xAB,0xBF,0xEE,0xEB,0x56,0x24,0xAA};


  virtual ~TableService_get_presult() throw();
  GetResult* success;
   ::ServiceException se;

  _TableService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TableService_put_args__isset {
  _TableService_put_args__isset() : request(false) {}
  bool request;
} _TableService_put_args__isset;

class TableService_put_args {
 public:

  static const char* ascii_fingerprint; // = "9669321835B235AFEAE38E96706E334C";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x69,0x32,0x18,0x35,0xB2,0x35,0xAF,0xEA,0xE3,0x8E,0x96,0x70,0x6E,0x33,0x4C};

  TableService_put_args(const TableService_put_args&);
  TableService_put_args& operator=(const TableService_put_args&);
  TableService_put_args() {
  }

  virtual ~TableService_put_args() throw();
  PutRequest request;

  _TableService_put_args__isset __isset;

  void __set_request(const PutRequest& val);

  bool operator == (const TableService_put_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TableService_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableService_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TableService_put_pargs {
 public:

  static const char* ascii_fingerprint; // = "9669321835B235AFEAE38E96706E334C";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x69,0x32,0x18,0x35,0xB2,0x35,0xAF,0xEA,0xE3,0x8E,0x96,0x70,0x6E,0x33,0x4C};


  virtual ~TableService_put_pargs() throw();
  const PutRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TableService_put_result__isset {
  _TableService_put_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _TableService_put_result__isset;

class TableService_put_result {
 public:

  static const char* ascii_fingerprint; // = "226649B3AD40491A1DE30B10B4524FF3";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0x66,0x49,0xB3,0xAD,0x40,0x49,0x1A,0x1D,0xE3,0x0B,0x10,0xB4,0x52,0x4F,0xF3};

  TableService_put_result(const TableService_put_result&);
  TableService_put_result& operator=(const TableService_put_result&);
  TableService_put_result() {
  }

  virtual ~TableService_put_result() throw();
  PutResult success;
   ::ServiceException se;

  _TableService_put_result__isset __isset;

  void __set_success(const PutResult& val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const TableService_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const TableService_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableService_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TableService_put_presult__isset {
  _TableService_put_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _TableService_put_presult__isset;

class TableService_put_presult {
 public:

  static const char* ascii_fingerprint; // = "226649B3AD40491A1DE30B10B4524FF3";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0x66,0x49,0xB3,0xAD,0x40,0x49,0x1A,0x1D,0xE3,0x0B,0x10,0xB4,0x52,0x4F,0xF3};


  virtual ~TableService_put_presult() throw();
  PutResult* success;
   ::ServiceException se;

  _TableService_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TableService_increment_args__isset {
  _TableService_increment_args__isset() : request(false) {}
  bool request;
} _TableService_increment_args__isset;

class TableService_increment_args {
 public:

  static const char* ascii_fingerprint; // = "78F3FB469831D323C54FFE953B74F06F";
  static const uint8_t binary_fingerprint[16]; // = {0x78,0xF3,0xFB,0x46,0x98,0x31,0xD3,0x23,0xC5,0x4F,0xFE,0x95,0x3B,0x74,0xF0,0x6F};

  TableService_increment_args(const TableService_increment_args&);
  TableService_increment_args& operator=(const TableService_increment_args&);
  TableService_increment_args() {
  }

  virtual ~TableService_increment_args() throw();
  IncrementRequest request;

  _TableService_increment_args__isset __isset;

  void __set_request(const IncrementRequest& val);

  bool operator == (const TableService_increment_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TableService_increment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableService_increment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TableService_increment_pargs {
 public:

  static const char* ascii_fingerprint; // = "78F3FB469831D323C54FFE953B74F06F";
  static const uint8_t binary_fingerprint[16]; // = {0x78,0xF3,0xFB,0x46,0x98,0x31,0xD3,0x23,0xC5,0x4F,0xFE,0x95,0x3B,0x74,0xF0,0x6F};


  virtual ~TableService_increment_pargs() throw();
  const IncrementRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TableService_increment_result__isset {
  _TableService_increment_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _TableService_increment_result__isset;

class TableService_increment_result {
 public:

  static const char* ascii_fingerprint; // = "3F345672E7EBFF4B6AABBFEEEB5624AA";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x34,0x56,0x72,0xE7,0xEB,0xFF,0x4B,0x6A,0xAB,0xBF,0xEE,0xEB,0x56,0x24,0xAA};

  TableService_increment_result(const TableService_increment_result&);
  TableService_increment_result& operator=(const TableService_increment_result&);
  TableService_increment_result() {
  }

  virtual ~TableService_increment_result() throw();
  IncrementResult success;
   ::ServiceException se;

  _TableService_increment_result__isset __isset;

  void __set_success(const IncrementResult& val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const TableService_increment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const TableService_increment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableService_increment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TableService_increment_presult__isset {
  _TableService_increment_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _TableService_increment_presult__isset;

class TableService_increment_presult {
 public:

  static const char* ascii_fingerprint; // = "3F345672E7EBFF4B6AABBFEEEB5624AA";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x34,0x56,0x72,0xE7,0xEB,0xFF,0x4B,0x6A,0xAB,0xBF,0xEE,0xEB,0x56,0x24,0xAA};


  virtual ~TableService_increment_presult() throw();
  IncrementResult* success;
   ::ServiceException se;

  _TableService_increment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TableService_remove_args__isset {
  _TableService_remove_args__isset() : request(false) {}
  bool request;
} _TableService_remove_args__isset;

class TableService_remove_args {
 public:

  static const char* ascii_fingerprint; // = "FC9A1DC186791B72E90DCF4BC4F511DD";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0x9A,0x1D,0xC1,0x86,0x79,0x1B,0x72,0xE9,0x0D,0xCF,0x4B,0xC4,0xF5,0x11,0xDD};

  TableService_remove_args(const TableService_remove_args&);
  TableService_remove_args& operator=(const TableService_remove_args&);
  TableService_remove_args() {
  }

  virtual ~TableService_remove_args() throw();
  RemoveRequest request;

  _TableService_remove_args__isset __isset;

  void __set_request(const RemoveRequest& val);

  bool operator == (const TableService_remove_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TableService_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableService_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TableService_remove_pargs {
 public:

  static const char* ascii_fingerprint; // = "FC9A1DC186791B72E90DCF4BC4F511DD";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0x9A,0x1D,0xC1,0x86,0x79,0x1B,0x72,0xE9,0x0D,0xCF,0x4B,0xC4,0xF5,0x11,0xDD};


  virtual ~TableService_remove_pargs() throw();
  const RemoveRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TableService_remove_result__isset {
  _TableService_remove_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _TableService_remove_result__isset;

class TableService_remove_result {
 public:

  static const char* ascii_fingerprint; // = "226649B3AD40491A1DE30B10B4524FF3";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0x66,0x49,0xB3,0xAD,0x40,0x49,0x1A,0x1D,0xE3,0x0B,0x10,0xB4,0x52,0x4F,0xF3};

  TableService_remove_result(const TableService_remove_result&);
  TableService_remove_result& operator=(const TableService_remove_result&);
  TableService_remove_result() {
  }

  virtual ~TableService_remove_result() throw();
  RemoveResult success;
   ::ServiceException se;

  _TableService_remove_result__isset __isset;

  void __set_success(const RemoveResult& val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const TableService_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const TableService_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableService_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TableService_remove_presult__isset {
  _TableService_remove_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _TableService_remove_presult__isset;

class TableService_remove_presult {
 public:

  static const char* ascii_fingerprint; // = "226649B3AD40491A1DE30B10B4524FF3";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0x66,0x49,0xB3,0xAD,0x40,0x49,0x1A,0x1D,0xE3,0x0B,0x10,0xB4,0x52,0x4F,0xF3};


  virtual ~TableService_remove_presult() throw();
  RemoveResult* success;
   ::ServiceException se;

  _TableService_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TableService_scan_args__isset {
  _TableService_scan_args__isset() : request(false) {}
  bool request;
} _TableService_scan_args__isset;

class TableService_scan_args {
 public:

  static const char* ascii_fingerprint; // = "65D200C20EFF855499FB94673A1C1CB3";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0xD2,0x00,0xC2,0x0E,0xFF,0x85,0x54,0x99,0xFB,0x94,0x67,0x3A,0x1C,0x1C,0xB3};

  TableService_scan_args(const TableService_scan_args&);
  TableService_scan_args& operator=(const TableService_scan_args&);
  TableService_scan_args() {
  }

  virtual ~TableService_scan_args() throw();
  ScanRequest request;

  _TableService_scan_args__isset __isset;

  void __set_request(const ScanRequest& val);

  bool operator == (const TableService_scan_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TableService_scan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableService_scan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TableService_scan_pargs {
 public:

  static const char* ascii_fingerprint; // = "65D200C20EFF855499FB94673A1C1CB3";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0xD2,0x00,0xC2,0x0E,0xFF,0x85,0x54,0x99,0xFB,0x94,0x67,0x3A,0x1C,0x1C,0xB3};


  virtual ~TableService_scan_pargs() throw();
  const ScanRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TableService_scan_result__isset {
  _TableService_scan_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _TableService_scan_result__isset;

class TableService_scan_result {
 public:

  static const char* ascii_fingerprint; // = "12DF143AAF83D8767A32F9FAEE45593E";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0xDF,0x14,0x3A,0xAF,0x83,0xD8,0x76,0x7A,0x32,0xF9,0xFA,0xEE,0x45,0x59,0x3E};

  TableService_scan_result(const TableService_scan_result&);
  TableService_scan_result& operator=(const TableService_scan_result&);
  TableService_scan_result() {
  }

  virtual ~TableService_scan_result() throw();
  ScanResult success;
   ::ServiceException se;

  _TableService_scan_result__isset __isset;

  void __set_success(const ScanResult& val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const TableService_scan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const TableService_scan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableService_scan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TableService_scan_presult__isset {
  _TableService_scan_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _TableService_scan_presult__isset;

class TableService_scan_presult {
 public:

  static const char* ascii_fingerprint; // = "12DF143AAF83D8767A32F9FAEE45593E";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0xDF,0x14,0x3A,0xAF,0x83,0xD8,0x76,0x7A,0x32,0xF9,0xFA,0xEE,0x45,0x59,0x3E};


  virtual ~TableService_scan_presult() throw();
  ScanResult* success;
   ::ServiceException se;

  _TableService_scan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TableService_batch_args__isset {
  _TableService_batch_args__isset() : request(false) {}
  bool request;
} _TableService_batch_args__isset;

class TableService_batch_args {
 public:

  static const char* ascii_fingerprint; // = "F965DEDE67A67880B7C878F433BACC0A";
  static const uint8_t binary_fingerprint[16]; // = {0xF9,0x65,0xDE,0xDE,0x67,0xA6,0x78,0x80,0xB7,0xC8,0x78,0xF4,0x33,0xBA,0xCC,0x0A};

  TableService_batch_args(const TableService_batch_args&);
  TableService_batch_args& operator=(const TableService_batch_args&);
  TableService_batch_args() {
  }

  virtual ~TableService_batch_args() throw();
  BatchRequest request;

  _TableService_batch_args__isset __isset;

  void __set_request(const BatchRequest& val);

  bool operator == (const TableService_batch_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const TableService_batch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableService_batch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TableService_batch_pargs {
 public:

  static const char* ascii_fingerprint; // = "F965DEDE67A67880B7C878F433BACC0A";
  static const uint8_t binary_fingerprint[16]; // = {0xF9,0x65,0xDE,0xDE,0x67,0xA6,0x78,0x80,0xB7,0xC8,0x78,0xF4,0x33,0xBA,0xCC,0x0A};


  virtual ~TableService_batch_pargs() throw();
  const BatchRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TableService_batch_result__isset {
  _TableService_batch_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _TableService_batch_result__isset;

class TableService_batch_result {
 public:

  static const char* ascii_fingerprint; // = "AF99F0024107E63D8147E6DC3C7D338E";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0x99,0xF0,0x02,0x41,0x07,0xE6,0x3D,0x81,0x47,0xE6,0xDC,0x3C,0x7D,0x33,0x8E};

  TableService_batch_result(const TableService_batch_result&);
  TableService_batch_result& operator=(const TableService_batch_result&);
  TableService_batch_result() {
  }

  virtual ~TableService_batch_result() throw();
  BatchResult success;
   ::ServiceException se;

  _TableService_batch_result__isset __isset;

  void __set_success(const BatchResult& val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const TableService_batch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const TableService_batch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableService_batch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TableService_batch_presult__isset {
  _TableService_batch_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _TableService_batch_presult__isset;

class TableService_batch_presult {
 public:

  static const char* ascii_fingerprint; // = "AF99F0024107E63D8147E6DC3C7D338E";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0x99,0xF0,0x02,0x41,0x07,0xE6,0x3D,0x81,0x47,0xE6,0xDC,0x3C,0x7D,0x33,0x8E};


  virtual ~TableService_batch_presult() throw();
  BatchResult* success;
   ::ServiceException se;

  _TableService_batch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TableServiceClient : virtual public TableServiceIf, public  ::BaseServiceClient {
 public:
  TableServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::BaseServiceClient(prot, prot) {}
  TableServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::BaseServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(GetResult& _return, const GetRequest& request);
  void send_get(const GetRequest& request);
  void recv_get(GetResult& _return);
  void put(PutResult& _return, const PutRequest& request);
  void send_put(const PutRequest& request);
  void recv_put(PutResult& _return);
  void increment(IncrementResult& _return, const IncrementRequest& request);
  void send_increment(const IncrementRequest& request);
  void recv_increment(IncrementResult& _return);
  void remove(RemoveResult& _return, const RemoveRequest& request);
  void send_remove(const RemoveRequest& request);
  void recv_remove(RemoveResult& _return);
  void scan(ScanResult& _return, const ScanRequest& request);
  void send_scan(const ScanRequest& request);
  void recv_scan(ScanResult& _return);
  void batch(BatchResult& _return, const BatchRequest& request);
  void send_batch(const BatchRequest& request);
  void recv_batch(BatchResult& _return);
};

class TableServiceProcessor : public  ::BaseServiceProcessor {
 protected:
  boost::shared_ptr<TableServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TableServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_increment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_scan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TableServiceProcessor(boost::shared_ptr<TableServiceIf> iface) :
     ::BaseServiceProcessor(iface),
    iface_(iface) {
    processMap_["get"] = &TableServiceProcessor::process_get;
    processMap_["put"] = &TableServiceProcessor::process_put;
    processMap_["increment"] = &TableServiceProcessor::process_increment;
    processMap_["remove"] = &TableServiceProcessor::process_remove;
    processMap_["scan"] = &TableServiceProcessor::process_scan;
    processMap_["batch"] = &TableServiceProcessor::process_batch;
  }

  virtual ~TableServiceProcessor() {}
};

class TableServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TableServiceProcessorFactory(const ::boost::shared_ptr< TableServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TableServiceIfFactory > handlerFactory_;
};

class TableServiceMultiface : virtual public TableServiceIf, public  ::BaseServiceMultiface {
 public:
  TableServiceMultiface(std::vector<boost::shared_ptr<TableServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<TableServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::BaseServiceMultiface::add(*iter);
    }
  }
  virtual ~TableServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TableServiceIf> > ifaces_;
  TableServiceMultiface() {}
  void add(boost::shared_ptr<TableServiceIf> iface) {
     ::BaseServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void get(GetResult& _return, const GetRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, request);
    }
    ifaces_[i]->get(_return, request);
    return;
  }

  void put(PutResult& _return, const PutRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(_return, request);
    }
    ifaces_[i]->put(_return, request);
    return;
  }

  void increment(IncrementResult& _return, const IncrementRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->increment(_return, request);
    }
    ifaces_[i]->increment(_return, request);
    return;
  }

  void remove(RemoveResult& _return, const RemoveRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(_return, request);
    }
    ifaces_[i]->remove(_return, request);
    return;
  }

  void scan(ScanResult& _return, const ScanRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->scan(_return, request);
    }
    ifaces_[i]->scan(_return, request);
    return;
  }

  void batch(BatchResult& _return, const BatchRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batch(_return, request);
    }
    ifaces_[i]->batch(_return, request);
    return;
  }

};



#endif
