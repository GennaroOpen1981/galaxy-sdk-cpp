#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RSFile_TYPES_H
#define RSFile_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct Compression {
  enum type {
    NONE = 0,
    SNAPPY = 1
  };
};

extern const std::map<int, const char*> _Compression_VALUES_TO_NAMES;

struct Checksum {
  enum type {
    NONE = 0,
    CRC32 = 1
  };
};

extern const std::map<int, const char*> _Checksum_VALUES_TO_NAMES;

class RSFileHeader;

class Record;

typedef struct _RSFileHeader__isset {
  _RSFileHeader__isset() : magic(false), version(false), compression(false), checksum(false), count(true), metadata(false) {}
  bool magic;
  bool version;
  bool compression;
  bool checksum;
  bool count;
  bool metadata;
} _RSFileHeader__isset;

class RSFileHeader {
 public:

  static const char* ascii_fingerprint; // = "7864CDFCC618C95F19082A02B254B4E6";
  static const uint8_t binary_fingerprint[16]; // = {0x78,0x64,0xCD,0xFC,0xC6,0x18,0xC9,0x5F,0x19,0x08,0x2A,0x02,0xB2,0x54,0xB4,0xE6};

  RSFileHeader(const RSFileHeader&);
  RSFileHeader& operator=(const RSFileHeader&);
  RSFileHeader() : magic(), version(0), compression((Compression::type)0), checksum((Checksum::type)0), count(-1LL), metadata() {
  }

  virtual ~RSFileHeader() throw();
  std::string magic;
  int32_t version;
  Compression::type compression;
  Checksum::type checksum;
  int64_t count;
  std::string metadata;

  _RSFileHeader__isset __isset;

  void __set_magic(const std::string& val);

  void __set_version(const int32_t val);

  void __set_compression(const Compression::type val);

  void __set_checksum(const Checksum::type val);

  void __set_count(const int64_t val);

  void __set_metadata(const std::string& val);

  bool operator == (const RSFileHeader & rhs) const
  {
    if (__isset.magic != rhs.__isset.magic)
      return false;
    else if (__isset.magic && !(magic == rhs.magic))
      return false;
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.compression != rhs.__isset.compression)
      return false;
    else if (__isset.compression && !(compression == rhs.compression))
      return false;
    if (__isset.checksum != rhs.__isset.checksum)
      return false;
    else if (__isset.checksum && !(checksum == rhs.checksum))
      return false;
    if (__isset.count != rhs.__isset.count)
      return false;
    else if (__isset.count && !(count == rhs.count))
      return false;
    if (__isset.metadata != rhs.__isset.metadata)
      return false;
    else if (__isset.metadata && !(metadata == rhs.metadata))
      return false;
    return true;
  }
  bool operator != (const RSFileHeader &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RSFileHeader & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RSFileHeader &a, RSFileHeader &b);

typedef struct _Record__isset {
  _Record__isset() : data(false), checksum(false), eof(true) {}
  bool data;
  bool checksum;
  bool eof;
} _Record__isset;

class Record {
 public:

  static const char* ascii_fingerprint; // = "F9F753F2C64C625D0CA44DE5CC4AC024";
  static const uint8_t binary_fingerprint[16]; // = {0xF9,0xF7,0x53,0xF2,0xC6,0x4C,0x62,0x5D,0x0C,0xA4,0x4D,0xE5,0xCC,0x4A,0xC0,0x24};

  Record(const Record&);
  Record& operator=(const Record&);
  Record() : data(), checksum(0), eof(false) {
  }

  virtual ~Record() throw();
  std::string data;
  int32_t checksum;
  bool eof;

  _Record__isset __isset;

  void __set_data(const std::string& val);

  void __set_checksum(const int32_t val);

  void __set_eof(const bool val);

  bool operator == (const Record & rhs) const
  {
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    if (__isset.checksum != rhs.__isset.checksum)
      return false;
    else if (__isset.checksum && !(checksum == rhs.checksum))
      return false;
    if (__isset.eof != rhs.__isset.eof)
      return false;
    else if (__isset.eof && !(eof == rhs.eof))
      return false;
    return true;
  }
  bool operator != (const Record &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Record & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Record &a, Record &b);



#endif
