#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BaseService_H
#define BaseService_H

#include <thrift/TDispatchProcessor.h>
#include "Common_types.h"



class BaseServiceIf {
 public:
  virtual ~BaseServiceIf() {}
  virtual void getServerVersion(Version& _return) = 0;
  virtual void validateClientVersion(const Version& clientVersion) = 0;
  virtual int64_t getServerTime() = 0;
};

class BaseServiceIfFactory {
 public:
  typedef BaseServiceIf Handler;

  virtual ~BaseServiceIfFactory() {}

  virtual BaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BaseServiceIf* /* handler */) = 0;
};

class BaseServiceIfSingletonFactory : virtual public BaseServiceIfFactory {
 public:
  BaseServiceIfSingletonFactory(const boost::shared_ptr<BaseServiceIf>& iface) : iface_(iface) {}
  virtual ~BaseServiceIfSingletonFactory() {}

  virtual BaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<BaseServiceIf> iface_;
};

class BaseServiceNull : virtual public BaseServiceIf {
 public:
  virtual ~BaseServiceNull() {}
  void getServerVersion(Version& /* _return */) {
    return;
  }
  void validateClientVersion(const Version& /* clientVersion */) {
    return;
  }
  int64_t getServerTime() {
    int64_t _return = 0;
    return _return;
  }
};


class BaseService_getServerVersion_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  BaseService_getServerVersion_args(const BaseService_getServerVersion_args&);
  BaseService_getServerVersion_args& operator=(const BaseService_getServerVersion_args&);
  BaseService_getServerVersion_args() {
  }

  virtual ~BaseService_getServerVersion_args() throw();

  bool operator == (const BaseService_getServerVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BaseService_getServerVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseService_getServerVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseService_getServerVersion_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~BaseService_getServerVersion_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseService_getServerVersion_result__isset {
  _BaseService_getServerVersion_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _BaseService_getServerVersion_result__isset;

class BaseService_getServerVersion_result {
 public:

  static const char* ascii_fingerprint; // = "9C359D111072204E59BDD03B49768A27";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x35,0x9D,0x11,0x10,0x72,0x20,0x4E,0x59,0xBD,0xD0,0x3B,0x49,0x76,0x8A,0x27};

  BaseService_getServerVersion_result(const BaseService_getServerVersion_result&);
  BaseService_getServerVersion_result& operator=(const BaseService_getServerVersion_result&);
  BaseService_getServerVersion_result() {
  }

  virtual ~BaseService_getServerVersion_result() throw();
  Version success;
   ::ServiceException se;

  _BaseService_getServerVersion_result__isset __isset;

  void __set_success(const Version& val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const BaseService_getServerVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BaseService_getServerVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseService_getServerVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseService_getServerVersion_presult__isset {
  _BaseService_getServerVersion_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _BaseService_getServerVersion_presult__isset;

class BaseService_getServerVersion_presult {
 public:

  static const char* ascii_fingerprint; // = "9C359D111072204E59BDD03B49768A27";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x35,0x9D,0x11,0x10,0x72,0x20,0x4E,0x59,0xBD,0xD0,0x3B,0x49,0x76,0x8A,0x27};


  virtual ~BaseService_getServerVersion_presult() throw();
  Version* success;
   ::ServiceException se;

  _BaseService_getServerVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaseService_validateClientVersion_args__isset {
  _BaseService_validateClientVersion_args__isset() : clientVersion(false) {}
  bool clientVersion;
} _BaseService_validateClientVersion_args__isset;

class BaseService_validateClientVersion_args {
 public:

  static const char* ascii_fingerprint; // = "FB38DE4FB191F13EA5062ACD0152E85D";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x38,0xDE,0x4F,0xB1,0x91,0xF1,0x3E,0xA5,0x06,0x2A,0xCD,0x01,0x52,0xE8,0x5D};

  BaseService_validateClientVersion_args(const BaseService_validateClientVersion_args&);
  BaseService_validateClientVersion_args& operator=(const BaseService_validateClientVersion_args&);
  BaseService_validateClientVersion_args() {
  }

  virtual ~BaseService_validateClientVersion_args() throw();
  Version clientVersion;

  _BaseService_validateClientVersion_args__isset __isset;

  void __set_clientVersion(const Version& val);

  bool operator == (const BaseService_validateClientVersion_args & rhs) const
  {
    if (!(clientVersion == rhs.clientVersion))
      return false;
    return true;
  }
  bool operator != (const BaseService_validateClientVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseService_validateClientVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseService_validateClientVersion_pargs {
 public:

  static const char* ascii_fingerprint; // = "FB38DE4FB191F13EA5062ACD0152E85D";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0x38,0xDE,0x4F,0xB1,0x91,0xF1,0x3E,0xA5,0x06,0x2A,0xCD,0x01,0x52,0xE8,0x5D};


  virtual ~BaseService_validateClientVersion_pargs() throw();
  const Version* clientVersion;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseService_validateClientVersion_result__isset {
  _BaseService_validateClientVersion_result__isset() : se(false) {}
  bool se;
} _BaseService_validateClientVersion_result__isset;

class BaseService_validateClientVersion_result {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};

  BaseService_validateClientVersion_result(const BaseService_validateClientVersion_result&);
  BaseService_validateClientVersion_result& operator=(const BaseService_validateClientVersion_result&);
  BaseService_validateClientVersion_result() {
  }

  virtual ~BaseService_validateClientVersion_result() throw();
   ::ServiceException se;

  _BaseService_validateClientVersion_result__isset __isset;

  void __set_se(const  ::ServiceException& val);

  bool operator == (const BaseService_validateClientVersion_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BaseService_validateClientVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseService_validateClientVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseService_validateClientVersion_presult__isset {
  _BaseService_validateClientVersion_presult__isset() : se(false) {}
  bool se;
} _BaseService_validateClientVersion_presult__isset;

class BaseService_validateClientVersion_presult {
 public:

  static const char* ascii_fingerprint; // = "C2C37020C43CAF6CE5FDE8998438AA61";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xC3,0x70,0x20,0xC4,0x3C,0xAF,0x6C,0xE5,0xFD,0xE8,0x99,0x84,0x38,0xAA,0x61};


  virtual ~BaseService_validateClientVersion_presult() throw();
   ::ServiceException se;

  _BaseService_validateClientVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BaseService_getServerTime_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  BaseService_getServerTime_args(const BaseService_getServerTime_args&);
  BaseService_getServerTime_args& operator=(const BaseService_getServerTime_args&);
  BaseService_getServerTime_args() {
  }

  virtual ~BaseService_getServerTime_args() throw();

  bool operator == (const BaseService_getServerTime_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BaseService_getServerTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseService_getServerTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaseService_getServerTime_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~BaseService_getServerTime_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseService_getServerTime_result__isset {
  _BaseService_getServerTime_result__isset() : success(false) {}
  bool success;
} _BaseService_getServerTime_result__isset;

class BaseService_getServerTime_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  BaseService_getServerTime_result(const BaseService_getServerTime_result&);
  BaseService_getServerTime_result& operator=(const BaseService_getServerTime_result&);
  BaseService_getServerTime_result() : success(0) {
  }

  virtual ~BaseService_getServerTime_result() throw();
  int64_t success;

  _BaseService_getServerTime_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const BaseService_getServerTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaseService_getServerTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaseService_getServerTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaseService_getServerTime_presult__isset {
  _BaseService_getServerTime_presult__isset() : success(false) {}
  bool success;
} _BaseService_getServerTime_presult__isset;

class BaseService_getServerTime_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~BaseService_getServerTime_presult() throw();
  int64_t* success;

  _BaseService_getServerTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BaseServiceClient : virtual public BaseServiceIf {
 public:
  BaseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BaseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getServerVersion(Version& _return);
  void send_getServerVersion();
  void recv_getServerVersion(Version& _return);
  void validateClientVersion(const Version& clientVersion);
  void send_validateClientVersion(const Version& clientVersion);
  void recv_validateClientVersion();
  int64_t getServerTime();
  void send_getServerTime();
  int64_t recv_getServerTime();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BaseServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BaseServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BaseServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getServerVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_validateClientVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServerTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BaseServiceProcessor(boost::shared_ptr<BaseServiceIf> iface) :
    iface_(iface) {
    processMap_["getServerVersion"] = &BaseServiceProcessor::process_getServerVersion;
    processMap_["validateClientVersion"] = &BaseServiceProcessor::process_validateClientVersion;
    processMap_["getServerTime"] = &BaseServiceProcessor::process_getServerTime;
  }

  virtual ~BaseServiceProcessor() {}
};

class BaseServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BaseServiceProcessorFactory(const ::boost::shared_ptr< BaseServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BaseServiceIfFactory > handlerFactory_;
};

class BaseServiceMultiface : virtual public BaseServiceIf {
 public:
  BaseServiceMultiface(std::vector<boost::shared_ptr<BaseServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BaseServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BaseServiceIf> > ifaces_;
  BaseServiceMultiface() {}
  void add(boost::shared_ptr<BaseServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getServerVersion(Version& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServerVersion(_return);
    }
    ifaces_[i]->getServerVersion(_return);
    return;
  }

  void validateClientVersion(const Version& clientVersion) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validateClientVersion(clientVersion);
    }
    ifaces_[i]->validateClientVersion(clientVersion);
  }

  int64_t getServerTime() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServerTime();
    }
    return ifaces_[i]->getServerTime();
  }

};



#endif
