/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Common_types.h"

#include <algorithm>



int _kThriftProtocolValues[] = {
  ThriftProtocol::TCOMPACT,
  ThriftProtocol::TJSON,
  ThriftProtocol::TBINARY
};
const char* _kThriftProtocolNames[] = {
  "TCOMPACT",
  "TJSON",
  "TBINARY"
};
const std::map<int, const char*> _ThriftProtocol_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kThriftProtocolValues, _kThriftProtocolNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Version::~Version() throw() {
}


void Version::__set_major(const int32_t val) {
  this->major = val;
__isset.major = true;
}

void Version::__set_minor(const int32_t val) {
  this->minor = val;
__isset.minor = true;
}

void Version::__set_patch(const std::string& val) {
  this->patch = val;
__isset.patch = true;
}

void Version::__set_comments(const std::string& val) {
  this->comments = val;
__isset.comments = true;
}

const char* Version::ascii_fingerprint = "87B5B0F746D0EA717BE22BD97F02D9EA";
const uint8_t Version::binary_fingerprint[16] = {0x87,0xB5,0xB0,0xF7,0x46,0xD0,0xEA,0x71,0x7B,0xE2,0x2B,0xD9,0x7F,0x02,0xD9,0xEA};

uint32_t Version::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->major);
          this->__isset.major = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minor);
          this->__isset.minor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->patch);
          this->__isset.patch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comments);
          this->__isset.comments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Version::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Version");

  if (this->__isset.major) {
    xfer += oprot->writeFieldBegin("major", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->major);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minor) {
    xfer += oprot->writeFieldBegin("minor", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->minor);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.patch) {
    xfer += oprot->writeFieldBegin("patch", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->patch);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.comments) {
    xfer += oprot->writeFieldBegin("comments", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->comments);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Version &a, Version &b) {
  using ::std::swap;
  swap(a.major, b.major);
  swap(a.minor, b.minor);
  swap(a.patch, b.patch);
  swap(a.comments, b.comments);
  swap(a.__isset, b.__isset);
}

Version::Version(const Version& other0) {
  major = other0.major;
  minor = other0.minor;
  patch = other0.patch;
  comments = other0.comments;
  __isset = other0.__isset;
}
Version& Version::operator=(const Version& other1) {
  major = other1.major;
  minor = other1.minor;
  patch = other1.patch;
  comments = other1.comments;
  __isset = other1.__isset;
  return *this;
}

