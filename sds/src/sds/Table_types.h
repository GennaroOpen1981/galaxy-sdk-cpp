#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Table_TYPES_H
#define Table_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Errors_types.h"
#include "Common_types.h"
#include "Authentication_types.h"




struct DataType {
  enum type {
    BOOL = 1,
    INT8 = 2,
    INT16 = 3,
    INT32 = 4,
    INT64 = 5,
    FLOAT = 6,
    DOUBLE = 7,
    STRING = 8,
    BINARY = 9,
    RAWBINARY = 10,
    BOOL_SET = 100,
    INT8_SET = 101,
    INT16_SET = 102,
    INT32_SET = 103,
    INT64_SET = 104,
    FLOAT_SET = 105,
    DOUBLE_SET = 106,
    STRING_SET = 107,
    BINARY_SET = 108
  };
};

extern const std::map<int, const char*> _DataType_VALUES_TO_NAMES;

struct OperatorType {
  enum type {
    EQUAL = 1,
    NOT_EQUAL = 2,
    GREATER = 3,
    GREATER_OR_EQUAL = 4,
    LESS = 5,
    LESS_OR_EQUAL = 6
  };
};

extern const std::map<int, const char*> _OperatorType_VALUES_TO_NAMES;

struct SecondaryIndexConsistencyMode {
  enum type {
    LAZY = 0,
    EAGER = 1,
    IMMUTABLE = 2
  };
};

extern const std::map<int, const char*> _SecondaryIndexConsistencyMode_VALUES_TO_NAMES;

struct CannedAcl {
  enum type {
    APP_SECRET_READ = 1,
    APP_SECRET_WRITE = 2,
    APP_USER_ENTITY_GROUP_READ = 3,
    APP_USER_ENTITY_GROUP_WRITE = 4,
    APP_USER_READ = 5,
    APP_USER_WRITE = 6,
    PUBLIC_READ = 7,
    PUBLIC_WRITE = 8
  };
};

extern const std::map<int, const char*> _CannedAcl_VALUES_TO_NAMES;

struct TableState {
  enum type {
    CREATING = 1,
    ENABLING = 2,
    ENABLED = 3,
    DISABLING = 4,
    DISABLED = 5,
    DELETING = 6,
    DELETED = 7,
    LAZY_DELETE = 8
  };
};

extern const std::map<int, const char*> _TableState_VALUES_TO_NAMES;

struct ScanOp {
  enum type {
    COUNT = 0,
    DELETE = 1,
    UPDATE = 2
  };
};

extern const std::map<int, const char*> _ScanOp_VALUES_TO_NAMES;

struct BatchOp {
  enum type {
    GET = 1,
    PUT = 2,
    INCREMENT = 3,
    REMOVE = 4
  };
};

extern const std::map<int, const char*> _BatchOp_VALUES_TO_NAMES;

typedef std::vector<class KeySpec>  IndexSpec;

typedef std::vector<std::string>  Attributes;

typedef std::map<std::string, std::vector<CannedAcl::type> >  AclConf;

typedef std::map<std::string, class Datum>  Dictionary;

class Value;

class Datum;

class ProvisionThroughput;

class TableQuota;

class KeySpec;

class LocalSecondaryIndexSpec;

class EntityGroupSpec;

class TableSchema;

class TableMetadata;

class TableSpec;

class TableStatus;

class TableInfo;

class SimpleCondition;

class TableSplit;

class GetRequest;

class GetResult;

class PutRequest;

class PutResult;

class IncrementRequest;

class IncrementResult;

class RemoveRequest;

class RemoveResult;

class Request;

class ScanAction;

class ScanRequest;

class ScanResult;

class BatchRequestItem;

class Result;

class BatchResultItem;

class BatchRequest;

class BatchResult;

typedef struct _Value__isset {
  _Value__isset() : boolValue(false), int8Value(false), int16Value(false), int32Value(false), int64Value(false), doubleValue(false), stringValue(false), binaryValue(false), boolSetValue(false), int8SetValue(false), int16SetValue(false), int32SetValue(false), int64SetValue(false), doubleSetValue(false), stringSetValue(false), binarySetValue(false), nullValue(false) {}
  bool boolValue;
  bool int8Value;
  bool int16Value;
  bool int32Value;
  bool int64Value;
  bool doubleValue;
  bool stringValue;
  bool binaryValue;
  bool boolSetValue;
  bool int8SetValue;
  bool int16SetValue;
  bool int32SetValue;
  bool int64SetValue;
  bool doubleSetValue;
  bool stringSetValue;
  bool binarySetValue;
  bool nullValue;
} _Value__isset;

class Value {
 public:

  static const char* ascii_fingerprint; // = "602D431CB10D6848188DE33534AE60B3";
  static const uint8_t binary_fingerprint[16]; // = {0x60,0x2D,0x43,0x1C,0xB1,0x0D,0x68,0x48,0x18,0x8D,0xE3,0x35,0x34,0xAE,0x60,0xB3};

  Value(const Value&);
  Value& operator=(const Value&);
  Value() : boolValue(0), int8Value(0), int16Value(0), int32Value(0), int64Value(0), doubleValue(0), stringValue(), binaryValue(), nullValue(0) {
  }

  virtual ~Value() throw();
  bool boolValue;
  int8_t int8Value;
  int16_t int16Value;
  int32_t int32Value;
  int64_t int64Value;
  double doubleValue;
  std::string stringValue;
  std::string binaryValue;
  std::vector<bool>  boolSetValue;
  std::vector<int8_t>  int8SetValue;
  std::vector<int16_t>  int16SetValue;
  std::vector<int32_t>  int32SetValue;
  std::vector<int64_t>  int64SetValue;
  std::vector<double>  doubleSetValue;
  std::vector<std::string>  stringSetValue;
  std::vector<std::string>  binarySetValue;
  bool nullValue;

  _Value__isset __isset;

  void __set_boolValue(const bool val);

  void __set_int8Value(const int8_t val);

  void __set_int16Value(const int16_t val);

  void __set_int32Value(const int32_t val);

  void __set_int64Value(const int64_t val);

  void __set_doubleValue(const double val);

  void __set_stringValue(const std::string& val);

  void __set_binaryValue(const std::string& val);

  void __set_boolSetValue(const std::vector<bool> & val);

  void __set_int8SetValue(const std::vector<int8_t> & val);

  void __set_int16SetValue(const std::vector<int16_t> & val);

  void __set_int32SetValue(const std::vector<int32_t> & val);

  void __set_int64SetValue(const std::vector<int64_t> & val);

  void __set_doubleSetValue(const std::vector<double> & val);

  void __set_stringSetValue(const std::vector<std::string> & val);

  void __set_binarySetValue(const std::vector<std::string> & val);

  void __set_nullValue(const bool val);

  bool operator == (const Value & rhs) const
  {
    if (__isset.boolValue != rhs.__isset.boolValue)
      return false;
    else if (__isset.boolValue && !(boolValue == rhs.boolValue))
      return false;
    if (__isset.int8Value != rhs.__isset.int8Value)
      return false;
    else if (__isset.int8Value && !(int8Value == rhs.int8Value))
      return false;
    if (__isset.int16Value != rhs.__isset.int16Value)
      return false;
    else if (__isset.int16Value && !(int16Value == rhs.int16Value))
      return false;
    if (__isset.int32Value != rhs.__isset.int32Value)
      return false;
    else if (__isset.int32Value && !(int32Value == rhs.int32Value))
      return false;
    if (__isset.int64Value != rhs.__isset.int64Value)
      return false;
    else if (__isset.int64Value && !(int64Value == rhs.int64Value))
      return false;
    if (__isset.doubleValue != rhs.__isset.doubleValue)
      return false;
    else if (__isset.doubleValue && !(doubleValue == rhs.doubleValue))
      return false;
    if (__isset.stringValue != rhs.__isset.stringValue)
      return false;
    else if (__isset.stringValue && !(stringValue == rhs.stringValue))
      return false;
    if (__isset.binaryValue != rhs.__isset.binaryValue)
      return false;
    else if (__isset.binaryValue && !(binaryValue == rhs.binaryValue))
      return false;
    if (__isset.boolSetValue != rhs.__isset.boolSetValue)
      return false;
    else if (__isset.boolSetValue && !(boolSetValue == rhs.boolSetValue))
      return false;
    if (__isset.int8SetValue != rhs.__isset.int8SetValue)
      return false;
    else if (__isset.int8SetValue && !(int8SetValue == rhs.int8SetValue))
      return false;
    if (__isset.int16SetValue != rhs.__isset.int16SetValue)
      return false;
    else if (__isset.int16SetValue && !(int16SetValue == rhs.int16SetValue))
      return false;
    if (__isset.int32SetValue != rhs.__isset.int32SetValue)
      return false;
    else if (__isset.int32SetValue && !(int32SetValue == rhs.int32SetValue))
      return false;
    if (__isset.int64SetValue != rhs.__isset.int64SetValue)
      return false;
    else if (__isset.int64SetValue && !(int64SetValue == rhs.int64SetValue))
      return false;
    if (__isset.doubleSetValue != rhs.__isset.doubleSetValue)
      return false;
    else if (__isset.doubleSetValue && !(doubleSetValue == rhs.doubleSetValue))
      return false;
    if (__isset.stringSetValue != rhs.__isset.stringSetValue)
      return false;
    else if (__isset.stringSetValue && !(stringSetValue == rhs.stringSetValue))
      return false;
    if (__isset.binarySetValue != rhs.__isset.binarySetValue)
      return false;
    else if (__isset.binarySetValue && !(binarySetValue == rhs.binarySetValue))
      return false;
    if (__isset.nullValue != rhs.__isset.nullValue)
      return false;
    else if (__isset.nullValue && !(nullValue == rhs.nullValue))
      return false;
    return true;
  }
  bool operator != (const Value &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Value & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Value &a, Value &b);

typedef struct _Datum__isset {
  _Datum__isset() : type(false), value(false) {}
  bool type;
  bool value;
} _Datum__isset;

class Datum {
 public:

  static const char* ascii_fingerprint; // = "93401A2F0AB037EB1EFF0DC3A854F7E1";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0x40,0x1A,0x2F,0x0A,0xB0,0x37,0xEB,0x1E,0xFF,0x0D,0xC3,0xA8,0x54,0xF7,0xE1};

  Datum(const Datum&);
  Datum& operator=(const Datum&);
  Datum() : type((DataType::type)0) {
  }

  virtual ~Datum() throw();
  DataType::type type;
  Value value;

  _Datum__isset __isset;

  void __set_type(const DataType::type val);

  void __set_value(const Value& val);

  bool operator == (const Datum & rhs) const
  {
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Datum &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Datum & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Datum &a, Datum &b);

typedef struct _ProvisionThroughput__isset {
  _ProvisionThroughput__isset() : readCapacity(false), writeCapacity(false) {}
  bool readCapacity;
  bool writeCapacity;
} _ProvisionThroughput__isset;

class ProvisionThroughput {
 public:

  static const char* ascii_fingerprint; // = "0354D07C94CB8542872CA1277008860A";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0x54,0xD0,0x7C,0x94,0xCB,0x85,0x42,0x87,0x2C,0xA1,0x27,0x70,0x08,0x86,0x0A};

  ProvisionThroughput(const ProvisionThroughput&);
  ProvisionThroughput& operator=(const ProvisionThroughput&);
  ProvisionThroughput() : readCapacity(0), writeCapacity(0) {
  }

  virtual ~ProvisionThroughput() throw();
  int64_t readCapacity;
  int64_t writeCapacity;

  _ProvisionThroughput__isset __isset;

  void __set_readCapacity(const int64_t val);

  void __set_writeCapacity(const int64_t val);

  bool operator == (const ProvisionThroughput & rhs) const
  {
    if (__isset.readCapacity != rhs.__isset.readCapacity)
      return false;
    else if (__isset.readCapacity && !(readCapacity == rhs.readCapacity))
      return false;
    if (__isset.writeCapacity != rhs.__isset.writeCapacity)
      return false;
    else if (__isset.writeCapacity && !(writeCapacity == rhs.writeCapacity))
      return false;
    return true;
  }
  bool operator != (const ProvisionThroughput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProvisionThroughput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ProvisionThroughput &a, ProvisionThroughput &b);

typedef struct _TableQuota__isset {
  _TableQuota__isset() : size(false) {}
  bool size;
} _TableQuota__isset;

class TableQuota {
 public:

  static const char* ascii_fingerprint; // = "148F3AAAC1D9859963D5E800D187BF26";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0x8F,0x3A,0xAA,0xC1,0xD9,0x85,0x99,0x63,0xD5,0xE8,0x00,0xD1,0x87,0xBF,0x26};

  TableQuota(const TableQuota&);
  TableQuota& operator=(const TableQuota&);
  TableQuota() : size(0) {
  }

  virtual ~TableQuota() throw();
  int64_t size;

  _TableQuota__isset __isset;

  void __set_size(const int64_t val);

  bool operator == (const TableQuota & rhs) const
  {
    if (__isset.size != rhs.__isset.size)
      return false;
    else if (__isset.size && !(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const TableQuota &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableQuota & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TableQuota &a, TableQuota &b);

typedef struct _KeySpec__isset {
  _KeySpec__isset() : attribute(false), asc(true) {}
  bool attribute;
  bool asc;
} _KeySpec__isset;

class KeySpec {
 public:

  static const char* ascii_fingerprint; // = "6200BB33D161C25E4ABCC4E5B0FB2883";
  static const uint8_t binary_fingerprint[16]; // = {0x62,0x00,0xBB,0x33,0xD1,0x61,0xC2,0x5E,0x4A,0xBC,0xC4,0xE5,0xB0,0xFB,0x28,0x83};

  KeySpec(const KeySpec&);
  KeySpec& operator=(const KeySpec&);
  KeySpec() : attribute(), asc(true) {
  }

  virtual ~KeySpec() throw();
  std::string attribute;
  bool asc;

  _KeySpec__isset __isset;

  void __set_attribute(const std::string& val);

  void __set_asc(const bool val);

  bool operator == (const KeySpec & rhs) const
  {
    if (__isset.attribute != rhs.__isset.attribute)
      return false;
    else if (__isset.attribute && !(attribute == rhs.attribute))
      return false;
    if (__isset.asc != rhs.__isset.asc)
      return false;
    else if (__isset.asc && !(asc == rhs.asc))
      return false;
    return true;
  }
  bool operator != (const KeySpec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeySpec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(KeySpec &a, KeySpec &b);

typedef struct _LocalSecondaryIndexSpec__isset {
  _LocalSecondaryIndexSpec__isset() : indexSchema(false), projections(false), consistencyMode(true), unique(true) {}
  bool indexSchema;
  bool projections;
  bool consistencyMode;
  bool unique;
} _LocalSecondaryIndexSpec__isset;

class LocalSecondaryIndexSpec {
 public:

  static const char* ascii_fingerprint; // = "F84E985EF15E0C468BFD5B5F3B52825A";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0x4E,0x98,0x5E,0xF1,0x5E,0x0C,0x46,0x8B,0xFD,0x5B,0x5F,0x3B,0x52,0x82,0x5A};

  LocalSecondaryIndexSpec(const LocalSecondaryIndexSpec&);
  LocalSecondaryIndexSpec& operator=(const LocalSecondaryIndexSpec&);
  LocalSecondaryIndexSpec() : consistencyMode((SecondaryIndexConsistencyMode::type)0), unique(false) {
    consistencyMode = (SecondaryIndexConsistencyMode::type)0;

  }

  virtual ~LocalSecondaryIndexSpec() throw();
  IndexSpec indexSchema;
  Attributes projections;
  SecondaryIndexConsistencyMode::type consistencyMode;
  bool unique;

  _LocalSecondaryIndexSpec__isset __isset;

  void __set_indexSchema(const IndexSpec& val);

  void __set_projections(const Attributes& val);

  void __set_consistencyMode(const SecondaryIndexConsistencyMode::type val);

  void __set_unique(const bool val);

  bool operator == (const LocalSecondaryIndexSpec & rhs) const
  {
    if (__isset.indexSchema != rhs.__isset.indexSchema)
      return false;
    else if (__isset.indexSchema && !(indexSchema == rhs.indexSchema))
      return false;
    if (__isset.projections != rhs.__isset.projections)
      return false;
    else if (__isset.projections && !(projections == rhs.projections))
      return false;
    if (__isset.consistencyMode != rhs.__isset.consistencyMode)
      return false;
    else if (__isset.consistencyMode && !(consistencyMode == rhs.consistencyMode))
      return false;
    if (__isset.unique != rhs.__isset.unique)
      return false;
    else if (__isset.unique && !(unique == rhs.unique))
      return false;
    return true;
  }
  bool operator != (const LocalSecondaryIndexSpec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocalSecondaryIndexSpec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LocalSecondaryIndexSpec &a, LocalSecondaryIndexSpec &b);

typedef struct _EntityGroupSpec__isset {
  _EntityGroupSpec__isset() : attributes(false), enableHash(true) {}
  bool attributes;
  bool enableHash;
} _EntityGroupSpec__isset;

class EntityGroupSpec {
 public:

  static const char* ascii_fingerprint; // = "74621F37CBB4AD4A094925B02F34024C";
  static const uint8_t binary_fingerprint[16]; // = {0x74,0x62,0x1F,0x37,0xCB,0xB4,0xAD,0x4A,0x09,0x49,0x25,0xB0,0x2F,0x34,0x02,0x4C};

  EntityGroupSpec(const EntityGroupSpec&);
  EntityGroupSpec& operator=(const EntityGroupSpec&);
  EntityGroupSpec() : enableHash(true) {
  }

  virtual ~EntityGroupSpec() throw();
  IndexSpec attributes;
  bool enableHash;

  _EntityGroupSpec__isset __isset;

  void __set_attributes(const IndexSpec& val);

  void __set_enableHash(const bool val);

  bool operator == (const EntityGroupSpec & rhs) const
  {
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.enableHash != rhs.__isset.enableHash)
      return false;
    else if (__isset.enableHash && !(enableHash == rhs.enableHash))
      return false;
    return true;
  }
  bool operator != (const EntityGroupSpec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityGroupSpec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EntityGroupSpec &a, EntityGroupSpec &b);

typedef struct _TableSchema__isset {
  _TableSchema__isset() : version(false), entityGroup(false), primaryIndex(false), secondaryIndexes(false), attributes(false), ttl(true), preSplits(true) {}
  bool version;
  bool entityGroup;
  bool primaryIndex;
  bool secondaryIndexes;
  bool attributes;
  bool ttl;
  bool preSplits;
} _TableSchema__isset;

class TableSchema {
 public:

  static const char* ascii_fingerprint; // = "4F1A001B73780ECAC8CA24260691B584";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x1A,0x00,0x1B,0x73,0x78,0x0E,0xCA,0xC8,0xCA,0x24,0x26,0x06,0x91,0xB5,0x84};

  TableSchema(const TableSchema&);
  TableSchema& operator=(const TableSchema&);
  TableSchema() : version(0), ttl(-1), preSplits(1) {
  }

  virtual ~TableSchema() throw();
  int32_t version;
  EntityGroupSpec entityGroup;
  IndexSpec primaryIndex;
  std::map<std::string, LocalSecondaryIndexSpec>  secondaryIndexes;
  std::map<std::string, DataType::type>  attributes;
  int32_t ttl;
  int32_t preSplits;

  _TableSchema__isset __isset;

  void __set_version(const int32_t val);

  void __set_entityGroup(const EntityGroupSpec& val);

  void __set_primaryIndex(const IndexSpec& val);

  void __set_secondaryIndexes(const std::map<std::string, LocalSecondaryIndexSpec> & val);

  void __set_attributes(const std::map<std::string, DataType::type> & val);

  void __set_ttl(const int32_t val);

  void __set_preSplits(const int32_t val);

  bool operator == (const TableSchema & rhs) const
  {
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.entityGroup != rhs.__isset.entityGroup)
      return false;
    else if (__isset.entityGroup && !(entityGroup == rhs.entityGroup))
      return false;
    if (!(primaryIndex == rhs.primaryIndex))
      return false;
    if (__isset.secondaryIndexes != rhs.__isset.secondaryIndexes)
      return false;
    else if (__isset.secondaryIndexes && !(secondaryIndexes == rhs.secondaryIndexes))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.ttl != rhs.__isset.ttl)
      return false;
    else if (__isset.ttl && !(ttl == rhs.ttl))
      return false;
    if (__isset.preSplits != rhs.__isset.preSplits)
      return false;
    else if (__isset.preSplits && !(preSplits == rhs.preSplits))
      return false;
    return true;
  }
  bool operator != (const TableSchema &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableSchema & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TableSchema &a, TableSchema &b);

typedef struct _TableMetadata__isset {
  _TableMetadata__isset() : tableId(false), developerId(false), appAcl(false), quota(false), throughput(false), description(false) {}
  bool tableId;
  bool developerId;
  bool appAcl;
  bool quota;
  bool throughput;
  bool description;
} _TableMetadata__isset;

class TableMetadata {
 public:

  static const char* ascii_fingerprint; // = "E05A6BE494AA124C64F559ACAF3FBD0E";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0x5A,0x6B,0xE4,0x94,0xAA,0x12,0x4C,0x64,0xF5,0x59,0xAC,0xAF,0x3F,0xBD,0x0E};

  TableMetadata(const TableMetadata&);
  TableMetadata& operator=(const TableMetadata&);
  TableMetadata() : tableId(), developerId(), description() {
  }

  virtual ~TableMetadata() throw();
  std::string tableId;
  std::string developerId;
  AclConf appAcl;
  TableQuota quota;
  ProvisionThroughput throughput;
  std::string description;

  _TableMetadata__isset __isset;

  void __set_tableId(const std::string& val);

  void __set_developerId(const std::string& val);

  void __set_appAcl(const AclConf& val);

  void __set_quota(const TableQuota& val);

  void __set_throughput(const ProvisionThroughput& val);

  void __set_description(const std::string& val);

  bool operator == (const TableMetadata & rhs) const
  {
    if (__isset.tableId != rhs.__isset.tableId)
      return false;
    else if (__isset.tableId && !(tableId == rhs.tableId))
      return false;
    if (__isset.developerId != rhs.__isset.developerId)
      return false;
    else if (__isset.developerId && !(developerId == rhs.developerId))
      return false;
    if (__isset.appAcl != rhs.__isset.appAcl)
      return false;
    else if (__isset.appAcl && !(appAcl == rhs.appAcl))
      return false;
    if (__isset.quota != rhs.__isset.quota)
      return false;
    else if (__isset.quota && !(quota == rhs.quota))
      return false;
    if (__isset.throughput != rhs.__isset.throughput)
      return false;
    else if (__isset.throughput && !(throughput == rhs.throughput))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const TableMetadata &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableMetadata & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TableMetadata &a, TableMetadata &b);

typedef struct _TableSpec__isset {
  _TableSpec__isset() : schema(false), metadata(false) {}
  bool schema;
  bool metadata;
} _TableSpec__isset;

class TableSpec {
 public:

  static const char* ascii_fingerprint; // = "A976E818ABBCFB17DC9B6540E13ECC6C";
  static const uint8_t binary_fingerprint[16]; // = {0xA9,0x76,0xE8,0x18,0xAB,0xBC,0xFB,0x17,0xDC,0x9B,0x65,0x40,0xE1,0x3E,0xCC,0x6C};

  TableSpec(const TableSpec&);
  TableSpec& operator=(const TableSpec&);
  TableSpec() {
  }

  virtual ~TableSpec() throw();
  TableSchema schema;
  TableMetadata metadata;

  _TableSpec__isset __isset;

  void __set_schema(const TableSchema& val);

  void __set_metadata(const TableMetadata& val);

  bool operator == (const TableSpec & rhs) const
  {
    if (__isset.schema != rhs.__isset.schema)
      return false;
    else if (__isset.schema && !(schema == rhs.schema))
      return false;
    if (__isset.metadata != rhs.__isset.metadata)
      return false;
    else if (__isset.metadata && !(metadata == rhs.metadata))
      return false;
    return true;
  }
  bool operator != (const TableSpec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableSpec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TableSpec &a, TableSpec &b);

typedef struct _TableStatus__isset {
  _TableStatus__isset() : state(false), createTime(false), alterTime(false), statTime(false), size(false), rowCount(false) {}
  bool state;
  bool createTime;
  bool alterTime;
  bool statTime;
  bool size;
  bool rowCount;
} _TableStatus__isset;

class TableStatus {
 public:

  static const char* ascii_fingerprint; // = "7BAC3B4B109DFCEED390D66BC860FDB4";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0xAC,0x3B,0x4B,0x10,0x9D,0xFC,0xEE,0xD3,0x90,0xD6,0x6B,0xC8,0x60,0xFD,0xB4};

  TableStatus(const TableStatus&);
  TableStatus& operator=(const TableStatus&);
  TableStatus() : state((TableState::type)0), createTime(0), alterTime(0), statTime(0), size(0), rowCount(0) {
  }

  virtual ~TableStatus() throw();
  TableState::type state;
  int64_t createTime;
  int64_t alterTime;
  int64_t statTime;
  int64_t size;
  int64_t rowCount;

  _TableStatus__isset __isset;

  void __set_state(const TableState::type val);

  void __set_createTime(const int64_t val);

  void __set_alterTime(const int64_t val);

  void __set_statTime(const int64_t val);

  void __set_size(const int64_t val);

  void __set_rowCount(const int64_t val);

  bool operator == (const TableStatus & rhs) const
  {
    if (__isset.state != rhs.__isset.state)
      return false;
    else if (__isset.state && !(state == rhs.state))
      return false;
    if (__isset.createTime != rhs.__isset.createTime)
      return false;
    else if (__isset.createTime && !(createTime == rhs.createTime))
      return false;
    if (__isset.alterTime != rhs.__isset.alterTime)
      return false;
    else if (__isset.alterTime && !(alterTime == rhs.alterTime))
      return false;
    if (__isset.statTime != rhs.__isset.statTime)
      return false;
    else if (__isset.statTime && !(statTime == rhs.statTime))
      return false;
    if (__isset.size != rhs.__isset.size)
      return false;
    else if (__isset.size && !(size == rhs.size))
      return false;
    if (__isset.rowCount != rhs.__isset.rowCount)
      return false;
    else if (__isset.rowCount && !(rowCount == rhs.rowCount))
      return false;
    return true;
  }
  bool operator != (const TableStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TableStatus &a, TableStatus &b);

typedef struct _TableInfo__isset {
  _TableInfo__isset() : name(false), spec(false), status(false) {}
  bool name;
  bool spec;
  bool status;
} _TableInfo__isset;

class TableInfo {
 public:

  static const char* ascii_fingerprint; // = "19F5E2B399CABB942C6ECF9AB96BBD02";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xF5,0xE2,0xB3,0x99,0xCA,0xBB,0x94,0x2C,0x6E,0xCF,0x9A,0xB9,0x6B,0xBD,0x02};

  TableInfo(const TableInfo&);
  TableInfo& operator=(const TableInfo&);
  TableInfo() : name() {
  }

  virtual ~TableInfo() throw();
  std::string name;
  TableSpec spec;
  TableStatus status;

  _TableInfo__isset __isset;

  void __set_name(const std::string& val);

  void __set_spec(const TableSpec& val);

  void __set_status(const TableStatus& val);

  bool operator == (const TableInfo & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.spec != rhs.__isset.spec)
      return false;
    else if (__isset.spec && !(spec == rhs.spec))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TableInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TableInfo &a, TableInfo &b);

typedef struct _SimpleCondition__isset {
  _SimpleCondition__isset() : op(false), field(false), value(false), rowExist(false) {}
  bool op;
  bool field;
  bool value;
  bool rowExist;
} _SimpleCondition__isset;

class SimpleCondition {
 public:

  static const char* ascii_fingerprint; // = "DB1640359204BBE4B1D030BA3CF374C9";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0x16,0x40,0x35,0x92,0x04,0xBB,0xE4,0xB1,0xD0,0x30,0xBA,0x3C,0xF3,0x74,0xC9};

  SimpleCondition(const SimpleCondition&);
  SimpleCondition& operator=(const SimpleCondition&);
  SimpleCondition() : op((OperatorType::type)0), field(), rowExist(0) {
  }

  virtual ~SimpleCondition() throw();
  OperatorType::type op;
  std::string field;
  Datum value;
  bool rowExist;

  _SimpleCondition__isset __isset;

  void __set_op(const OperatorType::type val);

  void __set_field(const std::string& val);

  void __set_value(const Datum& val);

  void __set_rowExist(const bool val);

  bool operator == (const SimpleCondition & rhs) const
  {
    if (__isset.op != rhs.__isset.op)
      return false;
    else if (__isset.op && !(op == rhs.op))
      return false;
    if (__isset.field != rhs.__isset.field)
      return false;
    else if (__isset.field && !(field == rhs.field))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    if (__isset.rowExist != rhs.__isset.rowExist)
      return false;
    else if (__isset.rowExist && !(rowExist == rhs.rowExist))
      return false;
    return true;
  }
  bool operator != (const SimpleCondition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleCondition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SimpleCondition &a, SimpleCondition &b);

typedef struct _TableSplit__isset {
  _TableSplit__isset() : startKey(false), stopKey(false) {}
  bool startKey;
  bool stopKey;
} _TableSplit__isset;

class TableSplit {
 public:

  static const char* ascii_fingerprint; // = "D6E0ADC36D2B2BD7E592DFC5ADDE8458";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0xE0,0xAD,0xC3,0x6D,0x2B,0x2B,0xD7,0xE5,0x92,0xDF,0xC5,0xAD,0xDE,0x84,0x58};

  TableSplit(const TableSplit&);
  TableSplit& operator=(const TableSplit&);
  TableSplit() {
  }

  virtual ~TableSplit() throw();
  Dictionary startKey;
  Dictionary stopKey;

  _TableSplit__isset __isset;

  void __set_startKey(const Dictionary& val);

  void __set_stopKey(const Dictionary& val);

  bool operator == (const TableSplit & rhs) const
  {
    if (__isset.startKey != rhs.__isset.startKey)
      return false;
    else if (__isset.startKey && !(startKey == rhs.startKey))
      return false;
    if (__isset.stopKey != rhs.__isset.stopKey)
      return false;
    else if (__isset.stopKey && !(stopKey == rhs.stopKey))
      return false;
    return true;
  }
  bool operator != (const TableSplit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TableSplit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TableSplit &a, TableSplit &b);

typedef struct _GetRequest__isset {
  _GetRequest__isset() : tableName(false), keys(false), attributes(false) {}
  bool tableName;
  bool keys;
  bool attributes;
} _GetRequest__isset;

class GetRequest {
 public:

  static const char* ascii_fingerprint; // = "328A108E9FF853E51039B16FB439FE5F";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x8A,0x10,0x8E,0x9F,0xF8,0x53,0xE5,0x10,0x39,0xB1,0x6F,0xB4,0x39,0xFE,0x5F};

  GetRequest(const GetRequest&);
  GetRequest& operator=(const GetRequest&);
  GetRequest() : tableName() {
  }

  virtual ~GetRequest() throw();
  std::string tableName;
  Dictionary keys;
  Attributes attributes;

  _GetRequest__isset __isset;

  void __set_tableName(const std::string& val);

  void __set_keys(const Dictionary& val);

  void __set_attributes(const Attributes& val);

  bool operator == (const GetRequest & rhs) const
  {
    if (__isset.tableName != rhs.__isset.tableName)
      return false;
    else if (__isset.tableName && !(tableName == rhs.tableName))
      return false;
    if (__isset.keys != rhs.__isset.keys)
      return false;
    else if (__isset.keys && !(keys == rhs.keys))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    return true;
  }
  bool operator != (const GetRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetRequest &a, GetRequest &b);

typedef struct _GetResult__isset {
  _GetResult__isset() : item(false) {}
  bool item;
} _GetResult__isset;

class GetResult {
 public:

  static const char* ascii_fingerprint; // = "57939DD8C71DC631F68668442988EB66";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0x93,0x9D,0xD8,0xC7,0x1D,0xC6,0x31,0xF6,0x86,0x68,0x44,0x29,0x88,0xEB,0x66};

  GetResult(const GetResult&);
  GetResult& operator=(const GetResult&);
  GetResult() {
  }

  virtual ~GetResult() throw();
  Dictionary item;

  _GetResult__isset __isset;

  void __set_item(const Dictionary& val);

  bool operator == (const GetResult & rhs) const
  {
    if (__isset.item != rhs.__isset.item)
      return false;
    else if (__isset.item && !(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const GetResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetResult &a, GetResult &b);

typedef struct _PutRequest__isset {
  _PutRequest__isset() : tableName(false), record(false), condition(false) {}
  bool tableName;
  bool record;
  bool condition;
} _PutRequest__isset;

class PutRequest {
 public:

  static const char* ascii_fingerprint; // = "664E7E70CA13F8AA4159D843CF5B774F";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0x4E,0x7E,0x70,0xCA,0x13,0xF8,0xAA,0x41,0x59,0xD8,0x43,0xCF,0x5B,0x77,0x4F};

  PutRequest(const PutRequest&);
  PutRequest& operator=(const PutRequest&);
  PutRequest() : tableName() {
  }

  virtual ~PutRequest() throw();
  std::string tableName;
  Dictionary record;
  SimpleCondition condition;

  _PutRequest__isset __isset;

  void __set_tableName(const std::string& val);

  void __set_record(const Dictionary& val);

  void __set_condition(const SimpleCondition& val);

  bool operator == (const PutRequest & rhs) const
  {
    if (__isset.tableName != rhs.__isset.tableName)
      return false;
    else if (__isset.tableName && !(tableName == rhs.tableName))
      return false;
    if (__isset.record != rhs.__isset.record)
      return false;
    else if (__isset.record && !(record == rhs.record))
      return false;
    if (__isset.condition != rhs.__isset.condition)
      return false;
    else if (__isset.condition && !(condition == rhs.condition))
      return false;
    return true;
  }
  bool operator != (const PutRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PutRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PutRequest &a, PutRequest &b);

typedef struct _PutResult__isset {
  _PutResult__isset() : success(false) {}
  bool success;
} _PutResult__isset;

class PutResult {
 public:

  static const char* ascii_fingerprint; // = "BF054652DEF86253C2BEE7D947F167DD";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0x05,0x46,0x52,0xDE,0xF8,0x62,0x53,0xC2,0xBE,0xE7,0xD9,0x47,0xF1,0x67,0xDD};

  PutResult(const PutResult&);
  PutResult& operator=(const PutResult&);
  PutResult() : success(0) {
  }

  virtual ~PutResult() throw();
  bool success;

  _PutResult__isset __isset;

  void __set_success(const bool val);

  bool operator == (const PutResult & rhs) const
  {
    if (__isset.success != rhs.__isset.success)
      return false;
    else if (__isset.success && !(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PutResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PutResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PutResult &a, PutResult &b);

typedef struct _IncrementRequest__isset {
  _IncrementRequest__isset() : tableName(false), keys(false), amounts(false) {}
  bool tableName;
  bool keys;
  bool amounts;
} _IncrementRequest__isset;

class IncrementRequest {
 public:

  static const char* ascii_fingerprint; // = "CA7973A34DED2C6AECE6EAE474A9AAE9";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x79,0x73,0xA3,0x4D,0xED,0x2C,0x6A,0xEC,0xE6,0xEA,0xE4,0x74,0xA9,0xAA,0xE9};

  IncrementRequest(const IncrementRequest&);
  IncrementRequest& operator=(const IncrementRequest&);
  IncrementRequest() : tableName() {
  }

  virtual ~IncrementRequest() throw();
  std::string tableName;
  Dictionary keys;
  Dictionary amounts;

  _IncrementRequest__isset __isset;

  void __set_tableName(const std::string& val);

  void __set_keys(const Dictionary& val);

  void __set_amounts(const Dictionary& val);

  bool operator == (const IncrementRequest & rhs) const
  {
    if (__isset.tableName != rhs.__isset.tableName)
      return false;
    else if (__isset.tableName && !(tableName == rhs.tableName))
      return false;
    if (__isset.keys != rhs.__isset.keys)
      return false;
    else if (__isset.keys && !(keys == rhs.keys))
      return false;
    if (__isset.amounts != rhs.__isset.amounts)
      return false;
    else if (__isset.amounts && !(amounts == rhs.amounts))
      return false;
    return true;
  }
  bool operator != (const IncrementRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IncrementRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IncrementRequest &a, IncrementRequest &b);

typedef struct _IncrementResult__isset {
  _IncrementResult__isset() : amounts(false) {}
  bool amounts;
} _IncrementResult__isset;

class IncrementResult {
 public:

  static const char* ascii_fingerprint; // = "57939DD8C71DC631F68668442988EB66";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0x93,0x9D,0xD8,0xC7,0x1D,0xC6,0x31,0xF6,0x86,0x68,0x44,0x29,0x88,0xEB,0x66};

  IncrementResult(const IncrementResult&);
  IncrementResult& operator=(const IncrementResult&);
  IncrementResult() {
  }

  virtual ~IncrementResult() throw();
  Dictionary amounts;

  _IncrementResult__isset __isset;

  void __set_amounts(const Dictionary& val);

  bool operator == (const IncrementResult & rhs) const
  {
    if (__isset.amounts != rhs.__isset.amounts)
      return false;
    else if (__isset.amounts && !(amounts == rhs.amounts))
      return false;
    return true;
  }
  bool operator != (const IncrementResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IncrementResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IncrementResult &a, IncrementResult &b);

typedef struct _RemoveRequest__isset {
  _RemoveRequest__isset() : tableName(false), keys(false), attributes(false), condition(false) {}
  bool tableName;
  bool keys;
  bool attributes;
  bool condition;
} _RemoveRequest__isset;

class RemoveRequest {
 public:

  static const char* ascii_fingerprint; // = "7957B4A8DB605BAD556049A8F5036424";
  static const uint8_t binary_fingerprint[16]; // = {0x79,0x57,0xB4,0xA8,0xDB,0x60,0x5B,0xAD,0x55,0x60,0x49,0xA8,0xF5,0x03,0x64,0x24};

  RemoveRequest(const RemoveRequest&);
  RemoveRequest& operator=(const RemoveRequest&);
  RemoveRequest() : tableName() {
  }

  virtual ~RemoveRequest() throw();
  std::string tableName;
  Dictionary keys;
  Attributes attributes;
  SimpleCondition condition;

  _RemoveRequest__isset __isset;

  void __set_tableName(const std::string& val);

  void __set_keys(const Dictionary& val);

  void __set_attributes(const Attributes& val);

  void __set_condition(const SimpleCondition& val);

  bool operator == (const RemoveRequest & rhs) const
  {
    if (__isset.tableName != rhs.__isset.tableName)
      return false;
    else if (__isset.tableName && !(tableName == rhs.tableName))
      return false;
    if (__isset.keys != rhs.__isset.keys)
      return false;
    else if (__isset.keys && !(keys == rhs.keys))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.condition != rhs.__isset.condition)
      return false;
    else if (__isset.condition && !(condition == rhs.condition))
      return false;
    return true;
  }
  bool operator != (const RemoveRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RemoveRequest &a, RemoveRequest &b);

typedef struct _RemoveResult__isset {
  _RemoveResult__isset() : success(false) {}
  bool success;
} _RemoveResult__isset;

class RemoveResult {
 public:

  static const char* ascii_fingerprint; // = "BF054652DEF86253C2BEE7D947F167DD";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0x05,0x46,0x52,0xDE,0xF8,0x62,0x53,0xC2,0xBE,0xE7,0xD9,0x47,0xF1,0x67,0xDD};

  RemoveResult(const RemoveResult&);
  RemoveResult& operator=(const RemoveResult&);
  RemoveResult() : success(0) {
  }

  virtual ~RemoveResult() throw();
  bool success;

  _RemoveResult__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RemoveResult & rhs) const
  {
    if (__isset.success != rhs.__isset.success)
      return false;
    else if (__isset.success && !(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoveResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RemoveResult &a, RemoveResult &b);

typedef struct _Request__isset {
  _Request__isset() : getRequest(false), putRequest(false), incrementRequest(false), removeRequest(false) {}
  bool getRequest;
  bool putRequest;
  bool incrementRequest;
  bool removeRequest;
} _Request__isset;

class Request {
 public:

  static const char* ascii_fingerprint; // = "E207943C32E37827B385BF0D06BA4654";
  static const uint8_t binary_fingerprint[16]; // = {0xE2,0x07,0x94,0x3C,0x32,0xE3,0x78,0x27,0xB3,0x85,0xBF,0x0D,0x06,0xBA,0x46,0x54};

  Request(const Request&);
  Request& operator=(const Request&);
  Request() {
  }

  virtual ~Request() throw();
  GetRequest getRequest;
  PutRequest putRequest;
  IncrementRequest incrementRequest;
  RemoveRequest removeRequest;

  _Request__isset __isset;

  void __set_getRequest(const GetRequest& val);

  void __set_putRequest(const PutRequest& val);

  void __set_incrementRequest(const IncrementRequest& val);

  void __set_removeRequest(const RemoveRequest& val);

  bool operator == (const Request & rhs) const
  {
    if (__isset.getRequest != rhs.__isset.getRequest)
      return false;
    else if (__isset.getRequest && !(getRequest == rhs.getRequest))
      return false;
    if (__isset.putRequest != rhs.__isset.putRequest)
      return false;
    else if (__isset.putRequest && !(putRequest == rhs.putRequest))
      return false;
    if (__isset.incrementRequest != rhs.__isset.incrementRequest)
      return false;
    else if (__isset.incrementRequest && !(incrementRequest == rhs.incrementRequest))
      return false;
    if (__isset.removeRequest != rhs.__isset.removeRequest)
      return false;
    else if (__isset.removeRequest && !(removeRequest == rhs.removeRequest))
      return false;
    return true;
  }
  bool operator != (const Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Request &a, Request &b);

typedef struct _ScanAction__isset {
  _ScanAction__isset() : action(false), request(false) {}
  bool action;
  bool request;
} _ScanAction__isset;

class ScanAction {
 public:

  static const char* ascii_fingerprint; // = "75FC2C50E22DB407E52BCDB14AB66D46";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0xFC,0x2C,0x50,0xE2,0x2D,0xB4,0x07,0xE5,0x2B,0xCD,0xB1,0x4A,0xB6,0x6D,0x46};

  ScanAction(const ScanAction&);
  ScanAction& operator=(const ScanAction&);
  ScanAction() : action((ScanOp::type)0) {
  }

  virtual ~ScanAction() throw();
  ScanOp::type action;
  Request request;

  _ScanAction__isset __isset;

  void __set_action(const ScanOp::type val);

  void __set_request(const Request& val);

  bool operator == (const ScanAction & rhs) const
  {
    if (__isset.action != rhs.__isset.action)
      return false;
    else if (__isset.action && !(action == rhs.action))
      return false;
    if (__isset.request != rhs.__isset.request)
      return false;
    else if (__isset.request && !(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ScanAction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScanAction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ScanAction &a, ScanAction &b);

typedef struct _ScanRequest__isset {
  _ScanRequest__isset() : tableName(false), indexName(false), startKey(false), stopKey(false), attributes(false), condition(false), limit(true), reverse(true), inGlobalOrder(true), cacheResult(true), lookAheadStep(true), action(false) {}
  bool tableName;
  bool indexName;
  bool startKey;
  bool stopKey;
  bool attributes;
  bool condition;
  bool limit;
  bool reverse;
  bool inGlobalOrder;
  bool cacheResult;
  bool lookAheadStep;
  bool action;
} _ScanRequest__isset;

class ScanRequest {
 public:

  static const char* ascii_fingerprint; // = "DA5255B91A6E155C147986D83C7BC932";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0x52,0x55,0xB9,0x1A,0x6E,0x15,0x5C,0x14,0x79,0x86,0xD8,0x3C,0x7B,0xC9,0x32};

  ScanRequest(const ScanRequest&);
  ScanRequest& operator=(const ScanRequest&);
  ScanRequest() : tableName(), indexName(), condition(), limit(10), reverse(false), inGlobalOrder(true), cacheResult(true), lookAheadStep(0) {
  }

  virtual ~ScanRequest() throw();
  std::string tableName;
  std::string indexName;
  Dictionary startKey;
  Dictionary stopKey;
  Attributes attributes;
  std::string condition;
  int32_t limit;
  bool reverse;
  bool inGlobalOrder;
  bool cacheResult;
  int32_t lookAheadStep;
  ScanAction action;

  _ScanRequest__isset __isset;

  void __set_tableName(const std::string& val);

  void __set_indexName(const std::string& val);

  void __set_startKey(const Dictionary& val);

  void __set_stopKey(const Dictionary& val);

  void __set_attributes(const Attributes& val);

  void __set_condition(const std::string& val);

  void __set_limit(const int32_t val);

  void __set_reverse(const bool val);

  void __set_inGlobalOrder(const bool val);

  void __set_cacheResult(const bool val);

  void __set_lookAheadStep(const int32_t val);

  void __set_action(const ScanAction& val);

  bool operator == (const ScanRequest & rhs) const
  {
    if (__isset.tableName != rhs.__isset.tableName)
      return false;
    else if (__isset.tableName && !(tableName == rhs.tableName))
      return false;
    if (__isset.indexName != rhs.__isset.indexName)
      return false;
    else if (__isset.indexName && !(indexName == rhs.indexName))
      return false;
    if (__isset.startKey != rhs.__isset.startKey)
      return false;
    else if (__isset.startKey && !(startKey == rhs.startKey))
      return false;
    if (__isset.stopKey != rhs.__isset.stopKey)
      return false;
    else if (__isset.stopKey && !(stopKey == rhs.stopKey))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.condition != rhs.__isset.condition)
      return false;
    else if (__isset.condition && !(condition == rhs.condition))
      return false;
    if (__isset.limit != rhs.__isset.limit)
      return false;
    else if (__isset.limit && !(limit == rhs.limit))
      return false;
    if (__isset.reverse != rhs.__isset.reverse)
      return false;
    else if (__isset.reverse && !(reverse == rhs.reverse))
      return false;
    if (__isset.inGlobalOrder != rhs.__isset.inGlobalOrder)
      return false;
    else if (__isset.inGlobalOrder && !(inGlobalOrder == rhs.inGlobalOrder))
      return false;
    if (__isset.cacheResult != rhs.__isset.cacheResult)
      return false;
    else if (__isset.cacheResult && !(cacheResult == rhs.cacheResult))
      return false;
    if (__isset.lookAheadStep != rhs.__isset.lookAheadStep)
      return false;
    else if (__isset.lookAheadStep && !(lookAheadStep == rhs.lookAheadStep))
      return false;
    if (__isset.action != rhs.__isset.action)
      return false;
    else if (__isset.action && !(action == rhs.action))
      return false;
    return true;
  }
  bool operator != (const ScanRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScanRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ScanRequest &a, ScanRequest &b);

typedef struct _ScanResult__isset {
  _ScanResult__isset() : nextStartKey(false), records(false), throttled(false) {}
  bool nextStartKey;
  bool records;
  bool throttled;
} _ScanResult__isset;

class ScanResult {
 public:

  static const char* ascii_fingerprint; // = "CD2194B6EE5BF5F42E45946124430534";
  static const uint8_t binary_fingerprint[16]; // = {0xCD,0x21,0x94,0xB6,0xEE,0x5B,0xF5,0xF4,0x2E,0x45,0x94,0x61,0x24,0x43,0x05,0x34};

  ScanResult(const ScanResult&);
  ScanResult& operator=(const ScanResult&);
  ScanResult() : throttled(0) {
  }

  virtual ~ScanResult() throw();
  Dictionary nextStartKey;
  std::vector<Dictionary>  records;
  bool throttled;

  _ScanResult__isset __isset;

  void __set_nextStartKey(const Dictionary& val);

  void __set_records(const std::vector<Dictionary> & val);

  void __set_throttled(const bool val);

  bool operator == (const ScanResult & rhs) const
  {
    if (__isset.nextStartKey != rhs.__isset.nextStartKey)
      return false;
    else if (__isset.nextStartKey && !(nextStartKey == rhs.nextStartKey))
      return false;
    if (__isset.records != rhs.__isset.records)
      return false;
    else if (__isset.records && !(records == rhs.records))
      return false;
    if (__isset.throttled != rhs.__isset.throttled)
      return false;
    else if (__isset.throttled && !(throttled == rhs.throttled))
      return false;
    return true;
  }
  bool operator != (const ScanResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScanResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ScanResult &a, ScanResult &b);

typedef struct _BatchRequestItem__isset {
  _BatchRequestItem__isset() : action(false), request(false) {}
  bool action;
  bool request;
} _BatchRequestItem__isset;

class BatchRequestItem {
 public:

  static const char* ascii_fingerprint; // = "75FC2C50E22DB407E52BCDB14AB66D46";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0xFC,0x2C,0x50,0xE2,0x2D,0xB4,0x07,0xE5,0x2B,0xCD,0xB1,0x4A,0xB6,0x6D,0x46};

  BatchRequestItem(const BatchRequestItem&);
  BatchRequestItem& operator=(const BatchRequestItem&);
  BatchRequestItem() : action((BatchOp::type)0) {
  }

  virtual ~BatchRequestItem() throw();
  BatchOp::type action;
  Request request;

  _BatchRequestItem__isset __isset;

  void __set_action(const BatchOp::type val);

  void __set_request(const Request& val);

  bool operator == (const BatchRequestItem & rhs) const
  {
    if (__isset.action != rhs.__isset.action)
      return false;
    else if (__isset.action && !(action == rhs.action))
      return false;
    if (__isset.request != rhs.__isset.request)
      return false;
    else if (__isset.request && !(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BatchRequestItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchRequestItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BatchRequestItem &a, BatchRequestItem &b);

typedef struct _Result__isset {
  _Result__isset() : getResult(false), putResult(false), incrementResult(false), removeResult(false) {}
  bool getResult;
  bool putResult;
  bool incrementResult;
  bool removeResult;
} _Result__isset;

class Result {
 public:

  static const char* ascii_fingerprint; // = "72343C47CF553176606BB0B28AD675A8";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x34,0x3C,0x47,0xCF,0x55,0x31,0x76,0x60,0x6B,0xB0,0xB2,0x8A,0xD6,0x75,0xA8};

  Result(const Result&);
  Result& operator=(const Result&);
  Result() {
  }

  virtual ~Result() throw();
  GetResult getResult;
  PutResult putResult;
  IncrementResult incrementResult;
  RemoveResult removeResult;

  _Result__isset __isset;

  void __set_getResult(const GetResult& val);

  void __set_putResult(const PutResult& val);

  void __set_incrementResult(const IncrementResult& val);

  void __set_removeResult(const RemoveResult& val);

  bool operator == (const Result & rhs) const
  {
    if (__isset.getResult != rhs.__isset.getResult)
      return false;
    else if (__isset.getResult && !(getResult == rhs.getResult))
      return false;
    if (__isset.putResult != rhs.__isset.putResult)
      return false;
    else if (__isset.putResult && !(putResult == rhs.putResult))
      return false;
    if (__isset.incrementResult != rhs.__isset.incrementResult)
      return false;
    else if (__isset.incrementResult && !(incrementResult == rhs.incrementResult))
      return false;
    if (__isset.removeResult != rhs.__isset.removeResult)
      return false;
    else if (__isset.removeResult && !(removeResult == rhs.removeResult))
      return false;
    return true;
  }
  bool operator != (const Result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Result &a, Result &b);

typedef struct _BatchResultItem__isset {
  _BatchResultItem__isset() : action(false), success(false), result(false), serviceException(false) {}
  bool action;
  bool success;
  bool result;
  bool serviceException;
} _BatchResultItem__isset;

class BatchResultItem {
 public:

  static const char* ascii_fingerprint; // = "024E7BC953BC9ABAF0B17A9DDDC7C2B8";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x4E,0x7B,0xC9,0x53,0xBC,0x9A,0xBA,0xF0,0xB1,0x7A,0x9D,0xDD,0xC7,0xC2,0xB8};

  BatchResultItem(const BatchResultItem&);
  BatchResultItem& operator=(const BatchResultItem&);
  BatchResultItem() : action((BatchOp::type)0), success(0) {
  }

  virtual ~BatchResultItem() throw();
  BatchOp::type action;
  bool success;
  Result result;
   ::ServiceException serviceException;

  _BatchResultItem__isset __isset;

  void __set_action(const BatchOp::type val);

  void __set_success(const bool val);

  void __set_result(const Result& val);

  void __set_serviceException(const  ::ServiceException& val);

  bool operator == (const BatchResultItem & rhs) const
  {
    if (__isset.action != rhs.__isset.action)
      return false;
    else if (__isset.action && !(action == rhs.action))
      return false;
    if (__isset.success != rhs.__isset.success)
      return false;
    else if (__isset.success && !(success == rhs.success))
      return false;
    if (__isset.result != rhs.__isset.result)
      return false;
    else if (__isset.result && !(result == rhs.result))
      return false;
    if (__isset.serviceException != rhs.__isset.serviceException)
      return false;
    else if (__isset.serviceException && !(serviceException == rhs.serviceException))
      return false;
    return true;
  }
  bool operator != (const BatchResultItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchResultItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BatchResultItem &a, BatchResultItem &b);

typedef struct _BatchRequest__isset {
  _BatchRequest__isset() : items(false) {}
  bool items;
} _BatchRequest__isset;

class BatchRequest {
 public:

  static const char* ascii_fingerprint; // = "07601CAE9203BB2EC4B577B6715471AF";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0x60,0x1C,0xAE,0x92,0x03,0xBB,0x2E,0xC4,0xB5,0x77,0xB6,0x71,0x54,0x71,0xAF};

  BatchRequest(const BatchRequest&);
  BatchRequest& operator=(const BatchRequest&);
  BatchRequest() {
  }

  virtual ~BatchRequest() throw();
  std::vector<BatchRequestItem>  items;

  _BatchRequest__isset __isset;

  void __set_items(const std::vector<BatchRequestItem> & val);

  bool operator == (const BatchRequest & rhs) const
  {
    if (__isset.items != rhs.__isset.items)
      return false;
    else if (__isset.items && !(items == rhs.items))
      return false;
    return true;
  }
  bool operator != (const BatchRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BatchRequest &a, BatchRequest &b);

typedef struct _BatchResult__isset {
  _BatchResult__isset() : items(false) {}
  bool items;
} _BatchResult__isset;

class BatchResult {
 public:

  static const char* ascii_fingerprint; // = "95606B2EDAAAC3AF39A724DAF47525ED";
  static const uint8_t binary_fingerprint[16]; // = {0x95,0x60,0x6B,0x2E,0xDA,0xAA,0xC3,0xAF,0x39,0xA7,0x24,0xDA,0xF4,0x75,0x25,0xED};

  BatchResult(const BatchResult&);
  BatchResult& operator=(const BatchResult&);
  BatchResult() {
  }

  virtual ~BatchResult() throw();
  std::vector<BatchResultItem>  items;

  _BatchResult__isset __isset;

  void __set_items(const std::vector<BatchResultItem> & val);

  bool operator == (const BatchResult & rhs) const
  {
    if (__isset.items != rhs.__isset.items)
      return false;
    else if (__isset.items && !(items == rhs.items))
      return false;
    return true;
  }
  bool operator != (const BatchResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BatchResult &a, BatchResult &b);



#endif
