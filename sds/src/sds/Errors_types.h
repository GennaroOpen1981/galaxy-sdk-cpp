#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Errors_TYPES_H
#define Errors_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct HttpStatusCode {
  enum type {
    BAD_REQUEST = 400,
    INVALID_AUTH = 401,
    CLOCK_TOO_SKEWED = 412,
    REQUEST_TOO_LARGE = 413,
    INTERNAL_ERROR = 500
  };
};

extern const std::map<int, const char*> _HttpStatusCode_VALUES_TO_NAMES;

struct ErrorCode {
  enum type {
    INTERNAL_ERROR = 1,
    SERVICE_UNAVAILABLE = 2,
    UNKNOWN = 3,
    END_OF_INTERNAL_ERROR = 20,
    ACCESS_DENIED = 21,
    VALIDATION_FAILED = 22,
    SIZE_EXCEED = 23,
    QUOTA_EXCEED = 24,
    THROUGHPUT_EXCEED = 25,
    RESOURCE_NOT_FOUND = 26,
    RESOURCE_ALREADY_EXISTS = 27,
    RESOURCE_UNAVAILABLE = 28,
    UNSUPPORTED_VERSION = 29,
    UNSUPPORTED_OPERATION = 30,
    INVALID_AUTH = 31,
    CLOCK_TOO_SKEWED = 32,
    REQUEST_TOO_LARGE = 33,
    BAD_REQUEST = 34,
    TTRANSPORT_ERROR = 35,
    UNSUPPORTED_TPROTOCOL = 36,
    REQUEST_TIMEOUT = 37
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

struct RetryType {
  enum type {
    SAFE = 0,
    UNSAFE = 1
  };
};

extern const std::map<int, const char*> _RetryType_VALUES_TO_NAMES;

class ServiceException;

typedef struct _ServiceException__isset {
  _ServiceException__isset() : errorCode(false), errorMessage(false), details(false), callId(false), requestId(false) {}
  bool errorCode;
  bool errorMessage;
  bool details;
  bool callId;
  bool requestId;
} _ServiceException__isset;

class ServiceException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "CFC8F1BA647B5893771F349AA407502B";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0xC8,0xF1,0xBA,0x64,0x7B,0x58,0x93,0x77,0x1F,0x34,0x9A,0xA4,0x07,0x50,0x2B};

  ServiceException(const ServiceException&);
  ServiceException& operator=(const ServiceException&);
  ServiceException() : errorCode((ErrorCode::type)0), errorMessage(), details(), callId(), requestId() {
  }

  virtual ~ServiceException() throw();
  ErrorCode::type errorCode;
  std::string errorMessage;
  std::string details;
  std::string callId;
  std::string requestId;

  _ServiceException__isset __isset;

  void __set_errorCode(const ErrorCode::type val);

  void __set_errorMessage(const std::string& val);

  void __set_details(const std::string& val);

  void __set_callId(const std::string& val);

  void __set_requestId(const std::string& val);

  bool operator == (const ServiceException & rhs) const
  {
    if (__isset.errorCode != rhs.__isset.errorCode)
      return false;
    else if (__isset.errorCode && !(errorCode == rhs.errorCode))
      return false;
    if (__isset.errorMessage != rhs.__isset.errorMessage)
      return false;
    else if (__isset.errorMessage && !(errorMessage == rhs.errorMessage))
      return false;
    if (__isset.details != rhs.__isset.details)
      return false;
    else if (__isset.details && !(details == rhs.details))
      return false;
    if (__isset.callId != rhs.__isset.callId)
      return false;
    else if (__isset.callId && !(callId == rhs.callId))
      return false;
    if (__isset.requestId != rhs.__isset.requestId)
      return false;
    else if (__isset.requestId && !(requestId == rhs.requestId))
      return false;
    return true;
  }
  bool operator != (const ServiceException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceException &a, ServiceException &b);



#endif
