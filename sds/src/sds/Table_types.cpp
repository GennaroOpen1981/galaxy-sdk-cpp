/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Table_types.h"

#include <algorithm>



int _kDataTypeValues[] = {
  DataType::BOOL,
  DataType::INT8,
  DataType::INT16,
  DataType::INT32,
  DataType::INT64,
  DataType::FLOAT,
  DataType::DOUBLE,
  DataType::STRING,
  DataType::BINARY,
  DataType::RAWBINARY,
  DataType::BOOL_SET,
  DataType::INT8_SET,
  DataType::INT16_SET,
  DataType::INT32_SET,
  DataType::INT64_SET,
  DataType::FLOAT_SET,
  DataType::DOUBLE_SET,
  DataType::STRING_SET,
  DataType::BINARY_SET
};
const char* _kDataTypeNames[] = {
  "BOOL",
  "INT8",
  "INT16",
  "INT32",
  "INT64",
  "FLOAT",
  "DOUBLE",
  "STRING",
  "BINARY",
  "RAWBINARY",
  "BOOL_SET",
  "INT8_SET",
  "INT16_SET",
  "INT32_SET",
  "INT64_SET",
  "FLOAT_SET",
  "DOUBLE_SET",
  "STRING_SET",
  "BINARY_SET"
};
const std::map<int, const char*> _DataType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(19, _kDataTypeValues, _kDataTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOperatorTypeValues[] = {
  OperatorType::EQUAL,
  OperatorType::NOT_EQUAL,
  OperatorType::GREATER,
  OperatorType::GREATER_OR_EQUAL,
  OperatorType::LESS,
  OperatorType::LESS_OR_EQUAL
};
const char* _kOperatorTypeNames[] = {
  "EQUAL",
  "NOT_EQUAL",
  "GREATER",
  "GREATER_OR_EQUAL",
  "LESS",
  "LESS_OR_EQUAL"
};
const std::map<int, const char*> _OperatorType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kOperatorTypeValues, _kOperatorTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSecondaryIndexConsistencyModeValues[] = {
  SecondaryIndexConsistencyMode::LAZY,
  SecondaryIndexConsistencyMode::EAGER,
  SecondaryIndexConsistencyMode::IMMUTABLE
};
const char* _kSecondaryIndexConsistencyModeNames[] = {
  "LAZY",
  "EAGER",
  "IMMUTABLE"
};
const std::map<int, const char*> _SecondaryIndexConsistencyMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSecondaryIndexConsistencyModeValues, _kSecondaryIndexConsistencyModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCannedAclValues[] = {
  CannedAcl::APP_SECRET_READ,
  CannedAcl::APP_SECRET_WRITE,
  CannedAcl::APP_USER_ENTITY_GROUP_READ,
  CannedAcl::APP_USER_ENTITY_GROUP_WRITE,
  CannedAcl::APP_USER_READ,
  CannedAcl::APP_USER_WRITE,
  CannedAcl::PUBLIC_READ,
  CannedAcl::PUBLIC_WRITE
};
const char* _kCannedAclNames[] = {
  "APP_SECRET_READ",
  "APP_SECRET_WRITE",
  "APP_USER_ENTITY_GROUP_READ",
  "APP_USER_ENTITY_GROUP_WRITE",
  "APP_USER_READ",
  "APP_USER_WRITE",
  "PUBLIC_READ",
  "PUBLIC_WRITE"
};
const std::map<int, const char*> _CannedAcl_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kCannedAclValues, _kCannedAclNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTableStateValues[] = {
  TableState::CREATING,
  TableState::ENABLING,
  TableState::ENABLED,
  TableState::DISABLING,
  TableState::DISABLED,
  TableState::DELETING,
  TableState::DELETED,
  TableState::LAZY_DELETE
};
const char* _kTableStateNames[] = {
  "CREATING",
  "ENABLING",
  "ENABLED",
  "DISABLING",
  "DISABLED",
  "DELETING",
  "DELETED",
  "LAZY_DELETE"
};
const std::map<int, const char*> _TableState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kTableStateValues, _kTableStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kScanOpValues[] = {
  ScanOp::COUNT,
  ScanOp::DELETE,
  ScanOp::UPDATE
};
const char* _kScanOpNames[] = {
  "COUNT",
  "DELETE",
  "UPDATE"
};
const std::map<int, const char*> _ScanOp_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kScanOpValues, _kScanOpNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBatchOpValues[] = {
  BatchOp::GET,
  BatchOp::PUT,
  BatchOp::INCREMENT,
  BatchOp::REMOVE
};
const char* _kBatchOpNames[] = {
  "GET",
  "PUT",
  "INCREMENT",
  "REMOVE"
};
const std::map<int, const char*> _BatchOp_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kBatchOpValues, _kBatchOpNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Value::~Value() throw() {
}


void Value::__set_boolValue(const bool val) {
  this->boolValue = val;
__isset.boolValue = true;
}

void Value::__set_int8Value(const int8_t val) {
  this->int8Value = val;
__isset.int8Value = true;
}

void Value::__set_int16Value(const int16_t val) {
  this->int16Value = val;
__isset.int16Value = true;
}

void Value::__set_int32Value(const int32_t val) {
  this->int32Value = val;
__isset.int32Value = true;
}

void Value::__set_int64Value(const int64_t val) {
  this->int64Value = val;
__isset.int64Value = true;
}

void Value::__set_doubleValue(const double val) {
  this->doubleValue = val;
__isset.doubleValue = true;
}

void Value::__set_stringValue(const std::string& val) {
  this->stringValue = val;
__isset.stringValue = true;
}

void Value::__set_binaryValue(const std::string& val) {
  this->binaryValue = val;
__isset.binaryValue = true;
}

void Value::__set_boolSetValue(const std::vector<bool> & val) {
  this->boolSetValue = val;
__isset.boolSetValue = true;
}

void Value::__set_int8SetValue(const std::vector<int8_t> & val) {
  this->int8SetValue = val;
__isset.int8SetValue = true;
}

void Value::__set_int16SetValue(const std::vector<int16_t> & val) {
  this->int16SetValue = val;
__isset.int16SetValue = true;
}

void Value::__set_int32SetValue(const std::vector<int32_t> & val) {
  this->int32SetValue = val;
__isset.int32SetValue = true;
}

void Value::__set_int64SetValue(const std::vector<int64_t> & val) {
  this->int64SetValue = val;
__isset.int64SetValue = true;
}

void Value::__set_doubleSetValue(const std::vector<double> & val) {
  this->doubleSetValue = val;
__isset.doubleSetValue = true;
}

void Value::__set_stringSetValue(const std::vector<std::string> & val) {
  this->stringSetValue = val;
__isset.stringSetValue = true;
}

void Value::__set_binarySetValue(const std::vector<std::string> & val) {
  this->binarySetValue = val;
__isset.binarySetValue = true;
}

void Value::__set_nullValue(const bool val) {
  this->nullValue = val;
__isset.nullValue = true;
}

const char* Value::ascii_fingerprint = "602D431CB10D6848188DE33534AE60B3";
const uint8_t Value::binary_fingerprint[16] = {0x60,0x2D,0x43,0x1C,0xB1,0x0D,0x68,0x48,0x18,0x8D,0xE3,0x35,0x34,0xAE,0x60,0xB3};

uint32_t Value::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->boolValue);
          this->__isset.boolValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->int8Value);
          this->__isset.int8Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->int16Value);
          this->__isset.int16Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->int32Value);
          this->__isset.int32Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->int64Value);
          this->__isset.int64Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->doubleValue);
          this->__isset.doubleValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stringValue);
          this->__isset.stringValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->binaryValue);
          this->__isset.binaryValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->boolSetValue.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->boolSetValue.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readBool(this->boolSetValue[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.boolSetValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->int8SetValue.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->int8SetValue.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readByte(this->int8SetValue[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.int8SetValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->int16SetValue.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->int16SetValue.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readI16(this->int16SetValue[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.int16SetValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->int32SetValue.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->int32SetValue.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += iprot->readI32(this->int32SetValue[_i19]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.int32SetValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->int64SetValue.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            xfer += iprot->readListBegin(_etype23, _size20);
            this->int64SetValue.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += iprot->readI64(this->int64SetValue[_i24]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.int64SetValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->doubleSetValue.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            xfer += iprot->readListBegin(_etype28, _size25);
            this->doubleSetValue.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              xfer += iprot->readDouble(this->doubleSetValue[_i29]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.doubleSetValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->stringSetValue.clear();
            uint32_t _size30;
            ::apache::thrift::protocol::TType _etype33;
            xfer += iprot->readListBegin(_etype33, _size30);
            this->stringSetValue.resize(_size30);
            uint32_t _i34;
            for (_i34 = 0; _i34 < _size30; ++_i34)
            {
              xfer += iprot->readString(this->stringSetValue[_i34]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.stringSetValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->binarySetValue.clear();
            uint32_t _size35;
            ::apache::thrift::protocol::TType _etype38;
            xfer += iprot->readListBegin(_etype38, _size35);
            this->binarySetValue.resize(_size35);
            uint32_t _i39;
            for (_i39 = 0; _i39 < _size35; ++_i39)
            {
              xfer += iprot->readBinary(this->binarySetValue[_i39]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.binarySetValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->nullValue);
          this->__isset.nullValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Value::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Value");

  if (this->__isset.boolValue) {
    xfer += oprot->writeFieldBegin("boolValue", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->boolValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.int8Value) {
    xfer += oprot->writeFieldBegin("int8Value", ::apache::thrift::protocol::T_BYTE, 2);
    xfer += oprot->writeByte(this->int8Value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.int16Value) {
    xfer += oprot->writeFieldBegin("int16Value", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->int16Value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.int32Value) {
    xfer += oprot->writeFieldBegin("int32Value", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->int32Value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.int64Value) {
    xfer += oprot->writeFieldBegin("int64Value", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->int64Value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.doubleValue) {
    xfer += oprot->writeFieldBegin("doubleValue", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->doubleValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stringValue) {
    xfer += oprot->writeFieldBegin("stringValue", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->stringValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.binaryValue) {
    xfer += oprot->writeFieldBegin("binaryValue", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeBinary(this->binaryValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.boolSetValue) {
    xfer += oprot->writeFieldBegin("boolSetValue", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->boolSetValue.size()));
      std::vector<bool> ::const_iterator _iter40;
      for (_iter40 = this->boolSetValue.begin(); _iter40 != this->boolSetValue.end(); ++_iter40)
      {
        xfer += oprot->writeBool((*_iter40));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.int8SetValue) {
    xfer += oprot->writeFieldBegin("int8SetValue", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->int8SetValue.size()));
      std::vector<int8_t> ::const_iterator _iter41;
      for (_iter41 = this->int8SetValue.begin(); _iter41 != this->int8SetValue.end(); ++_iter41)
      {
        xfer += oprot->writeByte((*_iter41));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.int16SetValue) {
    xfer += oprot->writeFieldBegin("int16SetValue", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->int16SetValue.size()));
      std::vector<int16_t> ::const_iterator _iter42;
      for (_iter42 = this->int16SetValue.begin(); _iter42 != this->int16SetValue.end(); ++_iter42)
      {
        xfer += oprot->writeI16((*_iter42));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.int32SetValue) {
    xfer += oprot->writeFieldBegin("int32SetValue", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->int32SetValue.size()));
      std::vector<int32_t> ::const_iterator _iter43;
      for (_iter43 = this->int32SetValue.begin(); _iter43 != this->int32SetValue.end(); ++_iter43)
      {
        xfer += oprot->writeI32((*_iter43));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.int64SetValue) {
    xfer += oprot->writeFieldBegin("int64SetValue", ::apache::thrift::protocol::T_LIST, 13);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->int64SetValue.size()));
      std::vector<int64_t> ::const_iterator _iter44;
      for (_iter44 = this->int64SetValue.begin(); _iter44 != this->int64SetValue.end(); ++_iter44)
      {
        xfer += oprot->writeI64((*_iter44));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.doubleSetValue) {
    xfer += oprot->writeFieldBegin("doubleSetValue", ::apache::thrift::protocol::T_LIST, 14);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->doubleSetValue.size()));
      std::vector<double> ::const_iterator _iter45;
      for (_iter45 = this->doubleSetValue.begin(); _iter45 != this->doubleSetValue.end(); ++_iter45)
      {
        xfer += oprot->writeDouble((*_iter45));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stringSetValue) {
    xfer += oprot->writeFieldBegin("stringSetValue", ::apache::thrift::protocol::T_LIST, 15);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->stringSetValue.size()));
      std::vector<std::string> ::const_iterator _iter46;
      for (_iter46 = this->stringSetValue.begin(); _iter46 != this->stringSetValue.end(); ++_iter46)
      {
        xfer += oprot->writeString((*_iter46));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.binarySetValue) {
    xfer += oprot->writeFieldBegin("binarySetValue", ::apache::thrift::protocol::T_LIST, 16);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->binarySetValue.size()));
      std::vector<std::string> ::const_iterator _iter47;
      for (_iter47 = this->binarySetValue.begin(); _iter47 != this->binarySetValue.end(); ++_iter47)
      {
        xfer += oprot->writeBinary((*_iter47));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nullValue) {
    xfer += oprot->writeFieldBegin("nullValue", ::apache::thrift::protocol::T_BOOL, 20);
    xfer += oprot->writeBool(this->nullValue);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Value &a, Value &b) {
  using ::std::swap;
  swap(a.boolValue, b.boolValue);
  swap(a.int8Value, b.int8Value);
  swap(a.int16Value, b.int16Value);
  swap(a.int32Value, b.int32Value);
  swap(a.int64Value, b.int64Value);
  swap(a.doubleValue, b.doubleValue);
  swap(a.stringValue, b.stringValue);
  swap(a.binaryValue, b.binaryValue);
  swap(a.boolSetValue, b.boolSetValue);
  swap(a.int8SetValue, b.int8SetValue);
  swap(a.int16SetValue, b.int16SetValue);
  swap(a.int32SetValue, b.int32SetValue);
  swap(a.int64SetValue, b.int64SetValue);
  swap(a.doubleSetValue, b.doubleSetValue);
  swap(a.stringSetValue, b.stringSetValue);
  swap(a.binarySetValue, b.binarySetValue);
  swap(a.nullValue, b.nullValue);
  swap(a.__isset, b.__isset);
}

Value::Value(const Value& other48) {
  boolValue = other48.boolValue;
  int8Value = other48.int8Value;
  int16Value = other48.int16Value;
  int32Value = other48.int32Value;
  int64Value = other48.int64Value;
  doubleValue = other48.doubleValue;
  stringValue = other48.stringValue;
  binaryValue = other48.binaryValue;
  boolSetValue = other48.boolSetValue;
  int8SetValue = other48.int8SetValue;
  int16SetValue = other48.int16SetValue;
  int32SetValue = other48.int32SetValue;
  int64SetValue = other48.int64SetValue;
  doubleSetValue = other48.doubleSetValue;
  stringSetValue = other48.stringSetValue;
  binarySetValue = other48.binarySetValue;
  nullValue = other48.nullValue;
  __isset = other48.__isset;
}
Value& Value::operator=(const Value& other49) {
  boolValue = other49.boolValue;
  int8Value = other49.int8Value;
  int16Value = other49.int16Value;
  int32Value = other49.int32Value;
  int64Value = other49.int64Value;
  doubleValue = other49.doubleValue;
  stringValue = other49.stringValue;
  binaryValue = other49.binaryValue;
  boolSetValue = other49.boolSetValue;
  int8SetValue = other49.int8SetValue;
  int16SetValue = other49.int16SetValue;
  int32SetValue = other49.int32SetValue;
  int64SetValue = other49.int64SetValue;
  doubleSetValue = other49.doubleSetValue;
  stringSetValue = other49.stringSetValue;
  binarySetValue = other49.binarySetValue;
  nullValue = other49.nullValue;
  __isset = other49.__isset;
  return *this;
}

Datum::~Datum() throw() {
}


void Datum::__set_type(const DataType::type val) {
  this->type = val;
__isset.type = true;
}

void Datum::__set_value(const Value& val) {
  this->value = val;
__isset.value = true;
}

const char* Datum::ascii_fingerprint = "93401A2F0AB037EB1EFF0DC3A854F7E1";
const uint8_t Datum::binary_fingerprint[16] = {0x93,0x40,0x1A,0x2F,0x0A,0xB0,0x37,0xEB,0x1E,0xFF,0x0D,0xC3,0xA8,0x54,0xF7,0xE1};

uint32_t Datum::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast50;
          xfer += iprot->readI32(ecast50);
          this->type = (DataType::type)ecast50;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Datum::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Datum");

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->value.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Datum &a, Datum &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

Datum::Datum(const Datum& other51) {
  type = other51.type;
  value = other51.value;
  __isset = other51.__isset;
}
Datum& Datum::operator=(const Datum& other52) {
  type = other52.type;
  value = other52.value;
  __isset = other52.__isset;
  return *this;
}

ProvisionThroughput::~ProvisionThroughput() throw() {
}


void ProvisionThroughput::__set_readCapacity(const int64_t val) {
  this->readCapacity = val;
__isset.readCapacity = true;
}

void ProvisionThroughput::__set_writeCapacity(const int64_t val) {
  this->writeCapacity = val;
__isset.writeCapacity = true;
}

const char* ProvisionThroughput::ascii_fingerprint = "0354D07C94CB8542872CA1277008860A";
const uint8_t ProvisionThroughput::binary_fingerprint[16] = {0x03,0x54,0xD0,0x7C,0x94,0xCB,0x85,0x42,0x87,0x2C,0xA1,0x27,0x70,0x08,0x86,0x0A};

uint32_t ProvisionThroughput::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->readCapacity);
          this->__isset.readCapacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->writeCapacity);
          this->__isset.writeCapacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProvisionThroughput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ProvisionThroughput");

  if (this->__isset.readCapacity) {
    xfer += oprot->writeFieldBegin("readCapacity", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->readCapacity);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.writeCapacity) {
    xfer += oprot->writeFieldBegin("writeCapacity", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->writeCapacity);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ProvisionThroughput &a, ProvisionThroughput &b) {
  using ::std::swap;
  swap(a.readCapacity, b.readCapacity);
  swap(a.writeCapacity, b.writeCapacity);
  swap(a.__isset, b.__isset);
}

ProvisionThroughput::ProvisionThroughput(const ProvisionThroughput& other53) {
  readCapacity = other53.readCapacity;
  writeCapacity = other53.writeCapacity;
  __isset = other53.__isset;
}
ProvisionThroughput& ProvisionThroughput::operator=(const ProvisionThroughput& other54) {
  readCapacity = other54.readCapacity;
  writeCapacity = other54.writeCapacity;
  __isset = other54.__isset;
  return *this;
}

TableQuota::~TableQuota() throw() {
}


void TableQuota::__set_size(const int64_t val) {
  this->size = val;
__isset.size = true;
}

const char* TableQuota::ascii_fingerprint = "148F3AAAC1D9859963D5E800D187BF26";
const uint8_t TableQuota::binary_fingerprint[16] = {0x14,0x8F,0x3A,0xAA,0xC1,0xD9,0x85,0x99,0x63,0xD5,0xE8,0x00,0xD1,0x87,0xBF,0x26};

uint32_t TableQuota::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TableQuota::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TableQuota");

  if (this->__isset.size) {
    xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->size);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TableQuota &a, TableQuota &b) {
  using ::std::swap;
  swap(a.size, b.size);
  swap(a.__isset, b.__isset);
}

TableQuota::TableQuota(const TableQuota& other55) {
  size = other55.size;
  __isset = other55.__isset;
}
TableQuota& TableQuota::operator=(const TableQuota& other56) {
  size = other56.size;
  __isset = other56.__isset;
  return *this;
}

KeySpec::~KeySpec() throw() {
}


void KeySpec::__set_attribute(const std::string& val) {
  this->attribute = val;
__isset.attribute = true;
}

void KeySpec::__set_asc(const bool val) {
  this->asc = val;
__isset.asc = true;
}

const char* KeySpec::ascii_fingerprint = "6200BB33D161C25E4ABCC4E5B0FB2883";
const uint8_t KeySpec::binary_fingerprint[16] = {0x62,0x00,0xBB,0x33,0xD1,0x61,0xC2,0x5E,0x4A,0xBC,0xC4,0xE5,0xB0,0xFB,0x28,0x83};

uint32_t KeySpec::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->attribute);
          this->__isset.attribute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->asc);
          this->__isset.asc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t KeySpec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("KeySpec");

  if (this->__isset.attribute) {
    xfer += oprot->writeFieldBegin("attribute", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->attribute);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.asc) {
    xfer += oprot->writeFieldBegin("asc", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->asc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(KeySpec &a, KeySpec &b) {
  using ::std::swap;
  swap(a.attribute, b.attribute);
  swap(a.asc, b.asc);
  swap(a.__isset, b.__isset);
}

KeySpec::KeySpec(const KeySpec& other57) {
  attribute = other57.attribute;
  asc = other57.asc;
  __isset = other57.__isset;
}
KeySpec& KeySpec::operator=(const KeySpec& other58) {
  attribute = other58.attribute;
  asc = other58.asc;
  __isset = other58.__isset;
  return *this;
}

LocalSecondaryIndexSpec::~LocalSecondaryIndexSpec() throw() {
}


void LocalSecondaryIndexSpec::__set_indexSchema(const IndexSpec& val) {
  this->indexSchema = val;
__isset.indexSchema = true;
}

void LocalSecondaryIndexSpec::__set_projections(const Attributes& val) {
  this->projections = val;
__isset.projections = true;
}

void LocalSecondaryIndexSpec::__set_consistencyMode(const SecondaryIndexConsistencyMode::type val) {
  this->consistencyMode = val;
__isset.consistencyMode = true;
}

void LocalSecondaryIndexSpec::__set_unique(const bool val) {
  this->unique = val;
__isset.unique = true;
}

const char* LocalSecondaryIndexSpec::ascii_fingerprint = "F84E985EF15E0C468BFD5B5F3B52825A";
const uint8_t LocalSecondaryIndexSpec::binary_fingerprint[16] = {0xF8,0x4E,0x98,0x5E,0xF1,0x5E,0x0C,0x46,0x8B,0xFD,0x5B,0x5F,0x3B,0x52,0x82,0x5A};

uint32_t LocalSecondaryIndexSpec::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->indexSchema.clear();
            uint32_t _size59;
            ::apache::thrift::protocol::TType _etype62;
            xfer += iprot->readListBegin(_etype62, _size59);
            this->indexSchema.resize(_size59);
            uint32_t _i63;
            for (_i63 = 0; _i63 < _size59; ++_i63)
            {
              xfer += this->indexSchema[_i63].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.indexSchema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->projections.clear();
            uint32_t _size64;
            ::apache::thrift::protocol::TType _etype67;
            xfer += iprot->readListBegin(_etype67, _size64);
            this->projections.resize(_size64);
            uint32_t _i68;
            for (_i68 = 0; _i68 < _size64; ++_i68)
            {
              xfer += iprot->readString(this->projections[_i68]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.projections = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast69;
          xfer += iprot->readI32(ecast69);
          this->consistencyMode = (SecondaryIndexConsistencyMode::type)ecast69;
          this->__isset.consistencyMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->unique);
          this->__isset.unique = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LocalSecondaryIndexSpec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("LocalSecondaryIndexSpec");

  if (this->__isset.indexSchema) {
    xfer += oprot->writeFieldBegin("indexSchema", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->indexSchema.size()));
      std::vector<KeySpec> ::const_iterator _iter70;
      for (_iter70 = this->indexSchema.begin(); _iter70 != this->indexSchema.end(); ++_iter70)
      {
        xfer += (*_iter70).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.projections) {
    xfer += oprot->writeFieldBegin("projections", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->projections.size()));
      std::vector<std::string> ::const_iterator _iter71;
      for (_iter71 = this->projections.begin(); _iter71 != this->projections.end(); ++_iter71)
      {
        xfer += oprot->writeString((*_iter71));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.consistencyMode) {
    xfer += oprot->writeFieldBegin("consistencyMode", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->consistencyMode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.unique) {
    xfer += oprot->writeFieldBegin("unique", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->unique);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(LocalSecondaryIndexSpec &a, LocalSecondaryIndexSpec &b) {
  using ::std::swap;
  swap(a.indexSchema, b.indexSchema);
  swap(a.projections, b.projections);
  swap(a.consistencyMode, b.consistencyMode);
  swap(a.unique, b.unique);
  swap(a.__isset, b.__isset);
}

LocalSecondaryIndexSpec::LocalSecondaryIndexSpec(const LocalSecondaryIndexSpec& other72) {
  indexSchema = other72.indexSchema;
  projections = other72.projections;
  consistencyMode = other72.consistencyMode;
  unique = other72.unique;
  __isset = other72.__isset;
}
LocalSecondaryIndexSpec& LocalSecondaryIndexSpec::operator=(const LocalSecondaryIndexSpec& other73) {
  indexSchema = other73.indexSchema;
  projections = other73.projections;
  consistencyMode = other73.consistencyMode;
  unique = other73.unique;
  __isset = other73.__isset;
  return *this;
}

EntityGroupSpec::~EntityGroupSpec() throw() {
}


void EntityGroupSpec::__set_attributes(const IndexSpec& val) {
  this->attributes = val;
__isset.attributes = true;
}

void EntityGroupSpec::__set_enableHash(const bool val) {
  this->enableHash = val;
__isset.enableHash = true;
}

const char* EntityGroupSpec::ascii_fingerprint = "74621F37CBB4AD4A094925B02F34024C";
const uint8_t EntityGroupSpec::binary_fingerprint[16] = {0x74,0x62,0x1F,0x37,0xCB,0xB4,0xAD,0x4A,0x09,0x49,0x25,0xB0,0x2F,0x34,0x02,0x4C};

uint32_t EntityGroupSpec::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attributes.clear();
            uint32_t _size74;
            ::apache::thrift::protocol::TType _etype77;
            xfer += iprot->readListBegin(_etype77, _size74);
            this->attributes.resize(_size74);
            uint32_t _i78;
            for (_i78 = 0; _i78 < _size74; ++_i78)
            {
              xfer += this->attributes[_i78].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableHash);
          this->__isset.enableHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EntityGroupSpec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("EntityGroupSpec");

  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attributes.size()));
      std::vector<KeySpec> ::const_iterator _iter79;
      for (_iter79 = this->attributes.begin(); _iter79 != this->attributes.end(); ++_iter79)
      {
        xfer += (*_iter79).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enableHash) {
    xfer += oprot->writeFieldBegin("enableHash", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->enableHash);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(EntityGroupSpec &a, EntityGroupSpec &b) {
  using ::std::swap;
  swap(a.attributes, b.attributes);
  swap(a.enableHash, b.enableHash);
  swap(a.__isset, b.__isset);
}

EntityGroupSpec::EntityGroupSpec(const EntityGroupSpec& other80) {
  attributes = other80.attributes;
  enableHash = other80.enableHash;
  __isset = other80.__isset;
}
EntityGroupSpec& EntityGroupSpec::operator=(const EntityGroupSpec& other81) {
  attributes = other81.attributes;
  enableHash = other81.enableHash;
  __isset = other81.__isset;
  return *this;
}

TableSchema::~TableSchema() throw() {
}


void TableSchema::__set_version(const int32_t val) {
  this->version = val;
__isset.version = true;
}

void TableSchema::__set_entityGroup(const EntityGroupSpec& val) {
  this->entityGroup = val;
__isset.entityGroup = true;
}

void TableSchema::__set_primaryIndex(const IndexSpec& val) {
  this->primaryIndex = val;
}

void TableSchema::__set_secondaryIndexes(const std::map<std::string, LocalSecondaryIndexSpec> & val) {
  this->secondaryIndexes = val;
__isset.secondaryIndexes = true;
}

void TableSchema::__set_attributes(const std::map<std::string, DataType::type> & val) {
  this->attributes = val;
__isset.attributes = true;
}

void TableSchema::__set_ttl(const int32_t val) {
  this->ttl = val;
__isset.ttl = true;
}

void TableSchema::__set_preSplits(const int32_t val) {
  this->preSplits = val;
__isset.preSplits = true;
}

const char* TableSchema::ascii_fingerprint = "4F1A001B73780ECAC8CA24260691B584";
const uint8_t TableSchema::binary_fingerprint[16] = {0x4F,0x1A,0x00,0x1B,0x73,0x78,0x0E,0xCA,0xC8,0xCA,0x24,0x26,0x06,0x91,0xB5,0x84};

uint32_t TableSchema::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->entityGroup.read(iprot);
          this->__isset.entityGroup = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->primaryIndex.clear();
            uint32_t _size82;
            ::apache::thrift::protocol::TType _etype85;
            xfer += iprot->readListBegin(_etype85, _size82);
            this->primaryIndex.resize(_size82);
            uint32_t _i86;
            for (_i86 = 0; _i86 < _size82; ++_i86)
            {
              xfer += this->primaryIndex[_i86].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.primaryIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->secondaryIndexes.clear();
            uint32_t _size87;
            ::apache::thrift::protocol::TType _ktype88;
            ::apache::thrift::protocol::TType _vtype89;
            xfer += iprot->readMapBegin(_ktype88, _vtype89, _size87);
            uint32_t _i91;
            for (_i91 = 0; _i91 < _size87; ++_i91)
            {
              std::string _key92;
              xfer += iprot->readString(_key92);
              LocalSecondaryIndexSpec& _val93 = this->secondaryIndexes[_key92];
              xfer += _val93.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.secondaryIndexes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->attributes.clear();
            uint32_t _size94;
            ::apache::thrift::protocol::TType _ktype95;
            ::apache::thrift::protocol::TType _vtype96;
            xfer += iprot->readMapBegin(_ktype95, _vtype96, _size94);
            uint32_t _i98;
            for (_i98 = 0; _i98 < _size94; ++_i98)
            {
              std::string _key99;
              xfer += iprot->readString(_key99);
              DataType::type& _val100 = this->attributes[_key99];
              int32_t ecast101;
              xfer += iprot->readI32(ecast101);
              _val100 = (DataType::type)ecast101;
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ttl);
          this->__isset.ttl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->preSplits);
          this->__isset.preSplits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TableSchema::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TableSchema");

  if (this->__isset.version) {
    xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->version);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.entityGroup) {
    xfer += oprot->writeFieldBegin("entityGroup", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->entityGroup.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("primaryIndex", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->primaryIndex.size()));
    std::vector<KeySpec> ::const_iterator _iter102;
    for (_iter102 = this->primaryIndex.begin(); _iter102 != this->primaryIndex.end(); ++_iter102)
    {
      xfer += (*_iter102).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.secondaryIndexes) {
    xfer += oprot->writeFieldBegin("secondaryIndexes", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->secondaryIndexes.size()));
      std::map<std::string, LocalSecondaryIndexSpec> ::const_iterator _iter103;
      for (_iter103 = this->secondaryIndexes.begin(); _iter103 != this->secondaryIndexes.end(); ++_iter103)
      {
        xfer += oprot->writeString(_iter103->first);
        xfer += _iter103->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_MAP, 5);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->attributes.size()));
      std::map<std::string, DataType::type> ::const_iterator _iter104;
      for (_iter104 = this->attributes.begin(); _iter104 != this->attributes.end(); ++_iter104)
      {
        xfer += oprot->writeString(_iter104->first);
        xfer += oprot->writeI32((int32_t)_iter104->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ttl) {
    xfer += oprot->writeFieldBegin("ttl", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->ttl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.preSplits) {
    xfer += oprot->writeFieldBegin("preSplits", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->preSplits);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TableSchema &a, TableSchema &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.entityGroup, b.entityGroup);
  swap(a.primaryIndex, b.primaryIndex);
  swap(a.secondaryIndexes, b.secondaryIndexes);
  swap(a.attributes, b.attributes);
  swap(a.ttl, b.ttl);
  swap(a.preSplits, b.preSplits);
  swap(a.__isset, b.__isset);
}

TableSchema::TableSchema(const TableSchema& other105) {
  version = other105.version;
  entityGroup = other105.entityGroup;
  primaryIndex = other105.primaryIndex;
  secondaryIndexes = other105.secondaryIndexes;
  attributes = other105.attributes;
  ttl = other105.ttl;
  preSplits = other105.preSplits;
  __isset = other105.__isset;
}
TableSchema& TableSchema::operator=(const TableSchema& other106) {
  version = other106.version;
  entityGroup = other106.entityGroup;
  primaryIndex = other106.primaryIndex;
  secondaryIndexes = other106.secondaryIndexes;
  attributes = other106.attributes;
  ttl = other106.ttl;
  preSplits = other106.preSplits;
  __isset = other106.__isset;
  return *this;
}

TableMetadata::~TableMetadata() throw() {
}


void TableMetadata::__set_tableId(const std::string& val) {
  this->tableId = val;
__isset.tableId = true;
}

void TableMetadata::__set_developerId(const std::string& val) {
  this->developerId = val;
__isset.developerId = true;
}

void TableMetadata::__set_appAcl(const AclConf& val) {
  this->appAcl = val;
__isset.appAcl = true;
}

void TableMetadata::__set_quota(const TableQuota& val) {
  this->quota = val;
__isset.quota = true;
}

void TableMetadata::__set_throughput(const ProvisionThroughput& val) {
  this->throughput = val;
__isset.throughput = true;
}

void TableMetadata::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

const char* TableMetadata::ascii_fingerprint = "E05A6BE494AA124C64F559ACAF3FBD0E";
const uint8_t TableMetadata::binary_fingerprint[16] = {0xE0,0x5A,0x6B,0xE4,0x94,0xAA,0x12,0x4C,0x64,0xF5,0x59,0xAC,0xAF,0x3F,0xBD,0x0E};

uint32_t TableMetadata::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableId);
          this->__isset.tableId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->developerId);
          this->__isset.developerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->appAcl.clear();
            uint32_t _size107;
            ::apache::thrift::protocol::TType _ktype108;
            ::apache::thrift::protocol::TType _vtype109;
            xfer += iprot->readMapBegin(_ktype108, _vtype109, _size107);
            uint32_t _i111;
            for (_i111 = 0; _i111 < _size107; ++_i111)
            {
              std::string _key112;
              xfer += iprot->readString(_key112);
              std::vector<CannedAcl::type> & _val113 = this->appAcl[_key112];
              {
                _val113.clear();
                uint32_t _size114;
                ::apache::thrift::protocol::TType _etype117;
                xfer += iprot->readListBegin(_etype117, _size114);
                _val113.resize(_size114);
                uint32_t _i118;
                for (_i118 = 0; _i118 < _size114; ++_i118)
                {
                  int32_t ecast119;
                  xfer += iprot->readI32(ecast119);
                  _val113[_i118] = (CannedAcl::type)ecast119;
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.appAcl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->quota.read(iprot);
          this->__isset.quota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->throughput.read(iprot);
          this->__isset.throughput = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TableMetadata::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TableMetadata");

  if (this->__isset.tableId) {
    xfer += oprot->writeFieldBegin("tableId", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->tableId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.developerId) {
    xfer += oprot->writeFieldBegin("developerId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->developerId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.appAcl) {
    xfer += oprot->writeFieldBegin("appAcl", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->appAcl.size()));
      std::map<std::string, std::vector<CannedAcl::type> > ::const_iterator _iter120;
      for (_iter120 = this->appAcl.begin(); _iter120 != this->appAcl.end(); ++_iter120)
      {
        xfer += oprot->writeString(_iter120->first);
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(_iter120->second.size()));
          std::vector<CannedAcl::type> ::const_iterator _iter121;
          for (_iter121 = _iter120->second.begin(); _iter121 != _iter120->second.end(); ++_iter121)
          {
            xfer += oprot->writeI32((int32_t)(*_iter121));
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.quota) {
    xfer += oprot->writeFieldBegin("quota", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->quota.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.throughput) {
    xfer += oprot->writeFieldBegin("throughput", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->throughput.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TableMetadata &a, TableMetadata &b) {
  using ::std::swap;
  swap(a.tableId, b.tableId);
  swap(a.developerId, b.developerId);
  swap(a.appAcl, b.appAcl);
  swap(a.quota, b.quota);
  swap(a.throughput, b.throughput);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

TableMetadata::TableMetadata(const TableMetadata& other122) {
  tableId = other122.tableId;
  developerId = other122.developerId;
  appAcl = other122.appAcl;
  quota = other122.quota;
  throughput = other122.throughput;
  description = other122.description;
  __isset = other122.__isset;
}
TableMetadata& TableMetadata::operator=(const TableMetadata& other123) {
  tableId = other123.tableId;
  developerId = other123.developerId;
  appAcl = other123.appAcl;
  quota = other123.quota;
  throughput = other123.throughput;
  description = other123.description;
  __isset = other123.__isset;
  return *this;
}

TableSpec::~TableSpec() throw() {
}


void TableSpec::__set_schema(const TableSchema& val) {
  this->schema = val;
__isset.schema = true;
}

void TableSpec::__set_metadata(const TableMetadata& val) {
  this->metadata = val;
__isset.metadata = true;
}

const char* TableSpec::ascii_fingerprint = "A976E818ABBCFB17DC9B6540E13ECC6C";
const uint8_t TableSpec::binary_fingerprint[16] = {0xA9,0x76,0xE8,0x18,0xAB,0xBC,0xFB,0x17,0xDC,0x9B,0x65,0x40,0xE1,0x3E,0xCC,0x6C};

uint32_t TableSpec::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->schema.read(iprot);
          this->__isset.schema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->metadata.read(iprot);
          this->__isset.metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TableSpec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TableSpec");

  if (this->__isset.schema) {
    xfer += oprot->writeFieldBegin("schema", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->schema.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.metadata) {
    xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->metadata.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TableSpec &a, TableSpec &b) {
  using ::std::swap;
  swap(a.schema, b.schema);
  swap(a.metadata, b.metadata);
  swap(a.__isset, b.__isset);
}

TableSpec::TableSpec(const TableSpec& other124) {
  schema = other124.schema;
  metadata = other124.metadata;
  __isset = other124.__isset;
}
TableSpec& TableSpec::operator=(const TableSpec& other125) {
  schema = other125.schema;
  metadata = other125.metadata;
  __isset = other125.__isset;
  return *this;
}

TableStatus::~TableStatus() throw() {
}


void TableStatus::__set_state(const TableState::type val) {
  this->state = val;
__isset.state = true;
}

void TableStatus::__set_createTime(const int64_t val) {
  this->createTime = val;
__isset.createTime = true;
}

void TableStatus::__set_alterTime(const int64_t val) {
  this->alterTime = val;
__isset.alterTime = true;
}

void TableStatus::__set_statTime(const int64_t val) {
  this->statTime = val;
__isset.statTime = true;
}

void TableStatus::__set_size(const int64_t val) {
  this->size = val;
__isset.size = true;
}

void TableStatus::__set_rowCount(const int64_t val) {
  this->rowCount = val;
__isset.rowCount = true;
}

const char* TableStatus::ascii_fingerprint = "7BAC3B4B109DFCEED390D66BC860FDB4";
const uint8_t TableStatus::binary_fingerprint[16] = {0x7B,0xAC,0x3B,0x4B,0x10,0x9D,0xFC,0xEE,0xD3,0x90,0xD6,0x6B,0xC8,0x60,0xFD,0xB4};

uint32_t TableStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast126;
          xfer += iprot->readI32(ecast126);
          this->state = (TableState::type)ecast126;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->alterTime);
          this->__isset.alterTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->statTime);
          this->__isset.statTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rowCount);
          this->__isset.rowCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TableStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TableStatus");

  if (this->__isset.state) {
    xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->state);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTime) {
    xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->createTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.alterTime) {
    xfer += oprot->writeFieldBegin("alterTime", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->alterTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.statTime) {
    xfer += oprot->writeFieldBegin("statTime", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->statTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.size) {
    xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rowCount) {
    xfer += oprot->writeFieldBegin("rowCount", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->rowCount);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TableStatus &a, TableStatus &b) {
  using ::std::swap;
  swap(a.state, b.state);
  swap(a.createTime, b.createTime);
  swap(a.alterTime, b.alterTime);
  swap(a.statTime, b.statTime);
  swap(a.size, b.size);
  swap(a.rowCount, b.rowCount);
  swap(a.__isset, b.__isset);
}

TableStatus::TableStatus(const TableStatus& other127) {
  state = other127.state;
  createTime = other127.createTime;
  alterTime = other127.alterTime;
  statTime = other127.statTime;
  size = other127.size;
  rowCount = other127.rowCount;
  __isset = other127.__isset;
}
TableStatus& TableStatus::operator=(const TableStatus& other128) {
  state = other128.state;
  createTime = other128.createTime;
  alterTime = other128.alterTime;
  statTime = other128.statTime;
  size = other128.size;
  rowCount = other128.rowCount;
  __isset = other128.__isset;
  return *this;
}

TableInfo::~TableInfo() throw() {
}


void TableInfo::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void TableInfo::__set_spec(const TableSpec& val) {
  this->spec = val;
__isset.spec = true;
}

void TableInfo::__set_status(const TableStatus& val) {
  this->status = val;
__isset.status = true;
}

const char* TableInfo::ascii_fingerprint = "19F5E2B399CABB942C6ECF9AB96BBD02";
const uint8_t TableInfo::binary_fingerprint[16] = {0x19,0xF5,0xE2,0xB3,0x99,0xCA,0xBB,0x94,0x2C,0x6E,0xCF,0x9A,0xB9,0x6B,0xBD,0x02};

uint32_t TableInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->spec.read(iprot);
          this->__isset.spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TableInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TableInfo");

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.spec) {
    xfer += oprot->writeFieldBegin("spec", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->spec.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->status.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TableInfo &a, TableInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.spec, b.spec);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

TableInfo::TableInfo(const TableInfo& other129) {
  name = other129.name;
  spec = other129.spec;
  status = other129.status;
  __isset = other129.__isset;
}
TableInfo& TableInfo::operator=(const TableInfo& other130) {
  name = other130.name;
  spec = other130.spec;
  status = other130.status;
  __isset = other130.__isset;
  return *this;
}

SimpleCondition::~SimpleCondition() throw() {
}


void SimpleCondition::__set_op(const OperatorType::type val) {
  this->op = val;
__isset.op = true;
}

void SimpleCondition::__set_field(const std::string& val) {
  this->field = val;
__isset.field = true;
}

void SimpleCondition::__set_value(const Datum& val) {
  this->value = val;
__isset.value = true;
}

void SimpleCondition::__set_rowExist(const bool val) {
  this->rowExist = val;
__isset.rowExist = true;
}

const char* SimpleCondition::ascii_fingerprint = "DB1640359204BBE4B1D030BA3CF374C9";
const uint8_t SimpleCondition::binary_fingerprint[16] = {0xDB,0x16,0x40,0x35,0x92,0x04,0xBB,0xE4,0xB1,0xD0,0x30,0xBA,0x3C,0xF3,0x74,0xC9};

uint32_t SimpleCondition::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast131;
          xfer += iprot->readI32(ecast131);
          this->op = (OperatorType::type)ecast131;
          this->__isset.op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field);
          this->__isset.field = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rowExist);
          this->__isset.rowExist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleCondition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleCondition");

  if (this->__isset.op) {
    xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->op);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.field) {
    xfer += oprot->writeFieldBegin("field", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->field);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->value.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rowExist) {
    xfer += oprot->writeFieldBegin("rowExist", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->rowExist);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SimpleCondition &a, SimpleCondition &b) {
  using ::std::swap;
  swap(a.op, b.op);
  swap(a.field, b.field);
  swap(a.value, b.value);
  swap(a.rowExist, b.rowExist);
  swap(a.__isset, b.__isset);
}

SimpleCondition::SimpleCondition(const SimpleCondition& other132) {
  op = other132.op;
  field = other132.field;
  value = other132.value;
  rowExist = other132.rowExist;
  __isset = other132.__isset;
}
SimpleCondition& SimpleCondition::operator=(const SimpleCondition& other133) {
  op = other133.op;
  field = other133.field;
  value = other133.value;
  rowExist = other133.rowExist;
  __isset = other133.__isset;
  return *this;
}

TableSplit::~TableSplit() throw() {
}


void TableSplit::__set_startKey(const Dictionary& val) {
  this->startKey = val;
__isset.startKey = true;
}

void TableSplit::__set_stopKey(const Dictionary& val) {
  this->stopKey = val;
__isset.stopKey = true;
}

const char* TableSplit::ascii_fingerprint = "D6E0ADC36D2B2BD7E592DFC5ADDE8458";
const uint8_t TableSplit::binary_fingerprint[16] = {0xD6,0xE0,0xAD,0xC3,0x6D,0x2B,0x2B,0xD7,0xE5,0x92,0xDF,0xC5,0xAD,0xDE,0x84,0x58};

uint32_t TableSplit::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->startKey.clear();
            uint32_t _size134;
            ::apache::thrift::protocol::TType _ktype135;
            ::apache::thrift::protocol::TType _vtype136;
            xfer += iprot->readMapBegin(_ktype135, _vtype136, _size134);
            uint32_t _i138;
            for (_i138 = 0; _i138 < _size134; ++_i138)
            {
              std::string _key139;
              xfer += iprot->readString(_key139);
              Datum& _val140 = this->startKey[_key139];
              xfer += _val140.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.startKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->stopKey.clear();
            uint32_t _size141;
            ::apache::thrift::protocol::TType _ktype142;
            ::apache::thrift::protocol::TType _vtype143;
            xfer += iprot->readMapBegin(_ktype142, _vtype143, _size141);
            uint32_t _i145;
            for (_i145 = 0; _i145 < _size141; ++_i145)
            {
              std::string _key146;
              xfer += iprot->readString(_key146);
              Datum& _val147 = this->stopKey[_key146];
              xfer += _val147.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.stopKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TableSplit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TableSplit");

  if (this->__isset.startKey) {
    xfer += oprot->writeFieldBegin("startKey", ::apache::thrift::protocol::T_MAP, 1);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->startKey.size()));
      std::map<std::string, Datum> ::const_iterator _iter148;
      for (_iter148 = this->startKey.begin(); _iter148 != this->startKey.end(); ++_iter148)
      {
        xfer += oprot->writeString(_iter148->first);
        xfer += _iter148->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stopKey) {
    xfer += oprot->writeFieldBegin("stopKey", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->stopKey.size()));
      std::map<std::string, Datum> ::const_iterator _iter149;
      for (_iter149 = this->stopKey.begin(); _iter149 != this->stopKey.end(); ++_iter149)
      {
        xfer += oprot->writeString(_iter149->first);
        xfer += _iter149->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TableSplit &a, TableSplit &b) {
  using ::std::swap;
  swap(a.startKey, b.startKey);
  swap(a.stopKey, b.stopKey);
  swap(a.__isset, b.__isset);
}

TableSplit::TableSplit(const TableSplit& other150) {
  startKey = other150.startKey;
  stopKey = other150.stopKey;
  __isset = other150.__isset;
}
TableSplit& TableSplit::operator=(const TableSplit& other151) {
  startKey = other151.startKey;
  stopKey = other151.stopKey;
  __isset = other151.__isset;
  return *this;
}

GetRequest::~GetRequest() throw() {
}


void GetRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
__isset.tableName = true;
}

void GetRequest::__set_keys(const Dictionary& val) {
  this->keys = val;
__isset.keys = true;
}

void GetRequest::__set_attributes(const Attributes& val) {
  this->attributes = val;
__isset.attributes = true;
}

const char* GetRequest::ascii_fingerprint = "328A108E9FF853E51039B16FB439FE5F";
const uint8_t GetRequest::binary_fingerprint[16] = {0x32,0x8A,0x10,0x8E,0x9F,0xF8,0x53,0xE5,0x10,0x39,0xB1,0x6F,0xB4,0x39,0xFE,0x5F};

uint32_t GetRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->keys.clear();
            uint32_t _size152;
            ::apache::thrift::protocol::TType _ktype153;
            ::apache::thrift::protocol::TType _vtype154;
            xfer += iprot->readMapBegin(_ktype153, _vtype154, _size152);
            uint32_t _i156;
            for (_i156 = 0; _i156 < _size152; ++_i156)
            {
              std::string _key157;
              xfer += iprot->readString(_key157);
              Datum& _val158 = this->keys[_key157];
              xfer += _val158.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.keys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attributes.clear();
            uint32_t _size159;
            ::apache::thrift::protocol::TType _etype162;
            xfer += iprot->readListBegin(_etype162, _size159);
            this->attributes.resize(_size159);
            uint32_t _i163;
            for (_i163 = 0; _i163 < _size159; ++_i163)
            {
              xfer += iprot->readString(this->attributes[_i163]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetRequest");

  if (this->__isset.tableName) {
    xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->tableName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.keys) {
    xfer += oprot->writeFieldBegin("keys", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->keys.size()));
      std::map<std::string, Datum> ::const_iterator _iter164;
      for (_iter164 = this->keys.begin(); _iter164 != this->keys.end(); ++_iter164)
      {
        xfer += oprot->writeString(_iter164->first);
        xfer += _iter164->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->attributes.size()));
      std::vector<std::string> ::const_iterator _iter165;
      for (_iter165 = this->attributes.begin(); _iter165 != this->attributes.end(); ++_iter165)
      {
        xfer += oprot->writeString((*_iter165));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetRequest &a, GetRequest &b) {
  using ::std::swap;
  swap(a.tableName, b.tableName);
  swap(a.keys, b.keys);
  swap(a.attributes, b.attributes);
  swap(a.__isset, b.__isset);
}

GetRequest::GetRequest(const GetRequest& other166) {
  tableName = other166.tableName;
  keys = other166.keys;
  attributes = other166.attributes;
  __isset = other166.__isset;
}
GetRequest& GetRequest::operator=(const GetRequest& other167) {
  tableName = other167.tableName;
  keys = other167.keys;
  attributes = other167.attributes;
  __isset = other167.__isset;
  return *this;
}

GetResult::~GetResult() throw() {
}


void GetResult::__set_item(const Dictionary& val) {
  this->item = val;
__isset.item = true;
}

const char* GetResult::ascii_fingerprint = "57939DD8C71DC631F68668442988EB66";
const uint8_t GetResult::binary_fingerprint[16] = {0x57,0x93,0x9D,0xD8,0xC7,0x1D,0xC6,0x31,0xF6,0x86,0x68,0x44,0x29,0x88,0xEB,0x66};

uint32_t GetResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->item.clear();
            uint32_t _size168;
            ::apache::thrift::protocol::TType _ktype169;
            ::apache::thrift::protocol::TType _vtype170;
            xfer += iprot->readMapBegin(_ktype169, _vtype170, _size168);
            uint32_t _i172;
            for (_i172 = 0; _i172 < _size168; ++_i172)
            {
              std::string _key173;
              xfer += iprot->readString(_key173);
              Datum& _val174 = this->item[_key173];
              xfer += _val174.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.item = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("GetResult");

  if (this->__isset.item) {
    xfer += oprot->writeFieldBegin("item", ::apache::thrift::protocol::T_MAP, 1);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->item.size()));
      std::map<std::string, Datum> ::const_iterator _iter175;
      for (_iter175 = this->item.begin(); _iter175 != this->item.end(); ++_iter175)
      {
        xfer += oprot->writeString(_iter175->first);
        xfer += _iter175->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(GetResult &a, GetResult &b) {
  using ::std::swap;
  swap(a.item, b.item);
  swap(a.__isset, b.__isset);
}

GetResult::GetResult(const GetResult& other176) {
  item = other176.item;
  __isset = other176.__isset;
}
GetResult& GetResult::operator=(const GetResult& other177) {
  item = other177.item;
  __isset = other177.__isset;
  return *this;
}

PutRequest::~PutRequest() throw() {
}


void PutRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
__isset.tableName = true;
}

void PutRequest::__set_record(const Dictionary& val) {
  this->record = val;
__isset.record = true;
}

void PutRequest::__set_condition(const SimpleCondition& val) {
  this->condition = val;
__isset.condition = true;
}

const char* PutRequest::ascii_fingerprint = "664E7E70CA13F8AA4159D843CF5B774F";
const uint8_t PutRequest::binary_fingerprint[16] = {0x66,0x4E,0x7E,0x70,0xCA,0x13,0xF8,0xAA,0x41,0x59,0xD8,0x43,0xCF,0x5B,0x77,0x4F};

uint32_t PutRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->record.clear();
            uint32_t _size178;
            ::apache::thrift::protocol::TType _ktype179;
            ::apache::thrift::protocol::TType _vtype180;
            xfer += iprot->readMapBegin(_ktype179, _vtype180, _size178);
            uint32_t _i182;
            for (_i182 = 0; _i182 < _size178; ++_i182)
            {
              std::string _key183;
              xfer += iprot->readString(_key183);
              Datum& _val184 = this->record[_key183];
              xfer += _val184.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.record = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->condition.read(iprot);
          this->__isset.condition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PutRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PutRequest");

  if (this->__isset.tableName) {
    xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->tableName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.record) {
    xfer += oprot->writeFieldBegin("record", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->record.size()));
      std::map<std::string, Datum> ::const_iterator _iter185;
      for (_iter185 = this->record.begin(); _iter185 != this->record.end(); ++_iter185)
      {
        xfer += oprot->writeString(_iter185->first);
        xfer += _iter185->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.condition) {
    xfer += oprot->writeFieldBegin("condition", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->condition.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PutRequest &a, PutRequest &b) {
  using ::std::swap;
  swap(a.tableName, b.tableName);
  swap(a.record, b.record);
  swap(a.condition, b.condition);
  swap(a.__isset, b.__isset);
}

PutRequest::PutRequest(const PutRequest& other186) {
  tableName = other186.tableName;
  record = other186.record;
  condition = other186.condition;
  __isset = other186.__isset;
}
PutRequest& PutRequest::operator=(const PutRequest& other187) {
  tableName = other187.tableName;
  record = other187.record;
  condition = other187.condition;
  __isset = other187.__isset;
  return *this;
}

PutResult::~PutResult() throw() {
}


void PutResult::__set_success(const bool val) {
  this->success = val;
__isset.success = true;
}

const char* PutResult::ascii_fingerprint = "BF054652DEF86253C2BEE7D947F167DD";
const uint8_t PutResult::binary_fingerprint[16] = {0xBF,0x05,0x46,0x52,0xDE,0xF8,0x62,0x53,0xC2,0xBE,0xE7,0xD9,0x47,0xF1,0x67,0xDD};

uint32_t PutResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PutResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PutResult");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PutResult &a, PutResult &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.__isset, b.__isset);
}

PutResult::PutResult(const PutResult& other188) {
  success = other188.success;
  __isset = other188.__isset;
}
PutResult& PutResult::operator=(const PutResult& other189) {
  success = other189.success;
  __isset = other189.__isset;
  return *this;
}

IncrementRequest::~IncrementRequest() throw() {
}


void IncrementRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
__isset.tableName = true;
}

void IncrementRequest::__set_keys(const Dictionary& val) {
  this->keys = val;
__isset.keys = true;
}

void IncrementRequest::__set_amounts(const Dictionary& val) {
  this->amounts = val;
__isset.amounts = true;
}

const char* IncrementRequest::ascii_fingerprint = "CA7973A34DED2C6AECE6EAE474A9AAE9";
const uint8_t IncrementRequest::binary_fingerprint[16] = {0xCA,0x79,0x73,0xA3,0x4D,0xED,0x2C,0x6A,0xEC,0xE6,0xEA,0xE4,0x74,0xA9,0xAA,0xE9};

uint32_t IncrementRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->keys.clear();
            uint32_t _size190;
            ::apache::thrift::protocol::TType _ktype191;
            ::apache::thrift::protocol::TType _vtype192;
            xfer += iprot->readMapBegin(_ktype191, _vtype192, _size190);
            uint32_t _i194;
            for (_i194 = 0; _i194 < _size190; ++_i194)
            {
              std::string _key195;
              xfer += iprot->readString(_key195);
              Datum& _val196 = this->keys[_key195];
              xfer += _val196.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.keys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->amounts.clear();
            uint32_t _size197;
            ::apache::thrift::protocol::TType _ktype198;
            ::apache::thrift::protocol::TType _vtype199;
            xfer += iprot->readMapBegin(_ktype198, _vtype199, _size197);
            uint32_t _i201;
            for (_i201 = 0; _i201 < _size197; ++_i201)
            {
              std::string _key202;
              xfer += iprot->readString(_key202);
              Datum& _val203 = this->amounts[_key202];
              xfer += _val203.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.amounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IncrementRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("IncrementRequest");

  if (this->__isset.tableName) {
    xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->tableName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.keys) {
    xfer += oprot->writeFieldBegin("keys", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->keys.size()));
      std::map<std::string, Datum> ::const_iterator _iter204;
      for (_iter204 = this->keys.begin(); _iter204 != this->keys.end(); ++_iter204)
      {
        xfer += oprot->writeString(_iter204->first);
        xfer += _iter204->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.amounts) {
    xfer += oprot->writeFieldBegin("amounts", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->amounts.size()));
      std::map<std::string, Datum> ::const_iterator _iter205;
      for (_iter205 = this->amounts.begin(); _iter205 != this->amounts.end(); ++_iter205)
      {
        xfer += oprot->writeString(_iter205->first);
        xfer += _iter205->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(IncrementRequest &a, IncrementRequest &b) {
  using ::std::swap;
  swap(a.tableName, b.tableName);
  swap(a.keys, b.keys);
  swap(a.amounts, b.amounts);
  swap(a.__isset, b.__isset);
}

IncrementRequest::IncrementRequest(const IncrementRequest& other206) {
  tableName = other206.tableName;
  keys = other206.keys;
  amounts = other206.amounts;
  __isset = other206.__isset;
}
IncrementRequest& IncrementRequest::operator=(const IncrementRequest& other207) {
  tableName = other207.tableName;
  keys = other207.keys;
  amounts = other207.amounts;
  __isset = other207.__isset;
  return *this;
}

IncrementResult::~IncrementResult() throw() {
}


void IncrementResult::__set_amounts(const Dictionary& val) {
  this->amounts = val;
__isset.amounts = true;
}

const char* IncrementResult::ascii_fingerprint = "57939DD8C71DC631F68668442988EB66";
const uint8_t IncrementResult::binary_fingerprint[16] = {0x57,0x93,0x9D,0xD8,0xC7,0x1D,0xC6,0x31,0xF6,0x86,0x68,0x44,0x29,0x88,0xEB,0x66};

uint32_t IncrementResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->amounts.clear();
            uint32_t _size208;
            ::apache::thrift::protocol::TType _ktype209;
            ::apache::thrift::protocol::TType _vtype210;
            xfer += iprot->readMapBegin(_ktype209, _vtype210, _size208);
            uint32_t _i212;
            for (_i212 = 0; _i212 < _size208; ++_i212)
            {
              std::string _key213;
              xfer += iprot->readString(_key213);
              Datum& _val214 = this->amounts[_key213];
              xfer += _val214.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.amounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IncrementResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("IncrementResult");

  if (this->__isset.amounts) {
    xfer += oprot->writeFieldBegin("amounts", ::apache::thrift::protocol::T_MAP, 1);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->amounts.size()));
      std::map<std::string, Datum> ::const_iterator _iter215;
      for (_iter215 = this->amounts.begin(); _iter215 != this->amounts.end(); ++_iter215)
      {
        xfer += oprot->writeString(_iter215->first);
        xfer += _iter215->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(IncrementResult &a, IncrementResult &b) {
  using ::std::swap;
  swap(a.amounts, b.amounts);
  swap(a.__isset, b.__isset);
}

IncrementResult::IncrementResult(const IncrementResult& other216) {
  amounts = other216.amounts;
  __isset = other216.__isset;
}
IncrementResult& IncrementResult::operator=(const IncrementResult& other217) {
  amounts = other217.amounts;
  __isset = other217.__isset;
  return *this;
}

RemoveRequest::~RemoveRequest() throw() {
}


void RemoveRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
__isset.tableName = true;
}

void RemoveRequest::__set_keys(const Dictionary& val) {
  this->keys = val;
__isset.keys = true;
}

void RemoveRequest::__set_attributes(const Attributes& val) {
  this->attributes = val;
__isset.attributes = true;
}

void RemoveRequest::__set_condition(const SimpleCondition& val) {
  this->condition = val;
__isset.condition = true;
}

const char* RemoveRequest::ascii_fingerprint = "7957B4A8DB605BAD556049A8F5036424";
const uint8_t RemoveRequest::binary_fingerprint[16] = {0x79,0x57,0xB4,0xA8,0xDB,0x60,0x5B,0xAD,0x55,0x60,0x49,0xA8,0xF5,0x03,0x64,0x24};

uint32_t RemoveRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->keys.clear();
            uint32_t _size218;
            ::apache::thrift::protocol::TType _ktype219;
            ::apache::thrift::protocol::TType _vtype220;
            xfer += iprot->readMapBegin(_ktype219, _vtype220, _size218);
            uint32_t _i222;
            for (_i222 = 0; _i222 < _size218; ++_i222)
            {
              std::string _key223;
              xfer += iprot->readString(_key223);
              Datum& _val224 = this->keys[_key223];
              xfer += _val224.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.keys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attributes.clear();
            uint32_t _size225;
            ::apache::thrift::protocol::TType _etype228;
            xfer += iprot->readListBegin(_etype228, _size225);
            this->attributes.resize(_size225);
            uint32_t _i229;
            for (_i229 = 0; _i229 < _size225; ++_i229)
            {
              xfer += iprot->readString(this->attributes[_i229]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->condition.read(iprot);
          this->__isset.condition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoveRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RemoveRequest");

  if (this->__isset.tableName) {
    xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->tableName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.keys) {
    xfer += oprot->writeFieldBegin("keys", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->keys.size()));
      std::map<std::string, Datum> ::const_iterator _iter230;
      for (_iter230 = this->keys.begin(); _iter230 != this->keys.end(); ++_iter230)
      {
        xfer += oprot->writeString(_iter230->first);
        xfer += _iter230->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->attributes.size()));
      std::vector<std::string> ::const_iterator _iter231;
      for (_iter231 = this->attributes.begin(); _iter231 != this->attributes.end(); ++_iter231)
      {
        xfer += oprot->writeString((*_iter231));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.condition) {
    xfer += oprot->writeFieldBegin("condition", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->condition.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RemoveRequest &a, RemoveRequest &b) {
  using ::std::swap;
  swap(a.tableName, b.tableName);
  swap(a.keys, b.keys);
  swap(a.attributes, b.attributes);
  swap(a.condition, b.condition);
  swap(a.__isset, b.__isset);
}

RemoveRequest::RemoveRequest(const RemoveRequest& other232) {
  tableName = other232.tableName;
  keys = other232.keys;
  attributes = other232.attributes;
  condition = other232.condition;
  __isset = other232.__isset;
}
RemoveRequest& RemoveRequest::operator=(const RemoveRequest& other233) {
  tableName = other233.tableName;
  keys = other233.keys;
  attributes = other233.attributes;
  condition = other233.condition;
  __isset = other233.__isset;
  return *this;
}

RemoveResult::~RemoveResult() throw() {
}


void RemoveResult::__set_success(const bool val) {
  this->success = val;
__isset.success = true;
}

const char* RemoveResult::ascii_fingerprint = "BF054652DEF86253C2BEE7D947F167DD";
const uint8_t RemoveResult::binary_fingerprint[16] = {0xBF,0x05,0x46,0x52,0xDE,0xF8,0x62,0x53,0xC2,0xBE,0xE7,0xD9,0x47,0xF1,0x67,0xDD};

uint32_t RemoveResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RemoveResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RemoveResult");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RemoveResult &a, RemoveResult &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.__isset, b.__isset);
}

RemoveResult::RemoveResult(const RemoveResult& other234) {
  success = other234.success;
  __isset = other234.__isset;
}
RemoveResult& RemoveResult::operator=(const RemoveResult& other235) {
  success = other235.success;
  __isset = other235.__isset;
  return *this;
}

Request::~Request() throw() {
}


void Request::__set_getRequest(const GetRequest& val) {
  this->getRequest = val;
__isset.getRequest = true;
}

void Request::__set_putRequest(const PutRequest& val) {
  this->putRequest = val;
__isset.putRequest = true;
}

void Request::__set_incrementRequest(const IncrementRequest& val) {
  this->incrementRequest = val;
__isset.incrementRequest = true;
}

void Request::__set_removeRequest(const RemoveRequest& val) {
  this->removeRequest = val;
__isset.removeRequest = true;
}

const char* Request::ascii_fingerprint = "E207943C32E37827B385BF0D06BA4654";
const uint8_t Request::binary_fingerprint[16] = {0xE2,0x07,0x94,0x3C,0x32,0xE3,0x78,0x27,0xB3,0x85,0xBF,0x0D,0x06,0xBA,0x46,0x54};

uint32_t Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->getRequest.read(iprot);
          this->__isset.getRequest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->putRequest.read(iprot);
          this->__isset.putRequest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->incrementRequest.read(iprot);
          this->__isset.incrementRequest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->removeRequest.read(iprot);
          this->__isset.removeRequest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Request");

  if (this->__isset.getRequest) {
    xfer += oprot->writeFieldBegin("getRequest", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->getRequest.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.putRequest) {
    xfer += oprot->writeFieldBegin("putRequest", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->putRequest.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.incrementRequest) {
    xfer += oprot->writeFieldBegin("incrementRequest", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->incrementRequest.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.removeRequest) {
    xfer += oprot->writeFieldBegin("removeRequest", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->removeRequest.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Request &a, Request &b) {
  using ::std::swap;
  swap(a.getRequest, b.getRequest);
  swap(a.putRequest, b.putRequest);
  swap(a.incrementRequest, b.incrementRequest);
  swap(a.removeRequest, b.removeRequest);
  swap(a.__isset, b.__isset);
}

Request::Request(const Request& other236) {
  getRequest = other236.getRequest;
  putRequest = other236.putRequest;
  incrementRequest = other236.incrementRequest;
  removeRequest = other236.removeRequest;
  __isset = other236.__isset;
}
Request& Request::operator=(const Request& other237) {
  getRequest = other237.getRequest;
  putRequest = other237.putRequest;
  incrementRequest = other237.incrementRequest;
  removeRequest = other237.removeRequest;
  __isset = other237.__isset;
  return *this;
}

ScanAction::~ScanAction() throw() {
}


void ScanAction::__set_action(const ScanOp::type val) {
  this->action = val;
__isset.action = true;
}

void ScanAction::__set_request(const Request& val) {
  this->request = val;
__isset.request = true;
}

const char* ScanAction::ascii_fingerprint = "75FC2C50E22DB407E52BCDB14AB66D46";
const uint8_t ScanAction::binary_fingerprint[16] = {0x75,0xFC,0x2C,0x50,0xE2,0x2D,0xB4,0x07,0xE5,0x2B,0xCD,0xB1,0x4A,0xB6,0x6D,0x46};

uint32_t ScanAction::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast238;
          xfer += iprot->readI32(ecast238);
          this->action = (ScanOp::type)ecast238;
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->request.read(iprot);
          this->__isset.request = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ScanAction::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ScanAction");

  if (this->__isset.action) {
    xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->action);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.request) {
    xfer += oprot->writeFieldBegin("request", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->request.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ScanAction &a, ScanAction &b) {
  using ::std::swap;
  swap(a.action, b.action);
  swap(a.request, b.request);
  swap(a.__isset, b.__isset);
}

ScanAction::ScanAction(const ScanAction& other239) {
  action = other239.action;
  request = other239.request;
  __isset = other239.__isset;
}
ScanAction& ScanAction::operator=(const ScanAction& other240) {
  action = other240.action;
  request = other240.request;
  __isset = other240.__isset;
  return *this;
}

ScanRequest::~ScanRequest() throw() {
}


void ScanRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
__isset.tableName = true;
}

void ScanRequest::__set_indexName(const std::string& val) {
  this->indexName = val;
__isset.indexName = true;
}

void ScanRequest::__set_startKey(const Dictionary& val) {
  this->startKey = val;
__isset.startKey = true;
}

void ScanRequest::__set_stopKey(const Dictionary& val) {
  this->stopKey = val;
__isset.stopKey = true;
}

void ScanRequest::__set_attributes(const Attributes& val) {
  this->attributes = val;
__isset.attributes = true;
}

void ScanRequest::__set_condition(const std::string& val) {
  this->condition = val;
__isset.condition = true;
}

void ScanRequest::__set_limit(const int32_t val) {
  this->limit = val;
__isset.limit = true;
}

void ScanRequest::__set_reverse(const bool val) {
  this->reverse = val;
__isset.reverse = true;
}

void ScanRequest::__set_inGlobalOrder(const bool val) {
  this->inGlobalOrder = val;
__isset.inGlobalOrder = true;
}

void ScanRequest::__set_cacheResult(const bool val) {
  this->cacheResult = val;
__isset.cacheResult = true;
}

void ScanRequest::__set_lookAheadStep(const int32_t val) {
  this->lookAheadStep = val;
__isset.lookAheadStep = true;
}

void ScanRequest::__set_action(const ScanAction& val) {
  this->action = val;
__isset.action = true;
}

const char* ScanRequest::ascii_fingerprint = "DA5255B91A6E155C147986D83C7BC932";
const uint8_t ScanRequest::binary_fingerprint[16] = {0xDA,0x52,0x55,0xB9,0x1A,0x6E,0x15,0x5C,0x14,0x79,0x86,0xD8,0x3C,0x7B,0xC9,0x32};

uint32_t ScanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->indexName);
          this->__isset.indexName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->startKey.clear();
            uint32_t _size241;
            ::apache::thrift::protocol::TType _ktype242;
            ::apache::thrift::protocol::TType _vtype243;
            xfer += iprot->readMapBegin(_ktype242, _vtype243, _size241);
            uint32_t _i245;
            for (_i245 = 0; _i245 < _size241; ++_i245)
            {
              std::string _key246;
              xfer += iprot->readString(_key246);
              Datum& _val247 = this->startKey[_key246];
              xfer += _val247.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.startKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->stopKey.clear();
            uint32_t _size248;
            ::apache::thrift::protocol::TType _ktype249;
            ::apache::thrift::protocol::TType _vtype250;
            xfer += iprot->readMapBegin(_ktype249, _vtype250, _size248);
            uint32_t _i252;
            for (_i252 = 0; _i252 < _size248; ++_i252)
            {
              std::string _key253;
              xfer += iprot->readString(_key253);
              Datum& _val254 = this->stopKey[_key253];
              xfer += _val254.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.stopKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attributes.clear();
            uint32_t _size255;
            ::apache::thrift::protocol::TType _etype258;
            xfer += iprot->readListBegin(_etype258, _size255);
            this->attributes.resize(_size255);
            uint32_t _i259;
            for (_i259 = 0; _i259 < _size255; ++_i259)
            {
              xfer += iprot->readString(this->attributes[_i259]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->condition);
          this->__isset.condition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->reverse);
          this->__isset.reverse = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->inGlobalOrder);
          this->__isset.inGlobalOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->cacheResult);
          this->__isset.cacheResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lookAheadStep);
          this->__isset.lookAheadStep = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->action.read(iprot);
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ScanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ScanRequest");

  if (this->__isset.tableName) {
    xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->tableName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.indexName) {
    xfer += oprot->writeFieldBegin("indexName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->indexName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startKey) {
    xfer += oprot->writeFieldBegin("startKey", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->startKey.size()));
      std::map<std::string, Datum> ::const_iterator _iter260;
      for (_iter260 = this->startKey.begin(); _iter260 != this->startKey.end(); ++_iter260)
      {
        xfer += oprot->writeString(_iter260->first);
        xfer += _iter260->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stopKey) {
    xfer += oprot->writeFieldBegin("stopKey", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->stopKey.size()));
      std::map<std::string, Datum> ::const_iterator _iter261;
      for (_iter261 = this->stopKey.begin(); _iter261 != this->stopKey.end(); ++_iter261)
      {
        xfer += oprot->writeString(_iter261->first);
        xfer += _iter261->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->attributes.size()));
      std::vector<std::string> ::const_iterator _iter262;
      for (_iter262 = this->attributes.begin(); _iter262 != this->attributes.end(); ++_iter262)
      {
        xfer += oprot->writeString((*_iter262));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.condition) {
    xfer += oprot->writeFieldBegin("condition", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->condition);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.limit) {
    xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reverse) {
    xfer += oprot->writeFieldBegin("reverse", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->reverse);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.inGlobalOrder) {
    xfer += oprot->writeFieldBegin("inGlobalOrder", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->inGlobalOrder);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cacheResult) {
    xfer += oprot->writeFieldBegin("cacheResult", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->cacheResult);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lookAheadStep) {
    xfer += oprot->writeFieldBegin("lookAheadStep", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->lookAheadStep);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.action) {
    xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->action.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ScanRequest &a, ScanRequest &b) {
  using ::std::swap;
  swap(a.tableName, b.tableName);
  swap(a.indexName, b.indexName);
  swap(a.startKey, b.startKey);
  swap(a.stopKey, b.stopKey);
  swap(a.attributes, b.attributes);
  swap(a.condition, b.condition);
  swap(a.limit, b.limit);
  swap(a.reverse, b.reverse);
  swap(a.inGlobalOrder, b.inGlobalOrder);
  swap(a.cacheResult, b.cacheResult);
  swap(a.lookAheadStep, b.lookAheadStep);
  swap(a.action, b.action);
  swap(a.__isset, b.__isset);
}

ScanRequest::ScanRequest(const ScanRequest& other263) {
  tableName = other263.tableName;
  indexName = other263.indexName;
  startKey = other263.startKey;
  stopKey = other263.stopKey;
  attributes = other263.attributes;
  condition = other263.condition;
  limit = other263.limit;
  reverse = other263.reverse;
  inGlobalOrder = other263.inGlobalOrder;
  cacheResult = other263.cacheResult;
  lookAheadStep = other263.lookAheadStep;
  action = other263.action;
  __isset = other263.__isset;
}
ScanRequest& ScanRequest::operator=(const ScanRequest& other264) {
  tableName = other264.tableName;
  indexName = other264.indexName;
  startKey = other264.startKey;
  stopKey = other264.stopKey;
  attributes = other264.attributes;
  condition = other264.condition;
  limit = other264.limit;
  reverse = other264.reverse;
  inGlobalOrder = other264.inGlobalOrder;
  cacheResult = other264.cacheResult;
  lookAheadStep = other264.lookAheadStep;
  action = other264.action;
  __isset = other264.__isset;
  return *this;
}

ScanResult::~ScanResult() throw() {
}


void ScanResult::__set_nextStartKey(const Dictionary& val) {
  this->nextStartKey = val;
__isset.nextStartKey = true;
}

void ScanResult::__set_records(const std::vector<Dictionary> & val) {
  this->records = val;
__isset.records = true;
}

void ScanResult::__set_throttled(const bool val) {
  this->throttled = val;
__isset.throttled = true;
}

const char* ScanResult::ascii_fingerprint = "CD2194B6EE5BF5F42E45946124430534";
const uint8_t ScanResult::binary_fingerprint[16] = {0xCD,0x21,0x94,0xB6,0xEE,0x5B,0xF5,0xF4,0x2E,0x45,0x94,0x61,0x24,0x43,0x05,0x34};

uint32_t ScanResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->nextStartKey.clear();
            uint32_t _size265;
            ::apache::thrift::protocol::TType _ktype266;
            ::apache::thrift::protocol::TType _vtype267;
            xfer += iprot->readMapBegin(_ktype266, _vtype267, _size265);
            uint32_t _i269;
            for (_i269 = 0; _i269 < _size265; ++_i269)
            {
              std::string _key270;
              xfer += iprot->readString(_key270);
              Datum& _val271 = this->nextStartKey[_key270];
              xfer += _val271.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.nextStartKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->records.clear();
            uint32_t _size272;
            ::apache::thrift::protocol::TType _etype275;
            xfer += iprot->readListBegin(_etype275, _size272);
            this->records.resize(_size272);
            uint32_t _i276;
            for (_i276 = 0; _i276 < _size272; ++_i276)
            {
              {
                this->records[_i276].clear();
                uint32_t _size277;
                ::apache::thrift::protocol::TType _ktype278;
                ::apache::thrift::protocol::TType _vtype279;
                xfer += iprot->readMapBegin(_ktype278, _vtype279, _size277);
                uint32_t _i281;
                for (_i281 = 0; _i281 < _size277; ++_i281)
                {
                  std::string _key282;
                  xfer += iprot->readString(_key282);
                  Datum& _val283 = this->records[_i276][_key282];
                  xfer += _val283.read(iprot);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.records = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->throttled);
          this->__isset.throttled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ScanResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ScanResult");

  if (this->__isset.nextStartKey) {
    xfer += oprot->writeFieldBegin("nextStartKey", ::apache::thrift::protocol::T_MAP, 1);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->nextStartKey.size()));
      std::map<std::string, Datum> ::const_iterator _iter284;
      for (_iter284 = this->nextStartKey.begin(); _iter284 != this->nextStartKey.end(); ++_iter284)
      {
        xfer += oprot->writeString(_iter284->first);
        xfer += _iter284->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.records) {
    xfer += oprot->writeFieldBegin("records", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->records.size()));
      std::vector<Dictionary> ::const_iterator _iter285;
      for (_iter285 = this->records.begin(); _iter285 != this->records.end(); ++_iter285)
      {
        {
          xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*_iter285).size()));
          std::map<std::string, Datum> ::const_iterator _iter286;
          for (_iter286 = (*_iter285).begin(); _iter286 != (*_iter285).end(); ++_iter286)
          {
            xfer += oprot->writeString(_iter286->first);
            xfer += _iter286->second.write(oprot);
          }
          xfer += oprot->writeMapEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.throttled) {
    xfer += oprot->writeFieldBegin("throttled", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->throttled);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ScanResult &a, ScanResult &b) {
  using ::std::swap;
  swap(a.nextStartKey, b.nextStartKey);
  swap(a.records, b.records);
  swap(a.throttled, b.throttled);
  swap(a.__isset, b.__isset);
}

ScanResult::ScanResult(const ScanResult& other287) {
  nextStartKey = other287.nextStartKey;
  records = other287.records;
  throttled = other287.throttled;
  __isset = other287.__isset;
}
ScanResult& ScanResult::operator=(const ScanResult& other288) {
  nextStartKey = other288.nextStartKey;
  records = other288.records;
  throttled = other288.throttled;
  __isset = other288.__isset;
  return *this;
}

BatchRequestItem::~BatchRequestItem() throw() {
}


void BatchRequestItem::__set_action(const BatchOp::type val) {
  this->action = val;
__isset.action = true;
}

void BatchRequestItem::__set_request(const Request& val) {
  this->request = val;
__isset.request = true;
}

const char* BatchRequestItem::ascii_fingerprint = "75FC2C50E22DB407E52BCDB14AB66D46";
const uint8_t BatchRequestItem::binary_fingerprint[16] = {0x75,0xFC,0x2C,0x50,0xE2,0x2D,0xB4,0x07,0xE5,0x2B,0xCD,0xB1,0x4A,0xB6,0x6D,0x46};

uint32_t BatchRequestItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast289;
          xfer += iprot->readI32(ecast289);
          this->action = (BatchOp::type)ecast289;
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->request.read(iprot);
          this->__isset.request = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BatchRequestItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BatchRequestItem");

  if (this->__isset.action) {
    xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->action);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.request) {
    xfer += oprot->writeFieldBegin("request", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->request.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BatchRequestItem &a, BatchRequestItem &b) {
  using ::std::swap;
  swap(a.action, b.action);
  swap(a.request, b.request);
  swap(a.__isset, b.__isset);
}

BatchRequestItem::BatchRequestItem(const BatchRequestItem& other290) {
  action = other290.action;
  request = other290.request;
  __isset = other290.__isset;
}
BatchRequestItem& BatchRequestItem::operator=(const BatchRequestItem& other291) {
  action = other291.action;
  request = other291.request;
  __isset = other291.__isset;
  return *this;
}

Result::~Result() throw() {
}


void Result::__set_getResult(const GetResult& val) {
  this->getResult = val;
__isset.getResult = true;
}

void Result::__set_putResult(const PutResult& val) {
  this->putResult = val;
__isset.putResult = true;
}

void Result::__set_incrementResult(const IncrementResult& val) {
  this->incrementResult = val;
__isset.incrementResult = true;
}

void Result::__set_removeResult(const RemoveResult& val) {
  this->removeResult = val;
__isset.removeResult = true;
}

const char* Result::ascii_fingerprint = "72343C47CF553176606BB0B28AD675A8";
const uint8_t Result::binary_fingerprint[16] = {0x72,0x34,0x3C,0x47,0xCF,0x55,0x31,0x76,0x60,0x6B,0xB0,0xB2,0x8A,0xD6,0x75,0xA8};

uint32_t Result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->getResult.read(iprot);
          this->__isset.getResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->putResult.read(iprot);
          this->__isset.putResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->incrementResult.read(iprot);
          this->__isset.incrementResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->removeResult.read(iprot);
          this->__isset.removeResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Result::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Result");

  if (this->__isset.getResult) {
    xfer += oprot->writeFieldBegin("getResult", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->getResult.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.putResult) {
    xfer += oprot->writeFieldBegin("putResult", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->putResult.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.incrementResult) {
    xfer += oprot->writeFieldBegin("incrementResult", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->incrementResult.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.removeResult) {
    xfer += oprot->writeFieldBegin("removeResult", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->removeResult.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Result &a, Result &b) {
  using ::std::swap;
  swap(a.getResult, b.getResult);
  swap(a.putResult, b.putResult);
  swap(a.incrementResult, b.incrementResult);
  swap(a.removeResult, b.removeResult);
  swap(a.__isset, b.__isset);
}

Result::Result(const Result& other292) {
  getResult = other292.getResult;
  putResult = other292.putResult;
  incrementResult = other292.incrementResult;
  removeResult = other292.removeResult;
  __isset = other292.__isset;
}
Result& Result::operator=(const Result& other293) {
  getResult = other293.getResult;
  putResult = other293.putResult;
  incrementResult = other293.incrementResult;
  removeResult = other293.removeResult;
  __isset = other293.__isset;
  return *this;
}

BatchResultItem::~BatchResultItem() throw() {
}


void BatchResultItem::__set_action(const BatchOp::type val) {
  this->action = val;
__isset.action = true;
}

void BatchResultItem::__set_success(const bool val) {
  this->success = val;
__isset.success = true;
}

void BatchResultItem::__set_result(const Result& val) {
  this->result = val;
__isset.result = true;
}

void BatchResultItem::__set_serviceException(const  ::ServiceException& val) {
  this->serviceException = val;
__isset.serviceException = true;
}

const char* BatchResultItem::ascii_fingerprint = "024E7BC953BC9ABAF0B17A9DDDC7C2B8";
const uint8_t BatchResultItem::binary_fingerprint[16] = {0x02,0x4E,0x7B,0xC9,0x53,0xBC,0x9A,0xBA,0xF0,0xB1,0x7A,0x9D,0xDD,0xC7,0xC2,0xB8};

uint32_t BatchResultItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast294;
          xfer += iprot->readI32(ecast294);
          this->action = (BatchOp::type)ecast294;
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result.read(iprot);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serviceException.read(iprot);
          this->__isset.serviceException = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BatchResultItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BatchResultItem");

  if (this->__isset.action) {
    xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->action);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->success);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.result) {
    xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->result.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.serviceException) {
    xfer += oprot->writeFieldBegin("serviceException", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->serviceException.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BatchResultItem &a, BatchResultItem &b) {
  using ::std::swap;
  swap(a.action, b.action);
  swap(a.success, b.success);
  swap(a.result, b.result);
  swap(a.serviceException, b.serviceException);
  swap(a.__isset, b.__isset);
}

BatchResultItem::BatchResultItem(const BatchResultItem& other295) {
  action = other295.action;
  success = other295.success;
  result = other295.result;
  serviceException = other295.serviceException;
  __isset = other295.__isset;
}
BatchResultItem& BatchResultItem::operator=(const BatchResultItem& other296) {
  action = other296.action;
  success = other296.success;
  result = other296.result;
  serviceException = other296.serviceException;
  __isset = other296.__isset;
  return *this;
}

BatchRequest::~BatchRequest() throw() {
}


void BatchRequest::__set_items(const std::vector<BatchRequestItem> & val) {
  this->items = val;
__isset.items = true;
}

const char* BatchRequest::ascii_fingerprint = "07601CAE9203BB2EC4B577B6715471AF";
const uint8_t BatchRequest::binary_fingerprint[16] = {0x07,0x60,0x1C,0xAE,0x92,0x03,0xBB,0x2E,0xC4,0xB5,0x77,0xB6,0x71,0x54,0x71,0xAF};

uint32_t BatchRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items.clear();
            uint32_t _size297;
            ::apache::thrift::protocol::TType _etype300;
            xfer += iprot->readListBegin(_etype300, _size297);
            this->items.resize(_size297);
            uint32_t _i301;
            for (_i301 = 0; _i301 < _size297; ++_i301)
            {
              xfer += this->items[_i301].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BatchRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BatchRequest");

  if (this->__isset.items) {
    xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items.size()));
      std::vector<BatchRequestItem> ::const_iterator _iter302;
      for (_iter302 = this->items.begin(); _iter302 != this->items.end(); ++_iter302)
      {
        xfer += (*_iter302).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BatchRequest &a, BatchRequest &b) {
  using ::std::swap;
  swap(a.items, b.items);
  swap(a.__isset, b.__isset);
}

BatchRequest::BatchRequest(const BatchRequest& other303) {
  items = other303.items;
  __isset = other303.__isset;
}
BatchRequest& BatchRequest::operator=(const BatchRequest& other304) {
  items = other304.items;
  __isset = other304.__isset;
  return *this;
}

BatchResult::~BatchResult() throw() {
}


void BatchResult::__set_items(const std::vector<BatchResultItem> & val) {
  this->items = val;
__isset.items = true;
}

const char* BatchResult::ascii_fingerprint = "95606B2EDAAAC3AF39A724DAF47525ED";
const uint8_t BatchResult::binary_fingerprint[16] = {0x95,0x60,0x6B,0x2E,0xDA,0xAA,0xC3,0xAF,0x39,0xA7,0x24,0xDA,0xF4,0x75,0x25,0xED};

uint32_t BatchResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items.clear();
            uint32_t _size305;
            ::apache::thrift::protocol::TType _etype308;
            xfer += iprot->readListBegin(_etype308, _size305);
            this->items.resize(_size305);
            uint32_t _i309;
            for (_i309 = 0; _i309 < _size305; ++_i309)
            {
              xfer += this->items[_i309].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BatchResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BatchResult");

  if (this->__isset.items) {
    xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items.size()));
      std::vector<BatchResultItem> ::const_iterator _iter310;
      for (_iter310 = this->items.begin(); _iter310 != this->items.end(); ++_iter310)
      {
        xfer += (*_iter310).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BatchResult &a, BatchResult &b) {
  using ::std::swap;
  swap(a.items, b.items);
  swap(a.__isset, b.__isset);
}

BatchResult::BatchResult(const BatchResult& other311) {
  items = other311.items;
  __isset = other311.__isset;
}
BatchResult& BatchResult::operator=(const BatchResult& other312) {
  items = other312.items;
  __isset = other312.__isset;
  return *this;
}

