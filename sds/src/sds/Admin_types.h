#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Admin_TYPES_H
#define Admin_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Errors_types.h"
#include "Common_types.h"
#include "Authentication_types.h"
#include "Table_types.h"




struct ClientMetricType {
  enum type {
    Letency = 1
  };
};

extern const std::map<int, const char*> _ClientMetricType_VALUES_TO_NAMES;

struct LatencyMetricType {
  enum type {
    ExecutionTime = 1
  };
};

extern const std::map<int, const char*> _LatencyMetricType_VALUES_TO_NAMES;

struct MetricKey {
  enum type {
    METER_METRIC_MIN = 0,
    READ_ALLOWED = 1,
    READ_THROTTLED = 2,
    WRITE_ALLOWED = 3,
    WRITE_THROTTLED = 4,
    ACTION_SUCCESS = 5,
    ACTION_CLIENT_ERROR = 6,
    ACTION_SYSTEM_ERROR = 7,
    METER_METRIC_MAX = 49,
    HISTOGRAM_METRIC_MIN = 50,
    CREATE_LATENCY = 51,
    DROP_LATENCY = 52,
    DESCRIBE_LATENCY = 53,
    ALTER_LATENCY = 54,
    ENABLE_LATENCY = 55,
    DISABLE_LATENCY = 56,
    METRICQUERY_LATENCY = 57,
    GET_LATENCY = 58,
    PUT_LATENCY = 59,
    INCREMENT_LATENCY = 60,
    DELETE_LATENCY = 61,
    SCAN_LATENCY = 62,
    BATCH_LATENCY = 63,
    HISTOGRAM_METRIC_MAX = 100
  };
};

extern const std::map<int, const char*> _MetricKey_VALUES_TO_NAMES;

struct MetricType {
  enum type {
    COUNT = 1,
    M1_RATE = 2,
    M5_RATE = 3,
    M15_RATE = 4,
    MEAN = 5,
    STDDEV = 6,
    P50 = 7,
    P75 = 8,
    P95 = 9,
    P98 = 10,
    P99 = 11
  };
};

extern const std::map<int, const char*> _MetricType_VALUES_TO_NAMES;

struct TimeSpanUnit {
  enum type {
    SECONDS = 1,
    MINUTES = 2,
    HOURS = 3
  };
};

extern const std::map<int, const char*> _TimeSpanUnit_VALUES_TO_NAMES;

class AppInfo;

class MetricData;

class ClientMetrics;

class MetricQueryRequest;

class TimeSeriesData;

typedef struct _AppInfo__isset {
  _AppInfo__isset() : appId(false), developerId(false), tableMappings(false), oauthAppMapping(false), appName(false) {}
  bool appId;
  bool developerId;
  bool tableMappings;
  bool oauthAppMapping;
  bool appName;
} _AppInfo__isset;

class AppInfo {
 public:

  static const char* ascii_fingerprint; // = "6D8F306A964C4BDF539401E2958D9B1E";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0x8F,0x30,0x6A,0x96,0x4C,0x4B,0xDF,0x53,0x94,0x01,0xE2,0x95,0x8D,0x9B,0x1E};

  AppInfo(const AppInfo&);
  AppInfo& operator=(const AppInfo&);
  AppInfo() : appId(), developerId(), appName() {
  }

  virtual ~AppInfo() throw();
  std::string appId;
  std::string developerId;
  std::map<std::string, std::string>  tableMappings;
  std::map<std::string, std::string>  oauthAppMapping;
  std::string appName;

  _AppInfo__isset __isset;

  void __set_appId(const std::string& val);

  void __set_developerId(const std::string& val);

  void __set_tableMappings(const std::map<std::string, std::string> & val);

  void __set_oauthAppMapping(const std::map<std::string, std::string> & val);

  void __set_appName(const std::string& val);

  bool operator == (const AppInfo & rhs) const
  {
    if (__isset.appId != rhs.__isset.appId)
      return false;
    else if (__isset.appId && !(appId == rhs.appId))
      return false;
    if (__isset.developerId != rhs.__isset.developerId)
      return false;
    else if (__isset.developerId && !(developerId == rhs.developerId))
      return false;
    if (__isset.tableMappings != rhs.__isset.tableMappings)
      return false;
    else if (__isset.tableMappings && !(tableMappings == rhs.tableMappings))
      return false;
    if (__isset.oauthAppMapping != rhs.__isset.oauthAppMapping)
      return false;
    else if (__isset.oauthAppMapping && !(oauthAppMapping == rhs.oauthAppMapping))
      return false;
    if (__isset.appName != rhs.__isset.appName)
      return false;
    else if (__isset.appName && !(appName == rhs.appName))
      return false;
    return true;
  }
  bool operator != (const AppInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AppInfo &a, AppInfo &b);

typedef struct _MetricData__isset {
  _MetricData__isset() : clientMetricType(false), metricName(false), value(false), timeStamp(false) {}
  bool clientMetricType;
  bool metricName;
  bool value;
  bool timeStamp;
} _MetricData__isset;

class MetricData {
 public:

  static const char* ascii_fingerprint; // = "B183281654BCB23EA940863D0970B940";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0x83,0x28,0x16,0x54,0xBC,0xB2,0x3E,0xA9,0x40,0x86,0x3D,0x09,0x70,0xB9,0x40};

  MetricData(const MetricData&);
  MetricData& operator=(const MetricData&);
  MetricData() : clientMetricType((ClientMetricType::type)0), metricName(), value(0), timeStamp(0) {
  }

  virtual ~MetricData() throw();
  ClientMetricType::type clientMetricType;
  std::string metricName;
  int64_t value;
  int64_t timeStamp;

  _MetricData__isset __isset;

  void __set_clientMetricType(const ClientMetricType::type val);

  void __set_metricName(const std::string& val);

  void __set_value(const int64_t val);

  void __set_timeStamp(const int64_t val);

  bool operator == (const MetricData & rhs) const
  {
    if (__isset.clientMetricType != rhs.__isset.clientMetricType)
      return false;
    else if (__isset.clientMetricType && !(clientMetricType == rhs.clientMetricType))
      return false;
    if (__isset.metricName != rhs.__isset.metricName)
      return false;
    else if (__isset.metricName && !(metricName == rhs.metricName))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    if (__isset.timeStamp != rhs.__isset.timeStamp)
      return false;
    else if (__isset.timeStamp && !(timeStamp == rhs.timeStamp))
      return false;
    return true;
  }
  bool operator != (const MetricData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetricData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MetricData &a, MetricData &b);

typedef struct _ClientMetrics__isset {
  _ClientMetrics__isset() : metricDataList(false) {}
  bool metricDataList;
} _ClientMetrics__isset;

class ClientMetrics {
 public:

  static const char* ascii_fingerprint; // = "007645D1A18B1AFACC5D3E90B2E12A76";
  static const uint8_t binary_fingerprint[16]; // = {0x00,0x76,0x45,0xD1,0xA1,0x8B,0x1A,0xFA,0xCC,0x5D,0x3E,0x90,0xB2,0xE1,0x2A,0x76};

  ClientMetrics(const ClientMetrics&);
  ClientMetrics& operator=(const ClientMetrics&);
  ClientMetrics() {
  }

  virtual ~ClientMetrics() throw();
  std::vector<MetricData>  metricDataList;

  _ClientMetrics__isset __isset;

  void __set_metricDataList(const std::vector<MetricData> & val);

  bool operator == (const ClientMetrics & rhs) const
  {
    if (__isset.metricDataList != rhs.__isset.metricDataList)
      return false;
    else if (__isset.metricDataList && !(metricDataList == rhs.metricDataList))
      return false;
    return true;
  }
  bool operator != (const ClientMetrics &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientMetrics & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ClientMetrics &a, ClientMetrics &b);

typedef struct _MetricQueryRequest__isset {
  _MetricQueryRequest__isset() : tableName(false), startTime(false), stopTime(false), metricKey(false), metricType(false), downsampleInterval(false), downsampleTimeUnit(false) {}
  bool tableName;
  bool startTime;
  bool stopTime;
  bool metricKey;
  bool metricType;
  bool downsampleInterval;
  bool downsampleTimeUnit;
} _MetricQueryRequest__isset;

class MetricQueryRequest {
 public:

  static const char* ascii_fingerprint; // = "76E386ECD3FBB7FF15AB8B381547AFAC";
  static const uint8_t binary_fingerprint[16]; // = {0x76,0xE3,0x86,0xEC,0xD3,0xFB,0xB7,0xFF,0x15,0xAB,0x8B,0x38,0x15,0x47,0xAF,0xAC};

  MetricQueryRequest(const MetricQueryRequest&);
  MetricQueryRequest& operator=(const MetricQueryRequest&);
  MetricQueryRequest() : tableName(), startTime(0), stopTime(0), metricKey((MetricKey::type)0), metricType((MetricType::type)0), downsampleInterval(0), downsampleTimeUnit((TimeSpanUnit::type)0) {
  }

  virtual ~MetricQueryRequest() throw();
  std::string tableName;
  int64_t startTime;
  int64_t stopTime;
  MetricKey::type metricKey;
  MetricType::type metricType;
  int32_t downsampleInterval;
  TimeSpanUnit::type downsampleTimeUnit;

  _MetricQueryRequest__isset __isset;

  void __set_tableName(const std::string& val);

  void __set_startTime(const int64_t val);

  void __set_stopTime(const int64_t val);

  void __set_metricKey(const MetricKey::type val);

  void __set_metricType(const MetricType::type val);

  void __set_downsampleInterval(const int32_t val);

  void __set_downsampleTimeUnit(const TimeSpanUnit::type val);

  bool operator == (const MetricQueryRequest & rhs) const
  {
    if (__isset.tableName != rhs.__isset.tableName)
      return false;
    else if (__isset.tableName && !(tableName == rhs.tableName))
      return false;
    if (__isset.startTime != rhs.__isset.startTime)
      return false;
    else if (__isset.startTime && !(startTime == rhs.startTime))
      return false;
    if (__isset.stopTime != rhs.__isset.stopTime)
      return false;
    else if (__isset.stopTime && !(stopTime == rhs.stopTime))
      return false;
    if (__isset.metricKey != rhs.__isset.metricKey)
      return false;
    else if (__isset.metricKey && !(metricKey == rhs.metricKey))
      return false;
    if (__isset.metricType != rhs.__isset.metricType)
      return false;
    else if (__isset.metricType && !(metricType == rhs.metricType))
      return false;
    if (__isset.downsampleInterval != rhs.__isset.downsampleInterval)
      return false;
    else if (__isset.downsampleInterval && !(downsampleInterval == rhs.downsampleInterval))
      return false;
    if (__isset.downsampleTimeUnit != rhs.__isset.downsampleTimeUnit)
      return false;
    else if (__isset.downsampleTimeUnit && !(downsampleTimeUnit == rhs.downsampleTimeUnit))
      return false;
    return true;
  }
  bool operator != (const MetricQueryRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetricQueryRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MetricQueryRequest &a, MetricQueryRequest &b);

typedef struct _TimeSeriesData__isset {
  _TimeSeriesData__isset() : tableName(false), metricKey(false), metricType(false), data(false) {}
  bool tableName;
  bool metricKey;
  bool metricType;
  bool data;
} _TimeSeriesData__isset;

class TimeSeriesData {
 public:

  static const char* ascii_fingerprint; // = "0B5E13910C6A7DAB3552DF36612FC741";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0x5E,0x13,0x91,0x0C,0x6A,0x7D,0xAB,0x35,0x52,0xDF,0x36,0x61,0x2F,0xC7,0x41};

  TimeSeriesData(const TimeSeriesData&);
  TimeSeriesData& operator=(const TimeSeriesData&);
  TimeSeriesData() : tableName(), metricKey((MetricKey::type)0), metricType((MetricType::type)0) {
  }

  virtual ~TimeSeriesData() throw();
  std::string tableName;
  MetricKey::type metricKey;
  MetricType::type metricType;
  std::map<int64_t, double>  data;

  _TimeSeriesData__isset __isset;

  void __set_tableName(const std::string& val);

  void __set_metricKey(const MetricKey::type val);

  void __set_metricType(const MetricType::type val);

  void __set_data(const std::map<int64_t, double> & val);

  bool operator == (const TimeSeriesData & rhs) const
  {
    if (__isset.tableName != rhs.__isset.tableName)
      return false;
    else if (__isset.tableName && !(tableName == rhs.tableName))
      return false;
    if (__isset.metricKey != rhs.__isset.metricKey)
      return false;
    else if (__isset.metricKey && !(metricKey == rhs.metricKey))
      return false;
    if (__isset.metricType != rhs.__isset.metricType)
      return false;
    else if (__isset.metricType && !(metricType == rhs.metricType))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TimeSeriesData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimeSeriesData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TimeSeriesData &a, TimeSeriesData &b);



#endif
