#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AuthService_H
#define AuthService_H

#include <thrift/TDispatchProcessor.h>
#include "Authentication_types.h"
#include "BaseService.h"



class AuthServiceIf : virtual public  ::BaseServiceIf {
 public:
  virtual ~AuthServiceIf() {}
  virtual void createCredential(Credential& _return, const OAuthInfo& oauthInfo) = 0;
};

class AuthServiceIfFactory : virtual public  ::BaseServiceIfFactory {
 public:
  typedef AuthServiceIf Handler;

  virtual ~AuthServiceIfFactory() {}

  virtual AuthServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::BaseServiceIf* /* handler */) = 0;
};

class AuthServiceIfSingletonFactory : virtual public AuthServiceIfFactory {
 public:
  AuthServiceIfSingletonFactory(const boost::shared_ptr<AuthServiceIf>& iface) : iface_(iface) {}
  virtual ~AuthServiceIfSingletonFactory() {}

  virtual AuthServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::BaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AuthServiceIf> iface_;
};

class AuthServiceNull : virtual public AuthServiceIf , virtual public  ::BaseServiceNull {
 public:
  virtual ~AuthServiceNull() {}
  void createCredential(Credential& /* _return */, const OAuthInfo& /* oauthInfo */) {
    return;
  }
};

typedef struct _AuthService_createCredential_args__isset {
  _AuthService_createCredential_args__isset() : oauthInfo(false) {}
  bool oauthInfo;
} _AuthService_createCredential_args__isset;

class AuthService_createCredential_args {
 public:

  static const char* ascii_fingerprint; // = "A6BB6B1E896F7009C9587986A6DEB7E5";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0xBB,0x6B,0x1E,0x89,0x6F,0x70,0x09,0xC9,0x58,0x79,0x86,0xA6,0xDE,0xB7,0xE5};

  AuthService_createCredential_args(const AuthService_createCredential_args&);
  AuthService_createCredential_args& operator=(const AuthService_createCredential_args&);
  AuthService_createCredential_args() {
  }

  virtual ~AuthService_createCredential_args() throw();
  OAuthInfo oauthInfo;

  _AuthService_createCredential_args__isset __isset;

  void __set_oauthInfo(const OAuthInfo& val);

  bool operator == (const AuthService_createCredential_args & rhs) const
  {
    if (!(oauthInfo == rhs.oauthInfo))
      return false;
    return true;
  }
  bool operator != (const AuthService_createCredential_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_createCredential_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthService_createCredential_pargs {
 public:

  static const char* ascii_fingerprint; // = "A6BB6B1E896F7009C9587986A6DEB7E5";
  static const uint8_t binary_fingerprint[16]; // = {0xA6,0xBB,0x6B,0x1E,0x89,0x6F,0x70,0x09,0xC9,0x58,0x79,0x86,0xA6,0xDE,0xB7,0xE5};


  virtual ~AuthService_createCredential_pargs() throw();
  const OAuthInfo* oauthInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_createCredential_result__isset {
  _AuthService_createCredential_result__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AuthService_createCredential_result__isset;

class AuthService_createCredential_result {
 public:

  static const char* ascii_fingerprint; // = "B67E2AFF8986C92C519D7868C416287F";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x7E,0x2A,0xFF,0x89,0x86,0xC9,0x2C,0x51,0x9D,0x78,0x68,0xC4,0x16,0x28,0x7F};

  AuthService_createCredential_result(const AuthService_createCredential_result&);
  AuthService_createCredential_result& operator=(const AuthService_createCredential_result&);
  AuthService_createCredential_result() {
  }

  virtual ~AuthService_createCredential_result() throw();
  Credential success;
   ::ServiceException se;

  _AuthService_createCredential_result__isset __isset;

  void __set_success(const Credential& val);

  void __set_se(const  ::ServiceException& val);

  bool operator == (const AuthService_createCredential_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AuthService_createCredential_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_createCredential_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_createCredential_presult__isset {
  _AuthService_createCredential_presult__isset() : success(false), se(false) {}
  bool success;
  bool se;
} _AuthService_createCredential_presult__isset;

class AuthService_createCredential_presult {
 public:

  static const char* ascii_fingerprint; // = "B67E2AFF8986C92C519D7868C416287F";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x7E,0x2A,0xFF,0x89,0x86,0xC9,0x2C,0x51,0x9D,0x78,0x68,0xC4,0x16,0x28,0x7F};


  virtual ~AuthService_createCredential_presult() throw();
  Credential* success;
   ::ServiceException se;

  _AuthService_createCredential_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AuthServiceClient : virtual public AuthServiceIf, public  ::BaseServiceClient {
 public:
  AuthServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::BaseServiceClient(prot, prot) {}
  AuthServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::BaseServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createCredential(Credential& _return, const OAuthInfo& oauthInfo);
  void send_createCredential(const OAuthInfo& oauthInfo);
  void recv_createCredential(Credential& _return);
};

class AuthServiceProcessor : public  ::BaseServiceProcessor {
 protected:
  boost::shared_ptr<AuthServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AuthServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createCredential(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AuthServiceProcessor(boost::shared_ptr<AuthServiceIf> iface) :
     ::BaseServiceProcessor(iface),
    iface_(iface) {
    processMap_["createCredential"] = &AuthServiceProcessor::process_createCredential;
  }

  virtual ~AuthServiceProcessor() {}
};

class AuthServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AuthServiceProcessorFactory(const ::boost::shared_ptr< AuthServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AuthServiceIfFactory > handlerFactory_;
};

class AuthServiceMultiface : virtual public AuthServiceIf, public  ::BaseServiceMultiface {
 public:
  AuthServiceMultiface(std::vector<boost::shared_ptr<AuthServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<AuthServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::BaseServiceMultiface::add(*iter);
    }
  }
  virtual ~AuthServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AuthServiceIf> > ifaces_;
  AuthServiceMultiface() {}
  void add(boost::shared_ptr<AuthServiceIf> iface) {
     ::BaseServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void createCredential(Credential& _return, const OAuthInfo& oauthInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createCredential(_return, oauthInfo);
    }
    ifaces_[i]->createCredential(_return, oauthInfo);
    return;
  }

};



#endif
