/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Admin_types.h"

#include <algorithm>



int _kClientMetricTypeValues[] = {
  ClientMetricType::Letency
};
const char* _kClientMetricTypeNames[] = {
  "Letency"
};
const std::map<int, const char*> _ClientMetricType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kClientMetricTypeValues, _kClientMetricTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLatencyMetricTypeValues[] = {
  LatencyMetricType::ExecutionTime
};
const char* _kLatencyMetricTypeNames[] = {
  "ExecutionTime"
};
const std::map<int, const char*> _LatencyMetricType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kLatencyMetricTypeValues, _kLatencyMetricTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMetricKeyValues[] = {
  MetricKey::METER_METRIC_MIN,
  MetricKey::READ_ALLOWED,
  MetricKey::READ_THROTTLED,
  MetricKey::WRITE_ALLOWED,
  MetricKey::WRITE_THROTTLED,
  MetricKey::ACTION_SUCCESS,
  MetricKey::ACTION_CLIENT_ERROR,
  MetricKey::ACTION_SYSTEM_ERROR,
  MetricKey::METER_METRIC_MAX,
  MetricKey::HISTOGRAM_METRIC_MIN,
  MetricKey::CREATE_LATENCY,
  MetricKey::DROP_LATENCY,
  MetricKey::DESCRIBE_LATENCY,
  MetricKey::ALTER_LATENCY,
  MetricKey::ENABLE_LATENCY,
  MetricKey::DISABLE_LATENCY,
  MetricKey::METRICQUERY_LATENCY,
  MetricKey::GET_LATENCY,
  MetricKey::PUT_LATENCY,
  MetricKey::INCREMENT_LATENCY,
  MetricKey::DELETE_LATENCY,
  MetricKey::SCAN_LATENCY,
  MetricKey::BATCH_LATENCY,
  MetricKey::HISTOGRAM_METRIC_MAX
};
const char* _kMetricKeyNames[] = {
  "METER_METRIC_MIN",
  "READ_ALLOWED",
  "READ_THROTTLED",
  "WRITE_ALLOWED",
  "WRITE_THROTTLED",
  "ACTION_SUCCESS",
  "ACTION_CLIENT_ERROR",
  "ACTION_SYSTEM_ERROR",
  "METER_METRIC_MAX",
  "HISTOGRAM_METRIC_MIN",
  "CREATE_LATENCY",
  "DROP_LATENCY",
  "DESCRIBE_LATENCY",
  "ALTER_LATENCY",
  "ENABLE_LATENCY",
  "DISABLE_LATENCY",
  "METRICQUERY_LATENCY",
  "GET_LATENCY",
  "PUT_LATENCY",
  "INCREMENT_LATENCY",
  "DELETE_LATENCY",
  "SCAN_LATENCY",
  "BATCH_LATENCY",
  "HISTOGRAM_METRIC_MAX"
};
const std::map<int, const char*> _MetricKey_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(24, _kMetricKeyValues, _kMetricKeyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMetricTypeValues[] = {
  MetricType::COUNT,
  MetricType::M1_RATE,
  MetricType::M5_RATE,
  MetricType::M15_RATE,
  MetricType::MEAN,
  MetricType::STDDEV,
  MetricType::P50,
  MetricType::P75,
  MetricType::P95,
  MetricType::P98,
  MetricType::P99
};
const char* _kMetricTypeNames[] = {
  "COUNT",
  "M1_RATE",
  "M5_RATE",
  "M15_RATE",
  "MEAN",
  "STDDEV",
  "P50",
  "P75",
  "P95",
  "P98",
  "P99"
};
const std::map<int, const char*> _MetricType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kMetricTypeValues, _kMetricTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTimeSpanUnitValues[] = {
  TimeSpanUnit::SECONDS,
  TimeSpanUnit::MINUTES,
  TimeSpanUnit::HOURS
};
const char* _kTimeSpanUnitNames[] = {
  "SECONDS",
  "MINUTES",
  "HOURS"
};
const std::map<int, const char*> _TimeSpanUnit_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTimeSpanUnitValues, _kTimeSpanUnitNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


AppInfo::~AppInfo() throw() {
}


void AppInfo::__set_appId(const std::string& val) {
  this->appId = val;
__isset.appId = true;
}

void AppInfo::__set_developerId(const std::string& val) {
  this->developerId = val;
__isset.developerId = true;
}

void AppInfo::__set_tableMappings(const std::map<std::string, std::string> & val) {
  this->tableMappings = val;
__isset.tableMappings = true;
}

void AppInfo::__set_oauthAppMapping(const std::map<std::string, std::string> & val) {
  this->oauthAppMapping = val;
__isset.oauthAppMapping = true;
}

void AppInfo::__set_appName(const std::string& val) {
  this->appName = val;
__isset.appName = true;
}

const char* AppInfo::ascii_fingerprint = "6D8F306A964C4BDF539401E2958D9B1E";
const uint8_t AppInfo::binary_fingerprint[16] = {0x6D,0x8F,0x30,0x6A,0x96,0x4C,0x4B,0xDF,0x53,0x94,0x01,0xE2,0x95,0x8D,0x9B,0x1E};

uint32_t AppInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appId);
          this->__isset.appId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->developerId);
          this->__isset.developerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->tableMappings.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::string& _val6 = this->tableMappings[_key5];
              xfer += iprot->readString(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.tableMappings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->oauthAppMapping.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _ktype8;
            ::apache::thrift::protocol::TType _vtype9;
            xfer += iprot->readMapBegin(_ktype8, _vtype9, _size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              std::string _key12;
              xfer += iprot->readString(_key12);
              std::string& _val13 = this->oauthAppMapping[_key12];
              xfer += iprot->readString(_val13);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.oauthAppMapping = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appName);
          this->__isset.appName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AppInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("AppInfo");

  if (this->__isset.appId) {
    xfer += oprot->writeFieldBegin("appId", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->appId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.developerId) {
    xfer += oprot->writeFieldBegin("developerId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->developerId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tableMappings) {
    xfer += oprot->writeFieldBegin("tableMappings", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tableMappings.size()));
      std::map<std::string, std::string> ::const_iterator _iter14;
      for (_iter14 = this->tableMappings.begin(); _iter14 != this->tableMappings.end(); ++_iter14)
      {
        xfer += oprot->writeString(_iter14->first);
        xfer += oprot->writeString(_iter14->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oauthAppMapping) {
    xfer += oprot->writeFieldBegin("oauthAppMapping", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->oauthAppMapping.size()));
      std::map<std::string, std::string> ::const_iterator _iter15;
      for (_iter15 = this->oauthAppMapping.begin(); _iter15 != this->oauthAppMapping.end(); ++_iter15)
      {
        xfer += oprot->writeString(_iter15->first);
        xfer += oprot->writeString(_iter15->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.appName) {
    xfer += oprot->writeFieldBegin("appName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->appName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(AppInfo &a, AppInfo &b) {
  using ::std::swap;
  swap(a.appId, b.appId);
  swap(a.developerId, b.developerId);
  swap(a.tableMappings, b.tableMappings);
  swap(a.oauthAppMapping, b.oauthAppMapping);
  swap(a.appName, b.appName);
  swap(a.__isset, b.__isset);
}

AppInfo::AppInfo(const AppInfo& other16) {
  appId = other16.appId;
  developerId = other16.developerId;
  tableMappings = other16.tableMappings;
  oauthAppMapping = other16.oauthAppMapping;
  appName = other16.appName;
  __isset = other16.__isset;
}
AppInfo& AppInfo::operator=(const AppInfo& other17) {
  appId = other17.appId;
  developerId = other17.developerId;
  tableMappings = other17.tableMappings;
  oauthAppMapping = other17.oauthAppMapping;
  appName = other17.appName;
  __isset = other17.__isset;
  return *this;
}

MetricData::~MetricData() throw() {
}


void MetricData::__set_clientMetricType(const ClientMetricType::type val) {
  this->clientMetricType = val;
__isset.clientMetricType = true;
}

void MetricData::__set_metricName(const std::string& val) {
  this->metricName = val;
__isset.metricName = true;
}

void MetricData::__set_value(const int64_t val) {
  this->value = val;
__isset.value = true;
}

void MetricData::__set_timeStamp(const int64_t val) {
  this->timeStamp = val;
__isset.timeStamp = true;
}

const char* MetricData::ascii_fingerprint = "B183281654BCB23EA940863D0970B940";
const uint8_t MetricData::binary_fingerprint[16] = {0xB1,0x83,0x28,0x16,0x54,0xBC,0xB2,0x3E,0xA9,0x40,0x86,0x3D,0x09,0x70,0xB9,0x40};

uint32_t MetricData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->clientMetricType = (ClientMetricType::type)ecast18;
          this->__isset.clientMetricType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->metricName);
          this->__isset.metricName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeStamp);
          this->__isset.timeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetricData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MetricData");

  if (this->__isset.clientMetricType) {
    xfer += oprot->writeFieldBegin("clientMetricType", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->clientMetricType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.metricName) {
    xfer += oprot->writeFieldBegin("metricName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->metricName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timeStamp) {
    xfer += oprot->writeFieldBegin("timeStamp", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->timeStamp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MetricData &a, MetricData &b) {
  using ::std::swap;
  swap(a.clientMetricType, b.clientMetricType);
  swap(a.metricName, b.metricName);
  swap(a.value, b.value);
  swap(a.timeStamp, b.timeStamp);
  swap(a.__isset, b.__isset);
}

MetricData::MetricData(const MetricData& other19) {
  clientMetricType = other19.clientMetricType;
  metricName = other19.metricName;
  value = other19.value;
  timeStamp = other19.timeStamp;
  __isset = other19.__isset;
}
MetricData& MetricData::operator=(const MetricData& other20) {
  clientMetricType = other20.clientMetricType;
  metricName = other20.metricName;
  value = other20.value;
  timeStamp = other20.timeStamp;
  __isset = other20.__isset;
  return *this;
}

ClientMetrics::~ClientMetrics() throw() {
}


void ClientMetrics::__set_metricDataList(const std::vector<MetricData> & val) {
  this->metricDataList = val;
__isset.metricDataList = true;
}

const char* ClientMetrics::ascii_fingerprint = "007645D1A18B1AFACC5D3E90B2E12A76";
const uint8_t ClientMetrics::binary_fingerprint[16] = {0x00,0x76,0x45,0xD1,0xA1,0x8B,0x1A,0xFA,0xCC,0x5D,0x3E,0x90,0xB2,0xE1,0x2A,0x76};

uint32_t ClientMetrics::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->metricDataList.clear();
            uint32_t _size21;
            ::apache::thrift::protocol::TType _etype24;
            xfer += iprot->readListBegin(_etype24, _size21);
            this->metricDataList.resize(_size21);
            uint32_t _i25;
            for (_i25 = 0; _i25 < _size21; ++_i25)
            {
              xfer += this->metricDataList[_i25].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.metricDataList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ClientMetrics::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ClientMetrics");

  if (this->__isset.metricDataList) {
    xfer += oprot->writeFieldBegin("metricDataList", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->metricDataList.size()));
      std::vector<MetricData> ::const_iterator _iter26;
      for (_iter26 = this->metricDataList.begin(); _iter26 != this->metricDataList.end(); ++_iter26)
      {
        xfer += (*_iter26).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ClientMetrics &a, ClientMetrics &b) {
  using ::std::swap;
  swap(a.metricDataList, b.metricDataList);
  swap(a.__isset, b.__isset);
}

ClientMetrics::ClientMetrics(const ClientMetrics& other27) {
  metricDataList = other27.metricDataList;
  __isset = other27.__isset;
}
ClientMetrics& ClientMetrics::operator=(const ClientMetrics& other28) {
  metricDataList = other28.metricDataList;
  __isset = other28.__isset;
  return *this;
}

MetricQueryRequest::~MetricQueryRequest() throw() {
}


void MetricQueryRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
__isset.tableName = true;
}

void MetricQueryRequest::__set_startTime(const int64_t val) {
  this->startTime = val;
__isset.startTime = true;
}

void MetricQueryRequest::__set_stopTime(const int64_t val) {
  this->stopTime = val;
__isset.stopTime = true;
}

void MetricQueryRequest::__set_metricKey(const MetricKey::type val) {
  this->metricKey = val;
__isset.metricKey = true;
}

void MetricQueryRequest::__set_metricType(const MetricType::type val) {
  this->metricType = val;
__isset.metricType = true;
}

void MetricQueryRequest::__set_downsampleInterval(const int32_t val) {
  this->downsampleInterval = val;
__isset.downsampleInterval = true;
}

void MetricQueryRequest::__set_downsampleTimeUnit(const TimeSpanUnit::type val) {
  this->downsampleTimeUnit = val;
__isset.downsampleTimeUnit = true;
}

const char* MetricQueryRequest::ascii_fingerprint = "76E386ECD3FBB7FF15AB8B381547AFAC";
const uint8_t MetricQueryRequest::binary_fingerprint[16] = {0x76,0xE3,0x86,0xEC,0xD3,0xFB,0xB7,0xFF,0x15,0xAB,0x8B,0x38,0x15,0x47,0xAF,0xAC};

uint32_t MetricQueryRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->stopTime);
          this->__isset.stopTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast29;
          xfer += iprot->readI32(ecast29);
          this->metricKey = (MetricKey::type)ecast29;
          this->__isset.metricKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast30;
          xfer += iprot->readI32(ecast30);
          this->metricType = (MetricType::type)ecast30;
          this->__isset.metricType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->downsampleInterval);
          this->__isset.downsampleInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast31;
          xfer += iprot->readI32(ecast31);
          this->downsampleTimeUnit = (TimeSpanUnit::type)ecast31;
          this->__isset.downsampleTimeUnit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetricQueryRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MetricQueryRequest");

  if (this->__isset.tableName) {
    xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->tableName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startTime) {
    xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->startTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stopTime) {
    xfer += oprot->writeFieldBegin("stopTime", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->stopTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.metricKey) {
    xfer += oprot->writeFieldBegin("metricKey", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->metricKey);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.metricType) {
    xfer += oprot->writeFieldBegin("metricType", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->metricType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.downsampleInterval) {
    xfer += oprot->writeFieldBegin("downsampleInterval", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->downsampleInterval);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.downsampleTimeUnit) {
    xfer += oprot->writeFieldBegin("downsampleTimeUnit", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->downsampleTimeUnit);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MetricQueryRequest &a, MetricQueryRequest &b) {
  using ::std::swap;
  swap(a.tableName, b.tableName);
  swap(a.startTime, b.startTime);
  swap(a.stopTime, b.stopTime);
  swap(a.metricKey, b.metricKey);
  swap(a.metricType, b.metricType);
  swap(a.downsampleInterval, b.downsampleInterval);
  swap(a.downsampleTimeUnit, b.downsampleTimeUnit);
  swap(a.__isset, b.__isset);
}

MetricQueryRequest::MetricQueryRequest(const MetricQueryRequest& other32) {
  tableName = other32.tableName;
  startTime = other32.startTime;
  stopTime = other32.stopTime;
  metricKey = other32.metricKey;
  metricType = other32.metricType;
  downsampleInterval = other32.downsampleInterval;
  downsampleTimeUnit = other32.downsampleTimeUnit;
  __isset = other32.__isset;
}
MetricQueryRequest& MetricQueryRequest::operator=(const MetricQueryRequest& other33) {
  tableName = other33.tableName;
  startTime = other33.startTime;
  stopTime = other33.stopTime;
  metricKey = other33.metricKey;
  metricType = other33.metricType;
  downsampleInterval = other33.downsampleInterval;
  downsampleTimeUnit = other33.downsampleTimeUnit;
  __isset = other33.__isset;
  return *this;
}

TimeSeriesData::~TimeSeriesData() throw() {
}


void TimeSeriesData::__set_tableName(const std::string& val) {
  this->tableName = val;
__isset.tableName = true;
}

void TimeSeriesData::__set_metricKey(const MetricKey::type val) {
  this->metricKey = val;
__isset.metricKey = true;
}

void TimeSeriesData::__set_metricType(const MetricType::type val) {
  this->metricType = val;
__isset.metricType = true;
}

void TimeSeriesData::__set_data(const std::map<int64_t, double> & val) {
  this->data = val;
__isset.data = true;
}

const char* TimeSeriesData::ascii_fingerprint = "0B5E13910C6A7DAB3552DF36612FC741";
const uint8_t TimeSeriesData::binary_fingerprint[16] = {0x0B,0x5E,0x13,0x91,0x0C,0x6A,0x7D,0xAB,0x35,0x52,0xDF,0x36,0x61,0x2F,0xC7,0x41};

uint32_t TimeSeriesData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast34;
          xfer += iprot->readI32(ecast34);
          this->metricKey = (MetricKey::type)ecast34;
          this->__isset.metricKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast35;
          xfer += iprot->readI32(ecast35);
          this->metricType = (MetricType::type)ecast35;
          this->__isset.metricType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->data.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _ktype37;
            ::apache::thrift::protocol::TType _vtype38;
            xfer += iprot->readMapBegin(_ktype37, _vtype38, _size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              int64_t _key41;
              xfer += iprot->readI64(_key41);
              double& _val42 = this->data[_key41];
              xfer += iprot->readDouble(_val42);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimeSeriesData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TimeSeriesData");

  if (this->__isset.tableName) {
    xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->tableName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.metricKey) {
    xfer += oprot->writeFieldBegin("metricKey", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->metricKey);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.metricType) {
    xfer += oprot->writeFieldBegin("metricType", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->metricType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->data.size()));
      std::map<int64_t, double> ::const_iterator _iter43;
      for (_iter43 = this->data.begin(); _iter43 != this->data.end(); ++_iter43)
      {
        xfer += oprot->writeI64(_iter43->first);
        xfer += oprot->writeDouble(_iter43->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TimeSeriesData &a, TimeSeriesData &b) {
  using ::std::swap;
  swap(a.tableName, b.tableName);
  swap(a.metricKey, b.metricKey);
  swap(a.metricType, b.metricType);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

TimeSeriesData::TimeSeriesData(const TimeSeriesData& other44) {
  tableName = other44.tableName;
  metricKey = other44.metricKey;
  metricType = other44.metricType;
  data = other44.data;
  __isset = other44.__isset;
}
TimeSeriesData& TimeSeriesData::operator=(const TimeSeriesData& other45) {
  tableName = other45.tableName;
  metricKey = other45.metricKey;
  metricType = other45.metricType;
  data = other45.data;
  __isset = other45.__isset;
  return *this;
}

