#include "../client/undefine.h"
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SLFile_TYPES_H
#define SLFile_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Table_types.h"




struct SLFileType {
  enum type {
    DATUM_MAP = 1,
    RC_BASIC = 2
  };
};

extern const std::map<int, const char*> _SLFileType_VALUES_TO_NAMES;

class DatumMapMeta;

class RCBasicMeta;

class RCBasicRowGroupHeader;

class SLFileMeta;

class DatumMapRecord;

class ValueList;

class DatumMap;

typedef struct _DatumMapMeta__isset {
  _DatumMapMeta__isset() : keyIdMap(false) {}
  bool keyIdMap;
} _DatumMapMeta__isset;

class DatumMapMeta {
 public:

  static const char* ascii_fingerprint; // = "6C4518B8E73BE9BDC44CA4D526E52979";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0x45,0x18,0xB8,0xE7,0x3B,0xE9,0xBD,0xC4,0x4C,0xA4,0xD5,0x26,0xE5,0x29,0x79};

  DatumMapMeta(const DatumMapMeta&);
  DatumMapMeta& operator=(const DatumMapMeta&);
  DatumMapMeta() {
  }

  virtual ~DatumMapMeta() throw();
  std::map<int16_t, std::string>  keyIdMap;

  _DatumMapMeta__isset __isset;

  void __set_keyIdMap(const std::map<int16_t, std::string> & val);

  bool operator == (const DatumMapMeta & rhs) const
  {
    if (__isset.keyIdMap != rhs.__isset.keyIdMap)
      return false;
    else if (__isset.keyIdMap && !(keyIdMap == rhs.keyIdMap))
      return false;
    return true;
  }
  bool operator != (const DatumMapMeta &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatumMapMeta & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DatumMapMeta &a, DatumMapMeta &b);

typedef struct _RCBasicMeta__isset {
  _RCBasicMeta__isset() : keys(false), types(false) {}
  bool keys;
  bool types;
} _RCBasicMeta__isset;

class RCBasicMeta {
 public:

  static const char* ascii_fingerprint; // = "B43F647ACF985E21BBDB79C4092CE14F";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0x3F,0x64,0x7A,0xCF,0x98,0x5E,0x21,0xBB,0xDB,0x79,0xC4,0x09,0x2C,0xE1,0x4F};

  RCBasicMeta(const RCBasicMeta&);
  RCBasicMeta& operator=(const RCBasicMeta&);
  RCBasicMeta() {
  }

  virtual ~RCBasicMeta() throw();
  std::vector<std::string>  keys;
  std::map<std::string,  ::DataType::type>  types;

  _RCBasicMeta__isset __isset;

  void __set_keys(const std::vector<std::string> & val);

  void __set_types(const std::map<std::string,  ::DataType::type> & val);

  bool operator == (const RCBasicMeta & rhs) const
  {
    if (__isset.keys != rhs.__isset.keys)
      return false;
    else if (__isset.keys && !(keys == rhs.keys))
      return false;
    if (__isset.types != rhs.__isset.types)
      return false;
    else if (__isset.types && !(types == rhs.types))
      return false;
    return true;
  }
  bool operator != (const RCBasicMeta &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RCBasicMeta & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RCBasicMeta &a, RCBasicMeta &b);

typedef struct _RCBasicRowGroupHeader__isset {
  _RCBasicRowGroupHeader__isset() : count(false), offset(false) {}
  bool count;
  bool offset;
} _RCBasicRowGroupHeader__isset;

class RCBasicRowGroupHeader {
 public:

  static const char* ascii_fingerprint; // = "D5A2785771F7F0E07CEBCBC61182541C";
  static const uint8_t binary_fingerprint[16]; // = {0xD5,0xA2,0x78,0x57,0x71,0xF7,0xF0,0xE0,0x7C,0xEB,0xCB,0xC6,0x11,0x82,0x54,0x1C};

  RCBasicRowGroupHeader(const RCBasicRowGroupHeader&);
  RCBasicRowGroupHeader& operator=(const RCBasicRowGroupHeader&);
  RCBasicRowGroupHeader() : count(0) {
  }

  virtual ~RCBasicRowGroupHeader() throw();
  int32_t count;
  std::vector<int32_t>  offset;

  _RCBasicRowGroupHeader__isset __isset;

  void __set_count(const int32_t val);

  void __set_offset(const std::vector<int32_t> & val);

  bool operator == (const RCBasicRowGroupHeader & rhs) const
  {
    if (__isset.count != rhs.__isset.count)
      return false;
    else if (__isset.count && !(count == rhs.count))
      return false;
    if (__isset.offset != rhs.__isset.offset)
      return false;
    else if (__isset.offset && !(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const RCBasicRowGroupHeader &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RCBasicRowGroupHeader & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RCBasicRowGroupHeader &a, RCBasicRowGroupHeader &b);

typedef struct _SLFileMeta__isset {
  _SLFileMeta__isset() : type(false), datumMapMeta(false), rcBasicMeta(false) {}
  bool type;
  bool datumMapMeta;
  bool rcBasicMeta;
} _SLFileMeta__isset;

class SLFileMeta {
 public:

  static const char* ascii_fingerprint; // = "FE28C3EEEE40A69C63BC3541E3C3BF26";
  static const uint8_t binary_fingerprint[16]; // = {0xFE,0x28,0xC3,0xEE,0xEE,0x40,0xA6,0x9C,0x63,0xBC,0x35,0x41,0xE3,0xC3,0xBF,0x26};

  SLFileMeta(const SLFileMeta&);
  SLFileMeta& operator=(const SLFileMeta&);
  SLFileMeta() : type((SLFileType::type)0) {
  }

  virtual ~SLFileMeta() throw();
  SLFileType::type type;
  DatumMapMeta datumMapMeta;
  RCBasicMeta rcBasicMeta;

  _SLFileMeta__isset __isset;

  void __set_type(const SLFileType::type val);

  void __set_datumMapMeta(const DatumMapMeta& val);

  void __set_rcBasicMeta(const RCBasicMeta& val);

  bool operator == (const SLFileMeta & rhs) const
  {
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.datumMapMeta != rhs.__isset.datumMapMeta)
      return false;
    else if (__isset.datumMapMeta && !(datumMapMeta == rhs.datumMapMeta))
      return false;
    if (__isset.rcBasicMeta != rhs.__isset.rcBasicMeta)
      return false;
    else if (__isset.rcBasicMeta && !(rcBasicMeta == rhs.rcBasicMeta))
      return false;
    return true;
  }
  bool operator != (const SLFileMeta &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SLFileMeta & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SLFileMeta &a, SLFileMeta &b);

typedef struct _DatumMapRecord__isset {
  _DatumMapRecord__isset() : data(false), keyIdMap(false) {}
  bool data;
  bool keyIdMap;
} _DatumMapRecord__isset;

class DatumMapRecord {
 public:

  static const char* ascii_fingerprint; // = "A105EC95A6DCCDED3DC2D75EDF509AA4";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0x05,0xEC,0x95,0xA6,0xDC,0xCD,0xED,0x3D,0xC2,0xD7,0x5E,0xDF,0x50,0x9A,0xA4};

  DatumMapRecord(const DatumMapRecord&);
  DatumMapRecord& operator=(const DatumMapRecord&);
  DatumMapRecord() {
  }

  virtual ~DatumMapRecord() throw();
  std::map<int16_t,  ::Datum>  data;
  std::map<int16_t, std::string>  keyIdMap;

  _DatumMapRecord__isset __isset;

  void __set_data(const std::map<int16_t,  ::Datum> & val);

  void __set_keyIdMap(const std::map<int16_t, std::string> & val);

  bool operator == (const DatumMapRecord & rhs) const
  {
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    if (__isset.keyIdMap != rhs.__isset.keyIdMap)
      return false;
    else if (__isset.keyIdMap && !(keyIdMap == rhs.keyIdMap))
      return false;
    return true;
  }
  bool operator != (const DatumMapRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatumMapRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DatumMapRecord &a, DatumMapRecord &b);

typedef struct _ValueList__isset {
  _ValueList__isset() : values(false) {}
  bool values;
} _ValueList__isset;

class ValueList {
 public:

  static const char* ascii_fingerprint; // = "872BE22037EEE77A13DE4E5AD66FFF8D";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x2B,0xE2,0x20,0x37,0xEE,0xE7,0x7A,0x13,0xDE,0x4E,0x5A,0xD6,0x6F,0xFF,0x8D};

  ValueList(const ValueList&);
  ValueList& operator=(const ValueList&);
  ValueList() {
  }

  virtual ~ValueList() throw();
  std::vector< ::Value>  values;

  _ValueList__isset __isset;

  void __set_values(const std::vector< ::Value> & val);

  bool operator == (const ValueList & rhs) const
  {
    if (__isset.values != rhs.__isset.values)
      return false;
    else if (__isset.values && !(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const ValueList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ValueList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ValueList &a, ValueList &b);

typedef struct _DatumMap__isset {
  _DatumMap__isset() : data(false) {}
  bool data;
} _DatumMap__isset;

class DatumMap {
 public:

  static const char* ascii_fingerprint; // = "57939DD8C71DC631F68668442988EB66";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0x93,0x9D,0xD8,0xC7,0x1D,0xC6,0x31,0xF6,0x86,0x68,0x44,0x29,0x88,0xEB,0x66};

  DatumMap(const DatumMap&);
  DatumMap& operator=(const DatumMap&);
  DatumMap() {
  }

  virtual ~DatumMap() throw();
   ::Dictionary data;

  _DatumMap__isset __isset;

  void __set_data(const  ::Dictionary& val);

  bool operator == (const DatumMap & rhs) const
  {
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const DatumMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatumMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DatumMap &a, DatumMap &b);



#endif
