/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Errors_types.h"

#include <algorithm>



int _kHttpStatusCodeValues[] = {
  HttpStatusCode::BAD_REQUEST,
  HttpStatusCode::INVALID_AUTH,
  HttpStatusCode::CLOCK_TOO_SKEWED,
  HttpStatusCode::REQUEST_TOO_LARGE,
  HttpStatusCode::INTERNAL_ERROR
};
const char* _kHttpStatusCodeNames[] = {
  "BAD_REQUEST",
  "INVALID_AUTH",
  "CLOCK_TOO_SKEWED",
  "REQUEST_TOO_LARGE",
  "INTERNAL_ERROR"
};
const std::map<int, const char*> _HttpStatusCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kHttpStatusCodeValues, _kHttpStatusCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kErrorCodeValues[] = {
  ErrorCode::INTERNAL_ERROR,
  ErrorCode::SERVICE_UNAVAILABLE,
  ErrorCode::UNKNOWN,
  ErrorCode::END_OF_INTERNAL_ERROR,
  ErrorCode::ACCESS_DENIED,
  ErrorCode::VALIDATION_FAILED,
  ErrorCode::SIZE_EXCEED,
  ErrorCode::QUOTA_EXCEED,
  ErrorCode::THROUGHPUT_EXCEED,
  ErrorCode::RESOURCE_NOT_FOUND,
  ErrorCode::RESOURCE_ALREADY_EXISTS,
  ErrorCode::RESOURCE_UNAVAILABLE,
  ErrorCode::UNSUPPORTED_VERSION,
  ErrorCode::UNSUPPORTED_OPERATION,
  ErrorCode::INVALID_AUTH,
  ErrorCode::CLOCK_TOO_SKEWED,
  ErrorCode::REQUEST_TOO_LARGE,
  ErrorCode::BAD_REQUEST,
  ErrorCode::TTRANSPORT_ERROR,
  ErrorCode::UNSUPPORTED_TPROTOCOL,
  ErrorCode::REQUEST_TIMEOUT
};
const char* _kErrorCodeNames[] = {
  "INTERNAL_ERROR",
  "SERVICE_UNAVAILABLE",
  "UNKNOWN",
  "END_OF_INTERNAL_ERROR",
  "ACCESS_DENIED",
  "VALIDATION_FAILED",
  "SIZE_EXCEED",
  "QUOTA_EXCEED",
  "THROUGHPUT_EXCEED",
  "RESOURCE_NOT_FOUND",
  "RESOURCE_ALREADY_EXISTS",
  "RESOURCE_UNAVAILABLE",
  "UNSUPPORTED_VERSION",
  "UNSUPPORTED_OPERATION",
  "INVALID_AUTH",
  "CLOCK_TOO_SKEWED",
  "REQUEST_TOO_LARGE",
  "BAD_REQUEST",
  "TTRANSPORT_ERROR",
  "UNSUPPORTED_TPROTOCOL",
  "REQUEST_TIMEOUT"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(21, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRetryTypeValues[] = {
  RetryType::SAFE,
  RetryType::UNSAFE
};
const char* _kRetryTypeNames[] = {
  "SAFE",
  "UNSAFE"
};
const std::map<int, const char*> _RetryType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRetryTypeValues, _kRetryTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


ServiceException::~ServiceException() throw() {
}


void ServiceException::__set_errorCode(const ErrorCode::type val) {
  this->errorCode = val;
__isset.errorCode = true;
}

void ServiceException::__set_errorMessage(const std::string& val) {
  this->errorMessage = val;
__isset.errorMessage = true;
}

void ServiceException::__set_details(const std::string& val) {
  this->details = val;
__isset.details = true;
}

void ServiceException::__set_callId(const std::string& val) {
  this->callId = val;
__isset.callId = true;
}

void ServiceException::__set_requestId(const std::string& val) {
  this->requestId = val;
__isset.requestId = true;
}

const char* ServiceException::ascii_fingerprint = "CFC8F1BA647B5893771F349AA407502B";
const uint8_t ServiceException::binary_fingerprint[16] = {0xCF,0xC8,0xF1,0xBA,0x64,0x7B,0x58,0x93,0x77,0x1F,0x34,0x9A,0xA4,0x07,0x50,0x2B};

uint32_t ServiceException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->errorCode = (ErrorCode::type)ecast0;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorMessage);
          this->__isset.errorMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->details);
          this->__isset.details = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->callId);
          this->__isset.callId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ServiceException");

  if (this->__isset.errorCode) {
    xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->errorCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.errorMessage) {
    xfer += oprot->writeFieldBegin("errorMessage", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->errorMessage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.details) {
    xfer += oprot->writeFieldBegin("details", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->details);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.callId) {
    xfer += oprot->writeFieldBegin("callId", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->callId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requestId) {
    xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->requestId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ServiceException &a, ServiceException &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.errorMessage, b.errorMessage);
  swap(a.details, b.details);
  swap(a.callId, b.callId);
  swap(a.requestId, b.requestId);
  swap(a.__isset, b.__isset);
}

ServiceException::ServiceException(const ServiceException& other1) {
  errorCode = other1.errorCode;
  errorMessage = other1.errorMessage;
  details = other1.details;
  callId = other1.callId;
  requestId = other1.requestId;
  __isset = other1.__isset;
}
ServiceException& ServiceException::operator=(const ServiceException& other2) {
  errorCode = other2.errorCode;
  errorMessage = other2.errorMessage;
  details = other2.details;
  callId = other2.callId;
  requestId = other2.requestId;
  __isset = other2.__isset;
  return *this;
}

